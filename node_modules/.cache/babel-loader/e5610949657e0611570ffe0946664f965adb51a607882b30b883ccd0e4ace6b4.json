{"ast":null,"code":"var _jsxFileName = \"/Users/esbenvahr/Desktop/NEW FINAL/app/src/components/BalticSeaTracker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo, memo } from 'react';\nimport { Info, Ship, Menu, ZoomIn, ZoomOut, Radar, Waves, Layers, Wind } from 'lucide-react';\nimport '../styles/palantir-theme.css';\nimport { GoogleMap, useJsApiLoader, Marker, Circle, Polyline, Polygon } from '@react-google-maps/api';\n\n// Memoized components for better performance\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MemoizedMarker = /*#__PURE__*/memo(Marker);\n_c = MemoizedMarker;\nconst MemoizedCircle = /*#__PURE__*/memo(Circle);\n_c2 = MemoizedCircle;\nconst MemoizedPolygon = /*#__PURE__*/memo(Polygon);\n\n// Define container style\n_c3 = MemoizedPolygon;\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100vh'\n};\n\n// Define center for the Baltic Sea\nconst defaultCenter = {\n  lat: 59,\n  lng: 19\n};\n\n// Create a wrapper component for vessel markers\nconst VesselMarker = ({\n  vessel,\n  position,\n  icon,\n  zIndex,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(Marker, {\n    position: position,\n    icon: icon,\n    onClick: () => onClick && onClick(vessel),\n    zIndex: zIndex,\n    options: {\n      clickable: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Memoize the vessel marker for better performance\n_c4 = VesselMarker;\nconst MemoizedVesselMarker = /*#__PURE__*/memo(VesselMarker);\n\n// Create a wrapper component for wind farm markers\n_c5 = MemoizedVesselMarker;\nconst WindFarmMarker = ({\n  windFarm,\n  position,\n  icon,\n  zIndex,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(Marker, {\n    position: position,\n    icon: icon,\n    onClick: () => onClick && onClick(windFarm),\n    zIndex: zIndex,\n    options: {\n      clickable: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n// Memoize the wind farm marker for better performance\n_c6 = WindFarmMarker;\nconst MemoizedWindFarmMarker = /*#__PURE__*/memo(WindFarmMarker);\n_c7 = MemoizedWindFarmMarker;\nconst BalticSeaTracker = () => {\n  _s();\n  // API loaded state\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyAl-iGmFThUduVpLpE7sQTmniBSUPtzJjA',\n    libraries: ['geometry', 'drawing']\n  });\n  console.log(\"Map loading status:\", {\n    isLoaded,\n    loadError\n  });\n\n  // Reference to map instance\n  const mapRef = useRef(null);\n  const zoomRef = useRef(null);\n  // Animation frame reference for vessel updates\n  const animationFrameRef = useRef(null);\n\n  // State for vessel data\n  const [vessels, setVessels] = useState([]);\n  const [selectedVessel, setSelectedVessel] = useState(null);\n\n  // Display options state\n  const [displayMode, setDisplayMode] = useState('radar');\n  const [filter, setFilter] = useState('all');\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [showWindFarms, setShowWindFarms] = useState(false);\n  const [showRadarCoverage, setShowRadarCoverage] = useState(false); // New state for radar coverage\n  const [showVesselRadar, setShowVesselRadar] = useState(false); // State for vessel radar coverage (300-2999 GT)\n  const [showLargeVesselRadar, setShowLargeVesselRadar] = useState(false); // New state for large vessel radar (>3000 GT)\n  const [mapBounds, setMapBounds] = useState(null); // Track current map bounds\n  const [currentZoom, setCurrentZoom] = useState(6); // Track current zoom level\n  const [mapKey, setMapKey] = useState(Date.now()); // Add key to force remount of map components\n  const [simulationEnabled, setSimulationEnabled] = useState(false); // Track if vessel movement simulation is enabled\n  const [simulationSpeed, setSimulationSpeed] = useState(10); // Simulation speed multiplier (default 10x)\n  const lastUpdateTimeRef = useRef(Date.now()); // Reference to store last update time\n\n  // Add state to track current map center\n  const [currentMapCenter, setCurrentMapCenter] = useState(defaultCenter);\n\n  // Memoize map style to prevent recalculations\n  const mapStyle = useMemo(() => getMapStyle(displayMode), [displayMode]);\n  const mapOptions = useMemo(() => ({\n    disableDefaultUI: true,\n    zoomControl: false,\n    styles: mapStyle,\n    draggable: true,\n    // Ensure map is draggable\n    // Hide cities with population under 5000\n    restrictions: {\n      latLngBounds: {\n        north: 66.0,\n        south: 54.0,\n        east: 30.0,\n        west: 9.0\n      }\n    }\n  }), [mapStyle]);\n\n  // Create a ref to track if Google Maps loaded\n  const mapsLoadedRef = useRef(false);\n\n  // Log any errors with Google Maps loading\n  useEffect(() => {\n    if (loadError) {\n      console.error('Error loading Google Maps:', loadError);\n    }\n    if (isLoaded && !mapsLoadedRef.current) {\n      console.log('Google Maps API loaded successfully');\n      mapsLoadedRef.current = true;\n    }\n  }, [isLoaded, loadError]);\n\n  // Function to get map style based on display mode\n  function getMapStyle(mode) {\n    switch (mode) {\n      case 'radar':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#212121\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#212121\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#746855\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#181818\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#3d3d3d\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      case 'sonar':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#003545\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#003545\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#00C8FF\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#001E29\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#00E5FF\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      case 'fused':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#142639\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#142639\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#3D85C6\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#0A1C2A\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#4a90e2\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      default:\n        return [];\n    }\n  }\n\n  // Function to generate a random coordinate within Baltic Sea\n  const randomCoordinate = () => {\n    // Combine shipping lanes with wider dispersal areas\n    const shippingLanes = [\n    // Main shipping lanes (lower weight than before to reduce clustering)\n    // Danish Straits to St. Petersburg\n    {\n      minLat: 54.5,\n      maxLat: 55.2,\n      minLng: 10.8,\n      maxLng: 13.0,\n      weight: 5\n    },\n    // Danish Straits entrance\n    {\n      minLat: 55.0,\n      maxLat: 55.8,\n      minLng: 12.8,\n      maxLng: 14.5,\n      weight: 4\n    },\n    // Route east of Denmark\n    {\n      minLat: 55.3,\n      maxLat: 56.2,\n      minLng: 14.5,\n      maxLng: 16.5,\n      weight: 4\n    },\n    // Southern Sweden coast\n    {\n      minLat: 55.0,\n      maxLat: 56.0,\n      minLng: 16.5,\n      maxLng: 18.5,\n      weight: 3\n    },\n    // Midway to Gotland\n    {\n      minLat: 57.0,\n      maxLat: 58.2,\n      minLng: 18.5,\n      maxLng: 20.0,\n      weight: 4\n    },\n    // North of Gotland\n    {\n      minLat: 58.5,\n      maxLat: 59.5,\n      minLng: 20.0,\n      maxLng: 22.0,\n      weight: 3\n    },\n    // Approach to Gulf of Finland\n    {\n      minLat: 59.2,\n      maxLat: 59.8,\n      minLng: 22.0,\n      maxLng: 24.5,\n      weight: 5\n    },\n    // Gulf of Finland western part\n    {\n      minLat: 59.7,\n      maxLat: 60.2,\n      minLng: 24.5,\n      maxLng: 28.0,\n      weight: 4\n    },\n    // Gulf of Finland eastern part\n\n    // Port approaches - reduced weights to prevent clustering\n    {\n      minLat: 60.0,\n      maxLat: 60.5,\n      minLng: 24.5,\n      maxLng: 25.0,\n      weight: 3\n    },\n    // Helsinki\n    {\n      minLat: 60.2,\n      maxLat: 60.5,\n      minLng: 22.0,\n      maxLng: 22.5,\n      weight: 3\n    },\n    // Turku\n    {\n      minLat: 55.3,\n      maxLat: 56.3,\n      minLng: 12.5,\n      maxLng: 13.0,\n      weight: 3\n    },\n    // Malmö\n    {\n      minLat: 58.5,\n      maxLat: 59.5,\n      minLng: 16.5,\n      maxLng: 18.5,\n      weight: 3\n    },\n    // Stockholm\n    {\n      minLat: 54.3,\n      maxLat: 54.8,\n      minLng: 18.3,\n      maxLng: 19.0,\n      weight: 3\n    },\n    // Gdańsk\n    {\n      minLat: 54.0,\n      maxLat: 54.5,\n      minLng: 13.0,\n      maxLng: 14.5,\n      weight: 3\n    },\n    // Rostock\n\n    // Wider dispersal areas - these ensure ships are spread throughout the entire sea\n    // Central Baltic - large dispersal areas\n    {\n      minLat: 56.0,\n      maxLat: 58.0,\n      minLng: 17.0,\n      maxLng: 20.0,\n      weight: 5\n    },\n    // Central Baltic wider area\n    {\n      minLat: 57.5,\n      maxLat: 59.5,\n      minLng: 19.0,\n      maxLng: 22.0,\n      weight: 5\n    },\n    // Eastern Baltic wider area\n\n    // Gulf of Bothnia - more dispersed\n    {\n      minLat: 60.0,\n      maxLat: 62.0,\n      minLng: 18.0,\n      maxLng: 21.0,\n      weight: 4\n    },\n    // Southern Bothnia dispersed\n    {\n      minLat: 62.0,\n      maxLat: 65.0,\n      minLng: 18.0,\n      maxLng: 23.0,\n      weight: 3\n    },\n    // Northern Bothnia dispersed\n\n    // Western Baltic - more dispersed\n    {\n      minLat: 54.0,\n      maxLat: 56.0,\n      minLng: 12.0,\n      maxLng: 15.0,\n      weight: 4\n    },\n    // Western Baltic dispersed\n    {\n      minLat: 54.0,\n      maxLat: 57.0,\n      minLng: 15.0,\n      maxLng: 18.0,\n      weight: 5\n    },\n    // South-central Baltic dispersed\n\n    // Other dispersed areas to ensure wider coverage\n    {\n      minLat: 54.0,\n      maxLat: 55.5,\n      minLng: 18.0,\n      maxLng: 20.0,\n      weight: 3\n    },\n    // Southern Baltic dispersed\n    {\n      minLat: 56.5,\n      maxLat: 58.0,\n      minLng: 15.0,\n      maxLng: 17.0,\n      weight: 3\n    },\n    // Western Gotland dispersed\n    {\n      minLat: 57.0,\n      maxLat: 58.5,\n      minLng: 20.0,\n      maxLng: 22.0,\n      weight: 3\n    },\n    // Eastern Gotland dispersed\n    {\n      minLat: 57.0,\n      maxLat: 58.5,\n      minLng: 22.0,\n      maxLng: 24.0,\n      weight: 3\n    } // Gulf of Riga dispersed\n    ];\n\n    // Calculate total weight\n    const totalWeight = shippingLanes.reduce((sum, lane) => sum + lane.weight, 0);\n\n    // Pick a random lane with weighting\n    let randomPoint = Math.random() * totalWeight;\n    let selectedLane = shippingLanes[0];\n    let cumulativeWeight = 0;\n    for (const lane of shippingLanes) {\n      cumulativeWeight += lane.weight;\n      if (randomPoint <= cumulativeWeight) {\n        selectedLane = lane;\n        break;\n      }\n    }\n\n    // Increase the spread factor to ensure better dispersal within areas\n    // Create a much more randomized distribution within the selected area\n    // rather than clustering toward the center\n\n    // Get random point within the selected area with high dispersal\n    // Avoiding the tendency to cluster in the center\n    return [selectedLane.minLng + Math.random() * (selectedLane.maxLng - selectedLane.minLng),\n    // longitude - fully random within area\n    selectedLane.minLat + Math.random() * (selectedLane.maxLat - selectedLane.minLat) // latitude - fully random within area\n    ];\n  };\n\n  // Generate 300 simulated vessels with realistic properties (reduced from 1000)\n  const generateVessels = useCallback(() => {\n    const vesselTypes = ['commercial', 'military', 'fishing', 'passenger', 'tanker'];\n    const flags = ['Finland', 'Sweden', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Germany', 'Denmark', 'Russia'];\n    const russianOperators = ['Sovcomflot', 'Gazprom Fleet', 'Rosmorport', 'Russian Navy', 'Rosneft'];\n    const commercialOperators = ['Maersk', 'MSC', 'CMA CGM', 'Hapag-Lloyd', 'ONE', 'Evergreen', 'COSCO', 'Yang Ming', 'HMM', 'Grimaldi', 'DFDS', 'Stena Line', 'Tallink', 'Viking Line'];\n\n    // Generate vessels with better dispersal throughout the Baltic Sea\n    const generatedVessels = [];\n    const occupiedPositions = []; // Track positions to ensure better dispersal\n    const MIN_DISTANCE = 0.2; // Minimum distance between vessels in degrees (approx 10-20km)\n\n    // Start with fewer vessels and then disperse them more effectively\n    const maxAttempts = 300; // Limit how many times we try to place each vessel\n    let placedVesselCount = 0;\n\n    // Try to place vessels with appropriate spacing\n    for (let i = 1; placedVesselCount < 300 && i <= maxAttempts; i++) {\n      const type = vesselTypes[Math.floor(Math.random() * vesselTypes.length)];\n      const flag = flags[Math.floor(Math.random() * flags.length)];\n      const isRussian = flag === 'Russia' || Math.random() < 0.05; // 5% chance of non-Russian flag but Russian operated\n\n      // Get a potential position for the vessel\n      const position = randomCoordinate();\n\n      // Check if position is in a lake and ensure it's in the Baltic Sea\n      // Baltic Sea general bounds\n      const isInBalticSea = position[1] >= 54.0 && position[1] <= 66.0 &&\n      // Latitude bounds\n      position[0] >= 9.0 && position[0] <= 30.0 // Longitude bounds\n      ;\n\n      // If not in Baltic Sea proper, skip this position\n      if (!isInBalticSea) {\n        continue;\n      }\n\n      // Check if this position is too close to existing vessels\n      let isTooClose = false;\n      for (const existingPos of occupiedPositions) {\n        const distance = Math.sqrt(Math.pow(position[0] - existingPos[0], 2) + Math.pow(position[1] - existingPos[1], 2));\n        if (distance < MIN_DISTANCE) {\n          isTooClose = true;\n          break;\n        }\n      }\n\n      // If the position is too close to other vessels, skip this attempt\n      if (isTooClose) {\n        continue;\n      }\n\n      // If we got here, the position is good, so add it to occupied positions\n      occupiedPositions.push(position);\n      placedVesselCount++;\n\n      // Calculate a more realistic heading based on position\n      // Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\n      let heading;\n      const lat = position[1];\n      const lng = position[0];\n\n      // Baltic shipping lane direction tendencies\n      if (lng < 14.0) {\n        // Danish straits and western Baltic - generally east/west traffic\n        heading = Math.random() < 0.7 ? 70 + Math.random() * 40 : 250 + Math.random() * 40;\n      } else if (lng > 23.0 && lat > 59.0) {\n        // Gulf of Finland - generally east/west traffic\n        heading = Math.random() < 0.5 ? 80 + Math.random() * 30 : 260 + Math.random() * 30;\n      } else if (lng > 19.0 && lat > 60.0) {\n        // Gulf of Bothnia - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 30 : 180 + Math.random() * 30;\n      } else if (lng > 22.0 && lat < 58.0 && lat > 56.5) {\n        // Gulf of Riga - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 40 : 180 + Math.random() * 40;\n      } else if (lat < 56.0 && lng > 18.0) {\n        // Southern Baltic to Polish/Lithuanian ports\n        heading = Math.random() < 0.6 ? 140 + Math.random() * 40 : 320 + Math.random() * 40;\n      } else {\n        // Central Baltic - mixed traffic patterns\n        heading = Math.floor(Math.random() * 360);\n      }\n\n      // Realistic speed based on vessel type and weather (assumed normal conditions)\n      let speed;\n      if (type === 'commercial' || type === 'tanker') {\n        speed = 10 + Math.floor(Math.random() * 8); // 10-18 knots\n      } else if (type === 'passenger') {\n        speed = 15 + Math.floor(Math.random() * 10); // 15-25 knots\n      } else if (type === 'military') {\n        speed = 5 + Math.floor(Math.random() * 25); // 5-30 knots (more variable)\n      } else if (type === 'fishing') {\n        // Fishing vessels move slower or may be stationary when fishing\n        speed = Math.random() < 0.3 ? 0 : 5 + Math.floor(Math.random() * 7); // 0 or 5-12 knots\n      } else {\n        speed = Math.floor(Math.random() * 15) + 5; // 5-20 knots default\n      }\n\n      // Determine vessel size\n      const length = type === 'tanker' || type === 'commercial' ? 100 + Math.floor(Math.random() * 300) : type === 'military' ? 50 + Math.floor(Math.random() * 200) : 20 + Math.floor(Math.random() * 50);\n\n      // Calculate gross tonnage (GT) based on vessel length and type\n      // Using simplified formula based on vessel dimensions\n      let grossTonnage;\n      if (type === 'commercial' || type === 'tanker') {\n        // Commercial and tanker vessels have higher GT/length ratios\n        grossTonnage = Math.round(length * length * 0.18); // Approximation\n      } else if (type === 'military') {\n        // Military vessels are typically more dense but smaller\n        grossTonnage = Math.round(length * length * 0.16);\n      } else if (type === 'passenger') {\n        // Passenger vessels have high volume and less dense cargo\n        grossTonnage = Math.round(length * length * 0.2);\n      } else {\n        // Fishing and other vessels\n        grossTonnage = Math.round(length * length * 0.12);\n      }\n\n      // Determine operator\n      let operator;\n      if (isRussian) {\n        operator = russianOperators[Math.floor(Math.random() * russianOperators.length)];\n      } else {\n        operator = commercialOperators[Math.floor(Math.random() * commercialOperators.length)];\n      }\n\n      // Generate a realistic vessel name\n      const prefixes = isRussian ? ['Admiral', 'Kapitan', 'Vostok', 'Sibir', 'Moskva', 'Sankt-Peterburg', 'Akademik'] : ['Northern', 'Baltic', 'Sea', 'Atlantic', 'Pacific', 'Star', 'Pioneer'];\n      const suffixes = isRussian ? ['Kuznetsov', 'Nakhimov', 'Gorshkov', 'Lazarev', 'Kasatonov', 'Ustinov'] : ['Adventurer', 'Explorer', 'Navigator', 'Voyager', 'Mariner', 'Trader', 'Express'];\n      const shipNumbers = ['I', 'II', 'III', 'IV', 'V', '1', '2', '3', '4', '5'];\n      let name;\n      if (Math.random() < 0.3) {\n        // 30% chance of having a prefix-suffix name\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${suffixes[Math.floor(Math.random() * suffixes.length)]}`;\n      } else if (Math.random() < 0.5) {\n        // 20% chance of having a name with a number\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${shipNumbers[Math.floor(Math.random() * shipNumbers.length)]}`;\n      } else {\n        // 50% chance of having a simple prefix or suffix name\n        name = Math.random() < 0.5 ? prefixes[Math.floor(Math.random() * prefixes.length)] : suffixes[Math.floor(Math.random() * suffixes.length)];\n      }\n      if (type === 'military' && isRussian) {\n        name = `RFS ${name}`; // Russian Federation Ship\n      }\n\n      // Calculate a detection probability\n      const detectionProbability = {\n        radar: Math.random(),\n        // 0-1, higher means more visible on radar\n        sonar: Math.random(),\n        // 0-1, higher means more detectable by sonar\n        fused: (Math.random() + Math.random()) / 2 // average of two values for a more normal distribution\n      };\n\n      // Generate a vessel object with all properties\n      generatedVessels.push({\n        id: placedVesselCount,\n        name,\n        type,\n        flag,\n        isRussian,\n        position,\n        heading,\n        speed,\n        length,\n        operator,\n        detectionProbability,\n        grossTonnage\n      });\n    }\n\n    // More evenly disperse submarines too\n    // Generate Russian submarines with special characteristics\n    const submarineNames = ['Krasnodar', 'Novorossiysk', 'Rostov-on-Don', 'Stary Oskol', 'Velikiy Novgorod', 'Kolpino', 'Sankt Peterburg'];\n    const submarineClasses = ['Kilo-class', 'Kilo-class', 'Kilo-class', 'Kilo-class', 'Improved Kilo-class', 'Improved Kilo-class', 'Lada-class'];\n    const submarineDesignations = ['B-265', 'B-261', 'B-237', 'B-262', 'B-268', 'B-271', 'B-585'];\n\n    // Use more strategic submarine positions\n    const submarineAreas = [\n    // Gulf of Finland approach - monitoring traffic to St. Petersburg\n    [26.2, 59.7],\n    // Near NATO naval exercise areas in central Baltic\n    [19.3, 56.8],\n    // Monitoring approach to Stockholm archipelago\n    [18.9, 58.9],\n    // Deep water between Gotland and Latvia (strategic position)\n    [20.1, 57.3],\n    // Patrolling near Kaliningrad naval base\n    [19.6, 55.2],\n    // Monitoring naval traffic near Gdańsk\n    [18.8, 54.8],\n    // Danish straits approaches - key strategic chokepoint\n    [12.8, 55.4]];\n\n    // Add some randomness to submarine positions to avoid perfect predictability\n    const randomizedSubmarineAreas = submarineAreas.map(pos => [pos[0] + (Math.random() - 0.5) * 0.5,\n    // Add up to ±0.25 degrees longitude\n    pos[1] + (Math.random() - 0.5) * 0.3 // Add up to ±0.15 degrees latitude\n    ]);\n\n    // Add submarines to generated vessels\n    for (let i = 0; i < 7; i++) {\n      const position = randomizedSubmarineAreas[i];\n      const heading = Math.floor(Math.random() * 360);\n      const speed = 5 + Math.floor(Math.random() * 10); // Submarines move slower on average\n      const depth = 20 + Math.floor(Math.random() * 180); // Depth in meters\n\n      // Submarine detection characteristics\n      // Low radar detection when submerged, high sonar signature\n      const isSubmerged = Math.random() > 0.3; // 70% chance of being submerged\n\n      const detectionProbability = {\n        radar: isSubmerged ? 0.05 + Math.random() * 0.1 : 0.3 + Math.random() * 0.2,\n        // Low radar when submerged\n        sonar: 0.6 + Math.random() * 0.4,\n        // High sonar signature\n        fused: isSubmerged ? (0.05 + Math.random() * 0.1 + 0.6 + Math.random() * 0.4) / 2 :\n        // Average when submerged\n        (0.3 + Math.random() * 0.2 + 0.6 + Math.random() * 0.4) / 2 // Average when surfaced\n      };\n      generatedVessels.push({\n        id: 1001 + i,\n        // IDs starting from 1001 for submarines\n        name: `RFS ${submarineNames[i]}`,\n        type: 'submarine',\n        class: submarineClasses[i],\n        designation: submarineDesignations[i],\n        flag: 'Russia',\n        isRussian: true,\n        position,\n        heading,\n        speed,\n        depth,\n        length: 70 + Math.floor(Math.random() * 20),\n        // Kilo-class submarines are around 70-74m\n        isSubmerged,\n        operator: 'Russian Navy',\n        detectionProbability\n      });\n    }\n    return generatedVessels;\n  }, []);\n\n  // Generate vessel data when component mounts\n  useEffect(() => {\n    const simulatedVessels = generateVessels();\n    setVessels(simulatedVessels);\n  }, [generateVessels]);\n\n  // Update vessel positions based on speed and heading\n  const updateVesselPositions = useCallback(() => {\n    if (!simulationEnabled) return;\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - lastUpdateTimeRef.current) / 1000; // Convert ms to seconds\n    lastUpdateTimeRef.current = currentTime;\n\n    // Apply speed multiplier to deltaTime\n    const adjustedDeltaTime = deltaTime * simulationSpeed;\n\n    // Skip if delta time is too large (e.g., browser tab was inactive)\n    if (adjustedDeltaTime > 5) return;\n    setVessels(prevVessels => {\n      return prevVessels.map(vessel => {\n        // Skip stationary vessels\n        if (vessel.speed === 0) return vessel;\n\n        // Convert knots to degrees per second\n        // 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n        // Adjust for latitude (narrower longitude degrees at higher latitudes)\n        const latitudeAdjustment = Math.cos(vessel.position[1] * Math.PI / 180);\n        const longitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime / latitudeAdjustment;\n        const latitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime;\n\n        // Calculate new position based on heading\n        const headingRad = vessel.heading * Math.PI / 180;\n        const newLng = vessel.position[0] + longitudeChange * Math.sin(headingRad);\n        const newLat = vessel.position[1] + latitudeChange * Math.cos(headingRad);\n\n        // Enhanced boundary checking to keep vessels within the actual Baltic Sea water\n        if (!isInBalticSeaWaters(newLat, newLng)) {\n          // If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n          // Use a more detailed approach to find the right direction\n\n          // Try finding a better direction by checking multiple angles\n          let bestHeading = vessel.heading;\n          let foundBetterDirection = false;\n\n          // Check 8 directions around to find waters\n          for (let angleOffset = 0; angleOffset < 360; angleOffset += 45) {\n            const testHeading = (vessel.heading + angleOffset) % 360;\n            const testRad = testHeading * Math.PI / 180;\n\n            // Check a position further out in this direction\n            const testLng = vessel.position[0] + longitudeChange * 5 * Math.sin(testRad);\n            const testLat = vessel.position[1] + latitudeChange * 5 * Math.cos(testRad);\n            if (isInBalticSeaWaters(testLat, testLng)) {\n              bestHeading = testHeading;\n              foundBetterDirection = true;\n              break;\n            }\n          }\n\n          // If no good direction found, head toward the Baltic center\n          if (!foundBetterDirection) {\n            const centerLat = 58.5; // More centered in the main Baltic basin\n            const centerLng = 20; // Adjusted to be in deeper waters\n            const angleToCenter = Math.atan2(centerLng - vessel.position[0], centerLat - vessel.position[1]) * 180 / Math.PI;\n\n            // Turn gradually toward the center\n            const headingDiff = (angleToCenter - vessel.heading + 540) % 360 - 180;\n            bestHeading = (vessel.heading + Math.sign(headingDiff) * 45) % 360;\n            if (bestHeading < 0) bestHeading += 360;\n          }\n\n          // Slow down near boundaries\n          const reducedSpeed = Math.max(1, vessel.speed * 0.5);\n          return {\n            ...vessel,\n            heading: bestHeading,\n            speed: reducedSpeed // Temporarily reduce speed when changing course\n          };\n        }\n\n        // For military and submarine vessels, randomly change heading occasionally\n        let newHeading = vessel.heading;\n        const originalSpeed = vessel.speed;\n        let newSpeed = originalSpeed;\n        if ((vessel.type === 'military' || vessel.type === 'submarine') && Math.random() < 0.01 * adjustedDeltaTime) {\n          // Change heading by up to +/- 30 degrees\n          newHeading = (vessel.heading + (Math.random() * 60 - 30)) % 360;\n          if (newHeading < 0) newHeading += 360;\n\n          // Military vessels might change speed during maneuvers\n          if (Math.random() < 0.3) {\n            const speedFactor = 0.7 + Math.random() * 0.6; // 70-130% of current speed\n            newSpeed = Math.max(1, Math.min(30, originalSpeed * speedFactor));\n          }\n        }\n        // Smaller random heading changes for other vessels to simulate realistic movement\n        else if (Math.random() < 0.005 * adjustedDeltaTime) {\n          // Change heading by up to +/- 10 degrees\n          newHeading = (vessel.heading + (Math.random() * 20 - 10)) % 360;\n          if (newHeading < 0) newHeading += 360;\n        }\n        return {\n          ...vessel,\n          position: [newLng, newLat],\n          heading: newHeading,\n          speed: newSpeed\n        };\n      });\n    });\n\n    // Request next animation frame\n    animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n  }, [simulationEnabled, simulationSpeed]);\n\n  // Function to check if a point is in Baltic Sea waters\n  // This is a more precise check than just the bounding box\n  const isInBalticSeaWaters = useCallback((lat, lng) => {\n    // First check overall bounds\n    if (lat < 54.0 || lat > 66.0 || lng < 9.0 || lng > 30.0) {\n      return false;\n    }\n\n    // Define areas that are land (to be avoided)\n    // Format: [south, north, west, east]\n    const landAreas = [\n    // Southern Sweden\n    [55.0, 59.5, 12.5, 15.5],\n    // Finland\n    [59.7, 65.5, 21.0, 30.0],\n    // Estonia\n    [57.5, 59.7, 23.0, 28.5],\n    // Latvia/Lithuania coast\n    [55.5, 57.5, 21.0, 28.0],\n    // Poland inland\n    [54.0, 55.5, 15.0, 19.5],\n    // Germany/Denmark inland\n    [54.0, 56.0, 9.0, 12.0],\n    // Gotland\n    [56.8, 58.0, 18.0, 19.2],\n    // Åland Islands\n    [59.7, 60.5, 19.3, 21.3],\n    // Bornholm\n    [54.9, 55.3, 14.7, 15.2]];\n\n    // Define key shipping channels and deep waters (preferred areas)\n    // Format: [south, north, west, east, weight]\n    const shippingChannels = [\n    // Main Baltic basin\n    [55.5, 59.0, 16.5, 22.0, 10],\n    // Gulf of Finland shipping lane\n    [59.3, 60.2, 22.5, 28.0, 8],\n    // Approach to Stockholm\n    [58.7, 59.5, 17.5, 19.5, 6],\n    // Approach to Riga\n    [56.8, 58.0, 22.5, 24.5, 6],\n    // Approach to Helsinki/Tallinn\n    [59.2, 59.9, 24.0, 25.5, 8],\n    // Western Baltic shipping lane\n    [54.5, 56.0, 12.0, 15.0, 8],\n    // Kattegat\n    [56.0, 57.5, 10.5, 12.0, 6],\n    // Gulf of Bothnia\n    [60.5, 63.5, 18.5, 21.5, 5]];\n\n    // Check if point is in a land area\n    for (const [south, north, west, east] of landAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // Further check for complex coastlines\n        // This is a very simplified approach - we add some randomness \n        // to prevent vessels from getting stuck at sharp boundary transitions\n\n        // If near the edge of a land area, there's a small chance to still consider it water\n        // This helps vessels navigate around complex coastlines without getting stuck\n        const distanceFromEdge = Math.min(Math.abs(lat - south), Math.abs(lat - north), Math.abs(lng - west), Math.abs(lng - east));\n\n        // Very close to edge - might be a complex coastline\n        if (distanceFromEdge < 0.1) {\n          // 20% chance to consider it water if very close to edge\n          // This randomness helps prevent getting stuck at boundaries\n          return Math.random() < 0.2;\n        }\n        return false; // It's in a land area\n      }\n    }\n\n    // Check if in a preferred shipping channel\n    for (const [south, north, west, east] of shippingChannels) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true; // In a shipping channel - definitely good\n      }\n    }\n\n    // For areas not explicitly defined, use the following general rules\n\n    // Avoid shallow coastal waters (simplified approach)\n    // These are general buffer zones around landmasses\n    const coastalBuffers = [\n    // Swedish coast buffer\n    [55.0, 59.5, 15.5, 16.0],\n    // Finnish coast buffer\n    [59.7, 65.5, 20.0, 21.0],\n    // Estonian coast buffer\n    [57.5, 59.7, 22.0, 23.0],\n    // Latvian/Lithuanian coast buffer\n    [55.5, 57.5, 20.0, 21.0],\n    // Polish coast buffer\n    [54.0, 55.5, 14.0, 15.0],\n    // German/Danish coast buffer\n    [54.0, 56.0, 12.0, 12.5]];\n\n    // Check coastal buffers with higher probability of rejection\n    for (const [south, north, west, east] of coastalBuffers) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 70% chance to consider coastal buffers as land\n        return Math.random() > 0.7;\n      }\n    }\n\n    // If we got here, it's probably in open water\n    return true;\n  }, []);\n\n  // Start/stop vessel position updates when simulation state changes\n  useEffect(() => {\n    if (simulationEnabled) {\n      lastUpdateTimeRef.current = Date.now();\n      animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Cleanup when component unmounts\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [simulationEnabled, updateVesselPositions]);\n\n  // Function to check if an item is in the current map bounds\n  const isInMapBounds = useCallback((lat, lng) => {\n    if (!mapBounds) return true; // If no bounds yet, show everything\n\n    // Add buffer to avoid popping at edges\n    const buffer = 0.5; // Buffer in degrees\n\n    return lat >= mapBounds.south - buffer && lat <= mapBounds.north + buffer && lng >= mapBounds.west - buffer && lng <= mapBounds.east + buffer;\n  }, [mapBounds]);\n\n  // Function to render vessels based on the display mode and zoom level\n  const renderVessels = useCallback(() => {\n    // Use zoom level to determine detail level\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    const isLowDetail = currentZoom < 6;\n\n    // Filter vessels based on current filter and map bounds\n    const filteredVessels = vessels.filter(v => {\n      // First apply user filter\n      const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n\n      // Then check if in current map bounds\n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      return matchesFilter && inBounds;\n    });\n\n    // Create vessel markers\n    return filteredVessels.map(vessel => {\n      // Convert vessel position to LatLng\n      const position = {\n        lat: vessel.position[1],\n        lng: vessel.position[0]\n      };\n      const isSelected = (selectedVessel === null || selectedVessel === void 0 ? void 0 : selectedVessel.id) === vessel.id;\n\n      // Define icon and visualization based on display mode and zoom level\n      let iconProps = {};\n      let circleProps = {\n        radius: 0\n      };\n      switch (displayMode) {\n        case 'radar':\n          // Radar mode - shows vessels as dots with direction indicators\n          const radarOpacity = vessel.type === 'submarine' && vessel.isSubmerged ? 0.1 + vessel.detectionProbability.radar * 0.2 : 0.3 + vessel.detectionProbability.radar * 0.7;\n          const radarScale = vessel.type === 'submarine' ? vessel.isSubmerged ? 0.5 : 0.8 : Math.max(0.6, Math.min(1.2, 0.6 + vessel.length / 300));\n          const radarColor = vessel.type === 'submarine' ? 'rgb(255, 0, 0)' : vessel.isRussian ? 'rgb(231, 76, 60)' : 'rgb(52, 152, 219)';\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else if (isMediumDetail) {\n            // Simplified arrow for medium detail\n            const arrowSize = radarScale * 4;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize / 2},${arrowSize} L -${arrowSize / 2},${arrowSize} Z`,\n              // Simpler arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else {\n            // Full detail for high zoom levels\n            const arrowSize = radarScale * 5;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize / 2},${arrowSize} L 0,${arrowSize / 2} L -${arrowSize / 2},${arrowSize} Z`,\n              // Arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          }\n          break;\n        case 'sonar':\n          // Sonar mode - shows vessels as acoustic signatures\n          const sonarOpacity = vessel.type === 'submarine' ? 0.5 + vessel.detectionProbability.sonar * 0.5 : 0.2 + vessel.detectionProbability.sonar * 0.8;\n          const sonarColor = vessel.type === 'submarine' ? '#FF00FF' : '#00E5FF';\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n\n            // Simplified acoustic wave\n            if (vessel.type === 'submarine') {\n              const waveRadius = vessel.speed * 80;\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1\n                }\n              };\n            }\n          } else {\n            // Use the same arrow shape as radar mode but with sonar colors\n            const sonarArrowSize = vessel.type === 'submarine' ? 5 : 4;\n            iconProps = {\n              path: `M 0,-${sonarArrowSize} L ${sonarArrowSize / 2},${sonarArrowSize} L 0,${sonarArrowSize / 2} L -${sonarArrowSize / 2},${sonarArrowSize} Z`,\n              // Arrow shape\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n\n            // Add acoustic wave circle - only at higher zoom levels\n            if (isHighDetail) {\n              const waveRadius = vessel.type === 'submarine' ? Math.max(500, vessel.speed * 100) : Math.max(300, vessel.speed * 60);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.05,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.2,\n                  strokeWeight: 1\n                }\n              };\n            } else if (isMediumDetail && vessel.type === 'submarine') {\n              const waveRadius = Math.max(300, vessel.speed * 80);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1\n                }\n              };\n            }\n          }\n          break;\n        case 'fused':\n          // Fused mode - combines radar and sonar data\n          const fusedOpacity = 0.4 + vessel.detectionProbability.fused * 0.6;\n\n          // Create color gradient based on radar/sonar detection probabilities\n          const radarValue = Math.floor(vessel.detectionProbability.radar * 255);\n          const sonarValue = Math.floor(vessel.detectionProbability.sonar * 255);\n          const fusedColor = vessel.isRussian ? `rgb(255, 100, 100)` : `rgb(100, ${radarValue}, ${sonarValue})`;\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else {\n            // Use the same arrow shape as other modes but with fused colors\n            const fusedArrowSize = 5;\n            iconProps = {\n              path: `M 0,-${fusedArrowSize} L ${fusedArrowSize / 2},${fusedArrowSize} L 0,${fusedArrowSize / 2} L -${fusedArrowSize / 2},${fusedArrowSize} Z`,\n              // Arrow shape\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          }\n\n          // Add confidence circle - only at higher zoom levels\n          if (isHighDetail) {\n            const confidenceRadius = 300 + (1 - vessel.detectionProbability.fused) * 1000;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.4,\n                strokeWeight: 0.5\n              }\n            };\n          } else if (isMediumDetail && (vessel.type === 'military' || vessel.type === 'submarine')) {\n            // Only show confidence circles for important vessels at medium zoom\n            const confidenceRadius = 200 + (1 - vessel.detectionProbability.fused) * 800;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.3,\n                strokeWeight: 0.5\n              }\n            };\n          }\n          break;\n        default:\n          // Default to radar mode with arrow icon\n          const defaultSize = 5;\n          iconProps = {\n            path: `M 0,-${defaultSize} L ${defaultSize / 2},${defaultSize} L 0,${defaultSize / 2} L -${defaultSize / 2},${defaultSize} Z`,\n            // Arrow shape\n            fillColor: '#FFFFFF',\n            fillOpacity: 0.8,\n            strokeColor: '#000000',\n            strokeWeight: 1,\n            rotation: vessel.heading,\n            scale: 1,\n            anchor: new window.google.maps.Point(0, 0)\n          };\n          break;\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: position,\n          icon: iconProps,\n          onClick: () => {\n            console.log(\"Vessel clicked:\", vessel.name, vessel);\n            setSelectedVessel(vessel);\n          },\n          clickable: true,\n          zIndex: isSelected ? 1000 : vessel.type === 'submarine' ? 500 : 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 11\n        }, this), circleProps.radius > 0 && /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: circleProps.radius,\n          options: circleProps.options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 13\n        }, this), vessel.type === 'submarine' && vessel.isSubmerged && displayMode !== 'fused' && isHighDetail && /*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: {\n            lat: position.lat + 0.03,\n            lng: position.lng + 0.03\n          },\n          label: {\n            text: `${vessel.depth}m`,\n            color: '#FFFFFF',\n            fontSize: '8px',\n            fontWeight: 'bold'\n          },\n          icon: {\n            path: 0,\n            // CIRCLE\n            scale: 0,\n            fillOpacity: 0,\n            strokeOpacity: 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 13\n        }, this)]\n      }, vessel.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 9\n      }, this);\n    });\n  }, [vessels, filter, isInMapBounds, selectedVessel, displayMode, currentZoom]);\n\n  // Baltic Sea wind farm data - expanded with EMODnet data\n  const windFarmsData = [\n  // Denmark\n  {\n    name: \"Kriegers Flak\",\n    country: \"Denmark\",\n    capacity: 604,\n    lat: 54.9833,\n    lng: 13.0333,\n    status: \"operational\",\n    turbines: 72,\n    area: 132,\n    // km²\n    areaPoints: [{\n      lat: 54.9633,\n      lng: 13.0133\n    }, {\n      lat: 54.9733,\n      lng: 13.0533\n    }, {\n      lat: 55.0033,\n      lng: 13.0533\n    }, {\n      lat: 55.0033,\n      lng: 13.0133\n    }, {\n      lat: 54.9833,\n      lng: 12.9933\n    }, {\n      lat: 54.9633,\n      lng: 13.0133\n    }]\n  }, {\n    name: \"Middelgrunden\",\n    country: \"Denmark\",\n    capacity: 40,\n    lat: 55.6853,\n    lng: 12.6913,\n    status: \"operational\",\n    turbines: 20,\n    area: 4,\n    // km²\n    areaPoints: [{\n      lat: 55.6903,\n      lng: 12.6813\n    }, {\n      lat: 55.6903,\n      lng: 12.7013\n    }, {\n      lat: 55.6803,\n      lng: 12.7013\n    }, {\n      lat: 55.6803,\n      lng: 12.6813\n    }, {\n      lat: 55.6903,\n      lng: 12.6813\n    }]\n  }, {\n    name: \"Rødsand I\",\n    country: \"Denmark\",\n    capacity: 166,\n    lat: 54.5508,\n    lng: 11.7083,\n    status: \"operational\",\n    turbines: 72,\n    area: 35,\n    // km²\n    areaPoints: [{\n      lat: 54.5408,\n      lng: 11.6883\n    }, {\n      lat: 54.5408,\n      lng: 11.7283\n    }, {\n      lat: 54.5608,\n      lng: 11.7283\n    }, {\n      lat: 54.5608,\n      lng: 11.6883\n    }, {\n      lat: 54.5408,\n      lng: 11.6883\n    }]\n  }, {\n    name: \"Rødsand II\",\n    country: \"Denmark\",\n    capacity: 207,\n    lat: 54.5580,\n    lng: 11.6170,\n    status: \"operational\",\n    turbines: 90,\n    area: 40\n  }, {\n    name: \"Anholt\",\n    country: \"Denmark\",\n    capacity: 400,\n    lat: 56.6000,\n    lng: 11.2097,\n    status: \"operational\",\n    turbines: 111,\n    area: 88\n  }, {\n    name: \"Sprogø\",\n    country: \"Denmark\",\n    capacity: 21,\n    lat: 55.3414,\n    lng: 10.9767,\n    status: \"operational\",\n    turbines: 7,\n    area: 6\n  }, {\n    name: \"Samsø\",\n    country: \"Denmark\",\n    capacity: 23,\n    lat: 55.7194,\n    lng: 10.5639,\n    status: \"operational\",\n    turbines: 10,\n    area: 5\n  },\n  // Sweden\n  {\n    name: \"Karehamn\",\n    country: \"Sweden\",\n    capacity: 48,\n    lat: 56.9750,\n    lng: 17.0000,\n    status: \"operational\",\n    turbines: 16,\n    area: 8\n  }, {\n    name: \"Lillgrund\",\n    country: \"Sweden\",\n    capacity: 110,\n    lat: 55.5000,\n    lng: 12.7667,\n    status: \"operational\",\n    turbines: 48,\n    area: 6\n  }, {\n    name: \"Södra Midsjöbanken\",\n    country: \"Sweden\",\n    capacity: 1500,\n    lat: 55.7500,\n    lng: 17.4000,\n    status: \"planned\",\n    turbines: 170,\n    area: 265\n  }, {\n    name: \"Storgrundet\",\n    country: \"Sweden\",\n    capacity: 265,\n    lat: 61.1532,\n    lng: 17.4376,\n    status: \"planned\",\n    turbines: 70,\n    area: 57\n  }, {\n    name: \"Utgrunden\",\n    country: \"Sweden\",\n    capacity: 10.5,\n    lat: 56.3350,\n    lng: 16.2860,\n    status: \"operational\",\n    turbines: 7,\n    area: 2\n  }, {\n    name: \"Bockstigen\",\n    country: \"Sweden\",\n    capacity: 2.5,\n    lat: 57.0389,\n    lng: 18.1378,\n    status: \"operational\",\n    turbines: 5,\n    area: 1\n  },\n  // Germany\n  {\n    name: \"EnBW Baltic 1\",\n    country: \"Germany\",\n    capacity: 48,\n    lat: 54.6080,\n    lng: 12.6520,\n    status: \"operational\",\n    turbines: 21,\n    area: 7\n  }, {\n    name: \"EnBW Baltic 2\",\n    country: \"Germany\",\n    capacity: 288,\n    lat: 54.9900,\n    lng: 13.1666,\n    status: \"operational\",\n    turbines: 80,\n    area: 27\n  }, {\n    name: \"Arkona\",\n    country: \"Germany\",\n    capacity: 385,\n    lat: 54.7833,\n    lng: 14.1000,\n    status: \"operational\",\n    turbines: 60,\n    area: 39\n  }, {\n    name: \"Wikinger\",\n    country: \"Germany\",\n    capacity: 350,\n    lat: 54.8333,\n    lng: 14.0750,\n    status: \"operational\",\n    turbines: 70,\n    area: 34\n  }, {\n    name: \"Arcadis Ost 1\",\n    country: \"Germany\",\n    capacity: 257,\n    lat: 54.8333,\n    lng: 13.7500,\n    status: \"under construction\",\n    turbines: 27,\n    area: 30\n  }, {\n    name: \"Gennaker\",\n    country: \"Germany\",\n    capacity: 927,\n    lat: 54.5500,\n    lng: 12.2500,\n    status: \"planned\",\n    turbines: 103,\n    area: 176\n  }, {\n    name: \"Nordlicher Grund\",\n    country: \"Germany\",\n    capacity: 630,\n    lat: 54.9831,\n    lng: 6.3582,\n    status: \"planned\",\n    turbines: 64,\n    area: 57\n  }, {\n    name: \"Ostseeschatz\",\n    country: \"Germany\",\n    capacity: 372,\n    lat: 54.3660,\n    lng: 11.9165,\n    status: \"planned\",\n    turbines: 62,\n    area: 40\n  }, {\n    name: \"Baltic Eagle\",\n    country: \"Germany\",\n    capacity: 476,\n    lat: 54.7778,\n    lng: 13.9239,\n    status: \"under construction\",\n    turbines: 50,\n    area: 40\n  },\n  // Finland\n  {\n    name: \"Tahkoluoto\",\n    country: \"Finland\",\n    capacity: 42,\n    lat: 61.6330,\n    lng: 21.3830,\n    status: \"operational\",\n    turbines: 10,\n    area: 15\n  }, {\n    name: \"Ajos\",\n    country: \"Finland\",\n    capacity: 42,\n    lat: 65.7166,\n    lng: 24.5166,\n    status: \"operational\",\n    turbines: 13,\n    area: 10\n  }, {\n    name: \"Kemi Ajos I\",\n    country: \"Finland\",\n    capacity: 15,\n    lat: 65.6405,\n    lng: 24.5267,\n    status: \"operational\",\n    turbines: 5,\n    area: 6\n  }, {\n    name: \"Kemi Ajos II\",\n    country: \"Finland\",\n    capacity: 16,\n    lat: 65.6563,\n    lng: 24.5402,\n    status: \"operational\",\n    turbines: 3,\n    area: 4\n  }, {\n    name: \"Raahe\",\n    country: \"Finland\",\n    capacity: 44,\n    lat: 64.6500,\n    lng: 24.3500,\n    status: \"planned\",\n    turbines: 8,\n    area: 15\n  }, {\n    name: \"Korsnäs\",\n    country: \"Finland\",\n    capacity: 1300,\n    lat: 62.7500,\n    lng: 21.0500,\n    status: \"planned\",\n    turbines: 70,\n    area: 175\n  }, {\n    name: \"Siikajoki\",\n    country: \"Finland\",\n    capacity: 100,\n    lat: 64.8167,\n    lng: 24.6167,\n    status: \"planned\",\n    turbines: 20,\n    area: 25\n  },\n  // Poland\n  {\n    name: \"Baltic Power\",\n    country: \"Poland\",\n    capacity: 1200,\n    lat: 55.0000,\n    lng: 18.3330,\n    status: \"under construction\",\n    turbines: 76,\n    area: 131\n  }, {\n    name: \"FEW Baltic II\",\n    country: \"Poland\",\n    capacity: 350,\n    lat: 54.8000,\n    lng: 16.5000,\n    status: \"planned\",\n    turbines: 37,\n    area: 41\n  }, {\n    name: \"Baltica 1\",\n    country: \"Poland\",\n    capacity: 896,\n    lat: 55.2060,\n    lng: 17.1633,\n    status: \"planned\",\n    turbines: 64,\n    area: 108\n  }, {\n    name: \"Baltica 2\",\n    country: \"Poland\",\n    capacity: 1498,\n    lat: 55.3340,\n    lng: 16.8630,\n    status: \"planned\",\n    turbines: 107,\n    area: 190\n  }, {\n    name: \"Baltica 3\",\n    country: \"Poland\",\n    capacity: 1045,\n    lat: 55.3340,\n    lng: 16.7000,\n    status: \"planned\",\n    turbines: 95,\n    area: 131\n  }, {\n    name: \"MFW Bałtyk I\",\n    country: \"Poland\",\n    capacity: 1560,\n    lat: 55.2383,\n    lng: 17.4633,\n    status: \"planned\",\n    turbines: 100,\n    area: 128\n  }, {\n    name: \"MFW Bałtyk II\",\n    country: \"Poland\",\n    capacity: 720,\n    lat: 55.1233,\n    lng: 17.2467,\n    status: \"planned\",\n    turbines: 60,\n    area: 65\n  }, {\n    name: \"MFW Bałtyk III\",\n    country: \"Poland\",\n    capacity: 720,\n    lat: 55.0817,\n    lng: 17.0667,\n    status: \"planned\",\n    turbines: 60,\n    area: 80\n  },\n  // Estonia\n  {\n    name: \"Estonia Offshore 1\",\n    country: \"Estonia\",\n    capacity: 1000,\n    lat: 58.8000,\n    lng: 22.0000,\n    status: \"planned\",\n    turbines: 115,\n    area: 230,\n    // km²\n    areaPoints: [{\n      lat: 58.7800,\n      lng: 21.9600\n    }, {\n      lat: 58.7800,\n      lng: 22.0400\n    }, {\n      lat: 58.8200,\n      lng: 22.0400\n    }, {\n      lat: 58.8200,\n      lng: 21.9600\n    }, {\n      lat: 58.7800,\n      lng: 21.9600\n    }]\n  }, {\n    name: \"Liivi\",\n    country: \"Estonia\",\n    capacity: 1000,\n    lat: 57.8333,\n    lng: 23.5000,\n    status: \"planned\",\n    turbines: 100,\n    area: 160\n  }, {\n    name: \"Hiiumaa\",\n    country: \"Estonia\",\n    capacity: 700,\n    lat: 59.0833,\n    lng: 22.3833,\n    status: \"planned\",\n    turbines: 70,\n    area: 100\n  }, {\n    name: \"Saare-Liivi\",\n    country: \"Estonia\",\n    capacity: 600,\n    lat: 57.9500,\n    lng: 22.6833,\n    status: \"planned\",\n    turbines: 60,\n    area: 90\n  },\n  // Latvia\n  {\n    name: \"ELWIND\",\n    country: \"Latvia\",\n    capacity: 1000,\n    lat: 57.0830,\n    lng: 20.7500,\n    status: \"planned\",\n    turbines: 100,\n    area: 200\n  },\n  // Lithuania\n  {\n    name: \"Lithuanian OWF I\",\n    country: \"Lithuania\",\n    capacity: 700,\n    lat: 55.8330,\n    lng: 20.5000,\n    status: \"planned\",\n    turbines: 70,\n    area: 120\n  },\n  // Special projects\n  {\n    name: \"Bornholm Energy Island\",\n    country: \"Denmark\",\n    capacity: 3000,\n    lat: 55.1000,\n    lng: 14.9000,\n    status: \"planned\",\n    turbines: 200,\n    area: 400,\n    // km²\n    areaPoints: [{\n      lat: 55.0500,\n      lng: 14.8500\n    }, {\n      lat: 55.0500,\n      lng: 14.9500\n    }, {\n      lat: 55.1500,\n      lng: 14.9500\n    }, {\n      lat: 55.1500,\n      lng: 14.8500\n    }, {\n      lat: 55.0500,\n      lng: 14.8500\n    }]\n  }, {\n    name: \"Hywind Tampen\",\n    country: \"Norway\",\n    capacity: 88,\n    lat: 61.2500,\n    lng: 20.4000,\n    status: \"operational\",\n    turbines: 11,\n    area: 22\n  }];\n\n  // Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\n  const renderWindFarms = useCallback(() => {\n    if (!showWindFarms) return null;\n\n    // Filter wind farms to only show those in current map bounds\n    const visibleWindFarms = windFarmsData.filter(farm => isInMapBounds(farm.lat, farm.lng));\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    return visibleWindFarms.map(windFarm => {\n      const position = {\n        lat: windFarm.lat,\n        lng: windFarm.lng\n      };\n\n      // Use different colors based on wind farm status\n      const fillColor = windFarm.status === \"operational\" ? '#FFC107' // amber color for operational wind farms\n      : '#4CAF50'; // green color for planned and under construction\n\n      // Icon for wind farms\n      const windFarmIcon = {\n        path: \"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\",\n        // Square shape\n        scale: 1.5,\n        fillColor: fillColor,\n        fillOpacity: 0.8,\n        strokeColor: '#FFFFFF',\n        strokeWeight: 1,\n        rotation: 45 // Diamond shape\n      };\n\n      // Determine how to visualize the area based on zoom level\n      let areaVisualization;\n      if (isHighDetail) {\n        // Full detail at high zoom\n        if (windFarm.areaPoints) {\n          // Use specific polygon points if available\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedPolygon, {\n            paths: windFarm.areaPoints,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1277,\n            columnNumber: 15\n          }, this);\n        } else if (windFarm.area) {\n          // If we only have the area in km², create a sized circle\n          // Convert km² to meters radius using area = π*r²\n          const areaInSquareMeters = windFarm.area * 1000000;\n          const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n            center: position,\n            radius: radiusInMeters,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1295,\n            columnNumber: 15\n          }, this);\n        } else {\n          // Calculate estimated area based on capacity and turbines\n          let estimatedArea;\n          if (windFarm.turbines) {\n            estimatedArea = windFarm.turbines * 1.0;\n          } else {\n            estimatedArea = windFarm.capacity / 6.5;\n          }\n          const areaInSquareMeters = estimatedArea * 1000000;\n          const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n            center: position,\n            radius: radiusInMeters,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1320,\n            columnNumber: 15\n          }, this);\n        }\n      } else if (isMediumDetail) {\n        // Simplified visualization for medium zoom levels\n        // Just use a circle with a simplified radius calculation\n        let radius;\n        if (windFarm.area) {\n          // Use the known area but with simplified calculation\n          radius = Math.sqrt(windFarm.area) * 1000; // Simplified conversion to meters\n        } else if (windFarm.capacity > 500) {\n          radius = 15000; // Large wind farm\n        } else if (windFarm.capacity > 100) {\n          radius = 10000; // Medium wind farm\n        } else {\n          radius = 5000; // Small wind farm\n        }\n        areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radius,\n          options: {\n            fillColor: fillColor,\n            fillOpacity: 0.08,\n            strokeColor: fillColor,\n            strokeOpacity: 0.3,\n            strokeWeight: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 13\n        }, this);\n      } else {\n        // No area visualization at low zoom levels - just markers\n        areaVisualization = null;\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: position,\n          icon: windFarmIcon,\n          onClick: () => {\n            console.log(\"Wind farm clicked:\", windFarm.name);\n\n            // Calculate estimated area if not provided\n            let displayArea = windFarm.area;\n            if (!displayArea) {\n              if (windFarm.turbines) {\n                displayArea = Math.round(windFarm.turbines * 1.0);\n              } else {\n                displayArea = Math.round(windFarm.capacity / 6.5);\n              }\n            }\n            setSelectedVessel({\n              id: `wind-farm-${windFarm.name}`,\n              name: windFarm.name,\n              type: 'wind-farm',\n              flag: windFarm.country,\n              operator: windFarm.country,\n              capacity: windFarm.capacity,\n              status: windFarm.status,\n              area: displayArea,\n              turbines: windFarm.turbines,\n              estimatedArea: !windFarm.area,\n              isWindFarm: true\n            });\n          },\n          zIndex: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1369,\n          columnNumber: 13\n        }, this), areaVisualization]\n      }, `wind-farm-${windFarm.name}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 11\n      }, this);\n    });\n  }, [showWindFarms, isInMapBounds, currentZoom, windFarmsData]);\n\n  // Separate function to render ONLY radar coverage with zoom-based detail\n  const renderRadarCoverage = useCallback(() => {\n    if (!showWindFarms || !showRadarCoverage) return null;\n\n    // Skip rendering radar coverage at low zoom levels for performance\n    if (currentZoom < 6) return null;\n\n    // Filter to only show radar coverage for wind farms in the current bounds\n    const visibleWindFarms = windFarmsData.filter(farm => isInMapBounds(farm.lat, farm.lng));\n    const isHighDetail = currentZoom >= 8;\n    return visibleWindFarms.map(windFarm => {\n      const position = {\n        lat: windFarm.lat,\n        lng: windFarm.lng\n      };\n      const radarCoverageRadius = 77784; // 42 nautical miles in meters\n\n      return /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n        center: position,\n        radius: radarCoverageRadius,\n        options: {\n          fillColor: '#FF0000',\n          fillOpacity: isHighDetail ? 0.05 : 0.03,\n          strokeColor: '#FF0000',\n          strokeOpacity: isHighDetail ? 0.7 : 0.5,\n          strokeWeight: isHighDetail ? 1 : 0.5,\n          strokeDashArray: [5, 5] // Dashed line pattern\n        }\n      }, `radar-${windFarm.name}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 9\n      }, this);\n    });\n  }, [showWindFarms, showRadarCoverage, isInMapBounds, currentZoom, windFarmsData]);\n\n  // Function to render vessel radar coverage based on gross tonnage with zoom-based detail\n  const renderVesselRadarCoverage = useCallback(() => {\n    // Skip rendering vessel radar at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    const result = [];\n\n    // Render medium vessels (GT 300-2999) with 20 NM radar\n    if (showVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT 300-2999\n      const mediumVessels = vessels.filter(v => (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && v.grossTonnage >= 300 && v.grossTonnage < 3000 && isInMapBounds(v.position[1], v.position[0]));\n      const isHighDetail = currentZoom >= 8;\n      mediumVessels.forEach(vessel => {\n        const position = {\n          lat: vessel.position[1],\n          lng: vessel.position[0]\n        };\n\n        // Medium vessels have 20 NM radar range\n        const radarRangeNM = 20;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        result.push(/*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radarRangeMeters,\n          options: {\n            fillColor: '#4285F4',\n            fillOpacity: isHighDetail ? 0.03 : 0.02,\n            strokeColor: '#4285F4',\n            strokeOpacity: isHighDetail ? 0.6 : 0.4,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5] // Dashed line pattern\n          }\n        }, `vessel-radar-${vessel.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1471,\n          columnNumber: 11\n        }, this));\n      });\n    }\n\n    // Render large vessels (GT >= 3000) with 40 NM radar\n    if (showLargeVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT >= 3000\n      const largeVessels = vessels.filter(v => (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && v.grossTonnage >= 3000 && isInMapBounds(v.position[1], v.position[0]));\n      const isHighDetail = currentZoom >= 8;\n      largeVessels.forEach(vessel => {\n        const position = {\n          lat: vessel.position[1],\n          lng: vessel.position[0]\n        };\n\n        // Large vessels have 40 NM radar range\n        const radarRangeNM = 40;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        result.push(/*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radarRangeMeters,\n          options: {\n            fillColor: '#4285F4',\n            fillOpacity: isHighDetail ? 0.03 : 0.02,\n            strokeColor: '#4285F4',\n            strokeOpacity: isHighDetail ? 0.6 : 0.4,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5] // Dashed line pattern\n          }\n        }, `large-vessel-radar-${vessel.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1508,\n          columnNumber: 11\n        }, this));\n      });\n    }\n    return result;\n  }, [showVesselRadar, showLargeVesselRadar, vessels, isInMapBounds, currentZoom]);\n\n  // Update the map when display mode changes\n  useEffect(() => {\n    // This effect updates the Google Maps styling when display mode changes\n    mapOptions.styles = getMapStyle(displayMode);\n\n    // If map is loaded, we can update its options\n    if (mapRef.current) {\n      mapRef.current.setOptions(mapOptions);\n    }\n  }, [displayMode, mapOptions]);\n\n  // onMapLoad with error handling \n  const onMapLoad = useCallback(map => {\n    console.log(\"Map loaded successfully\");\n    mapRef.current = map;\n\n    // Make sure dragging is enabled\n    map.setOptions({\n      draggable: true,\n      zoomControl: false,\n      scrollwheel: true,\n      disableDoubleClickZoom: false\n    });\n\n    // We can store the map's zoom control functionality\n    zoomRef.current = {\n      zoomIn: () => {\n        const newZoom = map.getZoom() + 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      },\n      zoomOut: () => {\n        const newZoom = map.getZoom() - 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      }\n    };\n\n    // Get initial bounds\n    if (map.getBounds()) {\n      const bounds = map.getBounds();\n      setMapBounds({\n        north: bounds.getNorthEast().lat(),\n        east: bounds.getNorthEast().lng(),\n        south: bounds.getSouthWest().lat(),\n        west: bounds.getSouthWest().lng()\n      });\n\n      // Initialize current center from the map\n      const center = map.getCenter();\n      setCurrentMapCenter({\n        lat: center.lat(),\n        lng: center.lng()\n      });\n    }\n\n    // Set initial zoom\n    setCurrentZoom(map.getZoom());\n  }, []);\n\n  // Add a click handler to the map background to deselect the current vessel\n  const handleMapClick = useCallback(e => {\n    // Add debug logging\n    console.log(\"Map clicked\");\n\n    // Only clear selection if we have one\n    if (selectedVessel) {\n      // The VesselMarker and WindFarmMarker will prevent event propagation\n      // This handler will only run for actual map clicks\n      setSelectedVessel(null);\n    }\n  }, [selectedVessel]);\n\n  // Get visible vessel count - memoized for sidebar display\n  const visibleVesselCount = useMemo(() => vessels.filter(v => {\n    const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n    return matchesFilter;\n  }).length, [vessels, filter]);\n\n  // Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\n  const displayedVessels = useMemo(() => vessels.filter(v => {\n    const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n    const inBounds = isInMapBounds(v.position[1], v.position[0]);\n    return matchesFilter && inBounds;\n  }).slice(0, 50) // Still limit to 50 for performance\n  , [vessels, filter, isInMapBounds]);\n\n  // Memoize UI elements that don't need frequent updates\n  const controlPanels = useMemo(() => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-2 palantir-heading\",\n        children: \"Display Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-nowrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'radar' ? 'active' : '',\n          onClick: () => setDisplayMode('radar'),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 14,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1632,\n            columnNumber: 13\n          }, this), \"Radar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'sonar' ? 'active' : '',\n          onClick: () => setDisplayMode('sonar'),\n          children: [/*#__PURE__*/_jsxDEV(Waves, {\n            size: 14,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1639,\n            columnNumber: 13\n          }, this), \"Sonar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'fused' ? 'active' : '',\n          onClick: () => setDisplayMode('fused'),\n          children: [/*#__PURE__*/_jsxDEV(Layers, {\n            size: 14,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1646,\n            columnNumber: 13\n          }, this), \"Fused\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1642,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1627,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1625,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-2 palantir-heading\",\n        children: \"Vessel Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'all' ? 'active' : '',\n          onClick: () => setFilter('all'),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'commercial' ? 'active' : '',\n          onClick: () => setFilter('commercial'),\n          children: \"Commercial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1661,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'military' ? 'active' : '',\n          onClick: () => setFilter('military'),\n          children: \"Military\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1667,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'submarine' ? 'active' : '',\n          onClick: () => setFilter('submarine'),\n          children: \"Submarines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1673,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'russian' ? 'active' : '',\n          onClick: () => setFilter('russian'),\n          children: \"Russian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1679,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1654,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1652,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Wind Infrastructure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: showWindFarms ? 'active' : '',\n          onClick: () => {\n            const newShowWindFarms = !showWindFarms;\n            setShowWindFarms(newShowWindFarms);\n            // If turning off wind farms, ensure radar coverage is also off\n            if (!newShowWindFarms) {\n              setShowRadarCoverage(false);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Wind, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1702,\n            columnNumber: 13\n          }, this), \"Wind Farms \", showWindFarms ? '(Shown)' : '(Hidden)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: showRadarCoverage ? 'active' : '',\n          onClick: () => {\n            setShowRadarCoverage(!showRadarCoverage);\n          },\n          disabled: !showWindFarms,\n          style: {\n            opacity: !showWindFarms ? 0.5 : 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1713,\n            columnNumber: 13\n          }, this), \"Radar Coverage (42 NM)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1705,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1690,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1688,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Commercial Vessel Infrastructure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1720,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: showVesselRadar ? 'active' : '',\n          onClick: () => setShowVesselRadar(!showVesselRadar),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 13\n          }, this), \"Vessel Radar (GT 300-2999)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1722,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: showLargeVesselRadar ? 'active' : '',\n          onClick: () => setShowLargeVesselRadar(!showLargeVesselRadar),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1733,\n            columnNumber: 13\n          }, this), \"Vessel Radar (GT > 3000)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1729,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1721,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1719,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Vessel Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1741,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: simulationEnabled ? 'active' : '',\n          onClick: () => setSimulationEnabled(!simulationEnabled),\n          children: [/*#__PURE__*/_jsxDEV(Ship, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1747,\n            columnNumber: 13\n          }, this), simulationEnabled ? 'Pause Movement' : 'Start Movement']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1743,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mb-1\",\n            children: [\"Speed: \", simulationSpeed, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1751,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"50\",\n            value: simulationSpeed,\n            onChange: e => setSimulationSpeed(parseInt(e.target.value)),\n            className: \"w-2/5 max-w-[80px] accent-blue-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1752,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1750,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1742,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1740,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), [displayMode, filter, showWindFarms, showRadarCoverage, showVesselRadar, showLargeVesselRadar, simulationEnabled, simulationSpeed]);\n\n  // Update UI to include display mode toggle\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"baltic-tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-screen\",\n      children: [showSidebar && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar w-80\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-xl font-semibold palantir-heading\",\n            children: \"Baltic Sea Tracker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1773,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowSidebar(false),\n            className: \"text-gray-400 hover:text-white\",\n            children: /*#__PURE__*/_jsxDEV(Menu, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1775,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1774,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1772,\n          columnNumber: 13\n        }, this), controlPanels]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1771,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 relative\",\n        children: [!showSidebar && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"absolute top-4 left-4 z-10 bg-gray-800 p-2 rounded-md hover:bg-gray-700\",\n          onClick: () => setShowSidebar(true),\n          children: /*#__PURE__*/_jsxDEV(Menu, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1789,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1785,\n          columnNumber: 13\n        }, this), loadError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl mb-4\",\n            children: [\"Error loading Google Maps: \", loadError.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1796,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1795,\n          columnNumber: 13\n        }, this), !loadError && isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: mapContainerStyle,\n          center: defaultCenter,\n          zoom: 6,\n          options: {\n            disableDefaultUI: true,\n            zoomControl: false,\n            styles: getMapStyle(displayMode),\n            draggable: true\n          },\n          onLoad: onMapLoad,\n          children: [vessels.length > 0 && renderVessels(), showWindFarms && renderWindFarms(), showRadarCoverage && renderRadarCoverage(), (showVesselRadar || showLargeVesselRadar) && renderVesselRadarCoverage()]\n        }, mapKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1801,\n          columnNumber: 13\n        }, this) : !loadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-full flex items-center justify-center bg-gray-900 text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl\",\n            children: \"Loading map...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1821,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1820,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-4 right-4 flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => zoomRef.current && zoomRef.current.zoomIn(),\n            className: \"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\",\n            children: /*#__PURE__*/_jsxDEV(ZoomIn, {\n              size: 20,\n              className: \"text-blue-400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1830,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1826,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => zoomRef.current && zoomRef.current.zoomOut(),\n            className: \"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\",\n            children: /*#__PURE__*/_jsxDEV(ZoomOut, {\n              size: 20,\n              className: \"text-blue-400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1836,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1832,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1825,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // Reset vessel selection and visualization features\n            setSelectedVessel(null);\n            setShowWindFarms(false);\n            setShowRadarCoverage(false);\n            setShowVesselRadar(false);\n            setShowLargeVesselRadar(false);\n            setSimulationEnabled(false);\n\n            // Reset display settings\n            setDisplayMode('radar');\n            setFilter('all');\n            setSimulationSpeed(10);\n\n            // Reset map position and zoom\n            if (mapRef.current) {\n              mapRef.current.setCenter(defaultCenter);\n              mapRef.current.setZoom(6);\n              setCurrentZoom(6);\n              setCurrentMapCenter(defaultCenter);\n            }\n\n            // Force React to remount map components\n            setMapKey(Date.now());\n\n            // Small timeout to ensure map refreshes completely\n            setTimeout(() => {\n              if (mapRef.current && mapRef.current.overlayMapTypes) {\n                mapRef.current.overlayMapTypes.clear();\n              }\n            }, 10);\n          },\n          style: {\n            position: 'absolute',\n            bottom: '10px',\n            left: '10px',\n            backgroundColor: '#8B0000',\n            color: '#FFFFFF',\n            padding: '8px 16px',\n            borderRadius: '4px',\n            border: 'none',\n            fontWeight: '600',\n            cursor: 'pointer',\n            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.5)',\n            zIndex: 9999,\n            fontSize: '14px'\n          },\n          children: \"Reset filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1841,\n          columnNumber: 11\n        }, this), selectedVessel && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-20 right-10 control-panel\",\n          style: {\n            zIndex: 9000\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-sm font-semibold palantir-heading\",\n              children: selectedVessel.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1896,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedVessel(null),\n              className: \"text-gray-400 hover:text-white\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1897,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1895,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-300\",\n            children: selectedVessel.isWindFarm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Type: Wind Farm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1907,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Country: \", selectedVessel.flag]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1908,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Capacity: \", selectedVessel.capacity, \" MW\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1909,\n                columnNumber: 21\n              }, this), selectedVessel.turbines && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Turbines: \", selectedVessel.turbines]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1910,\n                columnNumber: 49\n              }, this), selectedVessel.area && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Area: \", selectedVessel.area, \" km\\xB2\", selectedVessel.estimatedArea && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-amber-400\",\n                  children: \" (est.)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1914,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1912,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Status: \", selectedVessel.status.charAt(0).toUpperCase() + selectedVessel.status.slice(1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1917,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Flag: \", selectedVessel.flag]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1921,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Type: \", selectedVessel.type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1922,\n                columnNumber: 21\n              }, this), selectedVessel.class && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Class: \", selectedVessel.class]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1923,\n                columnNumber: 46\n              }, this), selectedVessel.designation && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Designation: \", selectedVessel.designation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1924,\n                columnNumber: 52\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Operator: \", selectedVessel.operator]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1925,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Length: \", selectedVessel.length, \"m\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1926,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Speed: \", selectedVessel.speed, \" knots\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1927,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Heading: \", selectedVessel.heading, \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1928,\n                columnNumber: 21\n              }, this), selectedVessel.grossTonnage && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Gross Tonnage: \", selectedVessel.grossTonnage, \" GT\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1929,\n                columnNumber: 53\n              }, this), selectedVessel.type === 'submarine' && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Depth: \", selectedVessel.depth, \"m (\", selectedVessel.isSubmerged ? 'Submerged' : 'Surfaced', \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1931,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-2\",\n                children: \"Detection Confidence:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1933,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Radar:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1935,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar flex-1\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-value\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.radar * 100}%`,\n                      backgroundColor: \"#4285F4\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1937,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1936,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.radar * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1939,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1934,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Sonar:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1942,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar flex-1\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-value\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.sonar * 100}%`,\n                      backgroundColor: \"#00E5FF\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1944,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1943,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.sonar * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1946,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1941,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Fused:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1949,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar flex-1\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-value\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.fused * 100}%`,\n                      backgroundColor: \"#00C48C\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1951,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1950,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.fused * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1953,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1948,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1904,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1894,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1769,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-2 text-center text-sm text-gray-400\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          size: 16,\n          className: \"mr-1 text-blue-400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1965,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-300\",\n          children: [\"Baltic Sea Tracker - \", filter === 'all' ? 300 : vessels.filter(v => filter === 'russian' ? v.isRussian : v.type === filter).length, \" vessels in \", displayMode, \" mode | Zoom: \", currentZoom]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1966,\n          columnNumber: 11\n        }, this), showWindFarms && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mx-1 text-amber-400\",\n          children: \"| Wind Farms Shown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1967,\n          columnNumber: 29\n        }, this), showRadarCoverage && showWindFarms && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mx-1 text-red-400\",\n          children: \"| Radar Coverage (42 NM)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1968,\n          columnNumber: 50\n        }, this), showVesselRadar && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mx-1 text-blue-400\",\n          children: \"| Vessel Radar (20/40 NM)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1969,\n          columnNumber: 31\n        }, this), simulationEnabled && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mx-1 text-green-400\",\n          children: [\"| Vessel Movement (\", simulationSpeed, \"x)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1970,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1964,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1963,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1768,\n    columnNumber: 5\n  }, this);\n};\n_s(BalticSeaTracker, \"q/Jnz7RQf3uWX8AvBKUkBY3chHI=\", false, function () {\n  return [useJsApiLoader];\n});\n_c8 = BalticSeaTracker;\nexport default BalticSeaTracker;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"MemoizedMarker\");\n$RefreshReg$(_c2, \"MemoizedCircle\");\n$RefreshReg$(_c3, \"MemoizedPolygon\");\n$RefreshReg$(_c4, \"VesselMarker\");\n$RefreshReg$(_c5, \"MemoizedVesselMarker\");\n$RefreshReg$(_c6, \"WindFarmMarker\");\n$RefreshReg$(_c7, \"MemoizedWindFarmMarker\");\n$RefreshReg$(_c8, \"BalticSeaTracker\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","memo","Info","Ship","Menu","ZoomIn","ZoomOut","Radar","Waves","Layers","Wind","GoogleMap","useJsApiLoader","Marker","Circle","Polyline","Polygon","jsxDEV","_jsxDEV","Fragment","_Fragment","MemoizedMarker","_c","MemoizedCircle","_c2","MemoizedPolygon","_c3","mapContainerStyle","width","height","defaultCenter","lat","lng","VesselMarker","vessel","position","icon","zIndex","onClick","options","clickable","fileName","_jsxFileName","lineNumber","columnNumber","_c4","MemoizedVesselMarker","_c5","WindFarmMarker","windFarm","_c6","MemoizedWindFarmMarker","_c7","BalticSeaTracker","_s","isLoaded","loadError","id","googleMapsApiKey","libraries","console","log","mapRef","zoomRef","animationFrameRef","vessels","setVessels","selectedVessel","setSelectedVessel","displayMode","setDisplayMode","filter","setFilter","showSidebar","setShowSidebar","showWindFarms","setShowWindFarms","showRadarCoverage","setShowRadarCoverage","showVesselRadar","setShowVesselRadar","showLargeVesselRadar","setShowLargeVesselRadar","mapBounds","setMapBounds","currentZoom","setCurrentZoom","mapKey","setMapKey","Date","now","simulationEnabled","setSimulationEnabled","simulationSpeed","setSimulationSpeed","lastUpdateTimeRef","currentMapCenter","setCurrentMapCenter","mapStyle","getMapStyle","mapOptions","disableDefaultUI","zoomControl","styles","draggable","restrictions","latLngBounds","north","south","east","west","mapsLoadedRef","error","current","mode","elementType","stylers","color","featureType","visibility","randomCoordinate","shippingLanes","minLat","maxLat","minLng","maxLng","weight","totalWeight","reduce","sum","lane","randomPoint","Math","random","selectedLane","cumulativeWeight","generateVessels","vesselTypes","flags","russianOperators","commercialOperators","generatedVessels","occupiedPositions","MIN_DISTANCE","maxAttempts","placedVesselCount","i","type","floor","length","flag","isRussian","isInBalticSea","isTooClose","existingPos","distance","sqrt","pow","push","heading","speed","grossTonnage","round","operator","prefixes","suffixes","shipNumbers","name","detectionProbability","radar","sonar","fused","submarineNames","submarineClasses","submarineDesignations","submarineAreas","randomizedSubmarineAreas","map","pos","depth","isSubmerged","class","designation","simulatedVessels","updateVesselPositions","currentTime","deltaTime","adjustedDeltaTime","prevVessels","latitudeAdjustment","cos","PI","longitudeChange","latitudeChange","headingRad","newLng","sin","newLat","isInBalticSeaWaters","bestHeading","foundBetterDirection","angleOffset","testHeading","testRad","testLng","testLat","centerLat","centerLng","angleToCenter","atan2","headingDiff","sign","reducedSpeed","max","newHeading","originalSpeed","newSpeed","speedFactor","min","requestAnimationFrame","landAreas","shippingChannels","distanceFromEdge","abs","coastalBuffers","cancelAnimationFrame","isInMapBounds","buffer","renderVessels","isHighDetail","isMediumDetail","isLowDetail","filteredVessels","v","matchesFilter","inBounds","isSelected","iconProps","circleProps","radius","radarOpacity","radarScale","radarColor","path","window","google","maps","SymbolPath","CIRCLE","fillColor","fillOpacity","strokeColor","strokeWeight","scale","anchor","Point","arrowSize","rotation","sonarOpacity","sonarColor","waveRadius","strokeOpacity","sonarArrowSize","fusedOpacity","radarValue","sonarValue","fusedColor","fusedArrowSize","confidenceRadius","defaultSize","children","center","label","text","fontSize","fontWeight","windFarmsData","country","capacity","status","turbines","area","areaPoints","renderWindFarms","visibleWindFarms","farm","windFarmIcon","areaVisualization","paths","areaInSquareMeters","radiusInMeters","estimatedArea","displayArea","isWindFarm","renderRadarCoverage","radarCoverageRadius","strokeDashArray","renderVesselRadarCoverage","result","mediumVessels","forEach","radarRangeNM","radarRangeMeters","largeVessels","setOptions","onMapLoad","scrollwheel","disableDoubleClickZoom","zoomIn","newZoom","getZoom","setZoom","zoomOut","getBounds","bounds","getNorthEast","getSouthWest","getCenter","handleMapClick","e","visibleVesselCount","displayedVessels","slice","controlPanels","className","size","newShowWindFarms","disabled","style","opacity","value","onChange","parseInt","target","message","zoom","onLoad","setCenter","setTimeout","overlayMapTypes","clear","bottom","left","backgroundColor","padding","borderRadius","border","cursor","boxShadow","charAt","toUpperCase","_c8","$RefreshReg$"],"sources":["/Users/esbenvahr/Desktop/NEW FINAL/app/src/components/BalticSeaTracker.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo, memo } from 'react';\nimport { Info, Ship, Menu, ZoomIn, ZoomOut, Radar, Waves, Layers, Wind } from 'lucide-react';\nimport '../styles/palantir-theme.css';\nimport { GoogleMap, useJsApiLoader, Marker, Circle, Polyline, Polygon } from '@react-google-maps/api';\n\n// Memoized components for better performance\nconst MemoizedMarker = memo(Marker);\nconst MemoizedCircle = memo(Circle);\nconst MemoizedPolygon = memo(Polygon);\n\n// Define container style\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100vh'\n};\n\n// Define center for the Baltic Sea\nconst defaultCenter = {\n  lat: 59,\n  lng: 19\n};\n\n// Create a wrapper component for vessel markers\nconst VesselMarker = ({ vessel, position, icon, zIndex, onClick }) => {\n  return (\n    <Marker\n      position={position}\n      icon={icon}\n      onClick={() => onClick && onClick(vessel)}\n      zIndex={zIndex}\n      options={{ clickable: true }}\n    />\n  );\n};\n\n// Memoize the vessel marker for better performance\nconst MemoizedVesselMarker = memo(VesselMarker);\n\n// Create a wrapper component for wind farm markers\nconst WindFarmMarker = ({ windFarm, position, icon, zIndex, onClick }) => {\n  return (\n    <Marker\n      position={position}\n      icon={icon}\n      onClick={() => onClick && onClick(windFarm)}\n      zIndex={zIndex}\n      options={{ clickable: true }}\n    />\n  );\n};\n\n// Memoize the wind farm marker for better performance\nconst MemoizedWindFarmMarker = memo(WindFarmMarker);\n\nconst BalticSeaTracker = () => {\n  // API loaded state\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyAl-iGmFThUduVpLpE7sQTmniBSUPtzJjA',\n    libraries: ['geometry', 'drawing']\n  });\n  \n  console.log(\"Map loading status:\", { isLoaded, loadError });\n  \n  // Reference to map instance\n  const mapRef = useRef(null);\n  const zoomRef = useRef(null);\n  // Animation frame reference for vessel updates\n  const animationFrameRef = useRef(null);\n  \n  // State for vessel data\n  const [vessels, setVessels] = useState([]);\n  const [selectedVessel, setSelectedVessel] = useState(null);\n  \n  // Display options state\n  const [displayMode, setDisplayMode] = useState('radar');\n  const [filter, setFilter] = useState('all');\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [showWindFarms, setShowWindFarms] = useState(false);\n  const [showRadarCoverage, setShowRadarCoverage] = useState(false); // New state for radar coverage\n  const [showVesselRadar, setShowVesselRadar] = useState(false); // State for vessel radar coverage (300-2999 GT)\n  const [showLargeVesselRadar, setShowLargeVesselRadar] = useState(false); // New state for large vessel radar (>3000 GT)\n  const [mapBounds, setMapBounds] = useState(null); // Track current map bounds\n  const [currentZoom, setCurrentZoom] = useState(6); // Track current zoom level\n  const [mapKey, setMapKey] = useState(Date.now()); // Add key to force remount of map components\n  const [simulationEnabled, setSimulationEnabled] = useState(false); // Track if vessel movement simulation is enabled\n  const [simulationSpeed, setSimulationSpeed] = useState(10); // Simulation speed multiplier (default 10x)\n  const lastUpdateTimeRef = useRef(Date.now()); // Reference to store last update time\n  \n  // Add state to track current map center\n  const [currentMapCenter, setCurrentMapCenter] = useState(defaultCenter);\n  \n  // Memoize map style to prevent recalculations\n  const mapStyle = useMemo(() => getMapStyle(displayMode), [displayMode]);\n  \n  const mapOptions = useMemo(() => ({\n    disableDefaultUI: true,\n    zoomControl: false,\n    styles: mapStyle,\n    draggable: true, // Ensure map is draggable\n    // Hide cities with population under 5000\n    restrictions: {\n      latLngBounds: {\n        north: 66.0,\n        south: 54.0,\n        east: 30.0,\n        west: 9.0,\n      }\n    }\n  }), [mapStyle]);\n  \n  // Create a ref to track if Google Maps loaded\n  const mapsLoadedRef = useRef(false);\n  \n  // Log any errors with Google Maps loading\n  useEffect(() => {\n    if (loadError) {\n      console.error('Error loading Google Maps:', loadError);\n    }\n    if (isLoaded && !mapsLoadedRef.current) {\n      console.log('Google Maps API loaded successfully');\n      mapsLoadedRef.current = true;\n    }\n  }, [isLoaded, loadError]);\n  \n  // Function to get map style based on display mode\n  function getMapStyle(mode) {\n    switch(mode) {\n      case 'radar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#181818\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#3d3d3d\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'sonar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#00C8FF\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#001E29\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#00E5FF\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'fused':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#3D85C6\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#0A1C2A\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#4a90e2\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      default:\n        return [];\n    }\n  }\n    \n  // Function to generate a random coordinate within Baltic Sea\n  const randomCoordinate = () => {\n    // Combine shipping lanes with wider dispersal areas\n    const shippingLanes = [\n      // Main shipping lanes (lower weight than before to reduce clustering)\n      // Danish Straits to St. Petersburg\n      {minLat: 54.5, maxLat: 55.2, minLng: 10.8, maxLng: 13.0, weight: 5}, // Danish Straits entrance\n      {minLat: 55.0, maxLat: 55.8, minLng: 12.8, maxLng: 14.5, weight: 4}, // Route east of Denmark\n      {minLat: 55.3, maxLat: 56.2, minLng: 14.5, maxLng: 16.5, weight: 4}, // Southern Sweden coast\n      {minLat: 55.0, maxLat: 56.0, minLng: 16.5, maxLng: 18.5, weight: 3}, // Midway to Gotland\n      {minLat: 57.0, maxLat: 58.2, minLng: 18.5, maxLng: 20.0, weight: 4}, // North of Gotland\n      {minLat: 58.5, maxLat: 59.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Approach to Gulf of Finland\n      {minLat: 59.2, maxLat: 59.8, minLng: 22.0, maxLng: 24.5, weight: 5}, // Gulf of Finland western part\n      {minLat: 59.7, maxLat: 60.2, minLng: 24.5, maxLng: 28.0, weight: 4}, // Gulf of Finland eastern part\n      \n      // Port approaches - reduced weights to prevent clustering\n      {minLat: 60.0, maxLat: 60.5, minLng: 24.5, maxLng: 25.0, weight: 3}, // Helsinki\n      {minLat: 60.2, maxLat: 60.5, minLng: 22.0, maxLng: 22.5, weight: 3}, // Turku\n      {minLat: 55.3, maxLat: 56.3, minLng: 12.5, maxLng: 13.0, weight: 3}, // Malmö\n      {minLat: 58.5, maxLat: 59.5, minLng: 16.5, maxLng: 18.5, weight: 3}, // Stockholm\n      {minLat: 54.3, maxLat: 54.8, minLng: 18.3, maxLng: 19.0, weight: 3}, // Gdańsk\n      {minLat: 54.0, maxLat: 54.5, minLng: 13.0, maxLng: 14.5, weight: 3}, // Rostock\n      \n      // Wider dispersal areas - these ensure ships are spread throughout the entire sea\n      // Central Baltic - large dispersal areas\n      {minLat: 56.0, maxLat: 58.0, minLng: 17.0, maxLng: 20.0, weight: 5}, // Central Baltic wider area\n      {minLat: 57.5, maxLat: 59.5, minLng: 19.0, maxLng: 22.0, weight: 5}, // Eastern Baltic wider area\n      \n      // Gulf of Bothnia - more dispersed\n      {minLat: 60.0, maxLat: 62.0, minLng: 18.0, maxLng: 21.0, weight: 4}, // Southern Bothnia dispersed\n      {minLat: 62.0, maxLat: 65.0, minLng: 18.0, maxLng: 23.0, weight: 3}, // Northern Bothnia dispersed\n      \n      // Western Baltic - more dispersed\n      {minLat: 54.0, maxLat: 56.0, minLng: 12.0, maxLng: 15.0, weight: 4}, // Western Baltic dispersed\n      {minLat: 54.0, maxLat: 57.0, minLng: 15.0, maxLng: 18.0, weight: 5}, // South-central Baltic dispersed\n      \n      // Other dispersed areas to ensure wider coverage\n      {minLat: 54.0, maxLat: 55.5, minLng: 18.0, maxLng: 20.0, weight: 3}, // Southern Baltic dispersed\n      {minLat: 56.5, maxLat: 58.0, minLng: 15.0, maxLng: 17.0, weight: 3}, // Western Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Eastern Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 22.0, maxLng: 24.0, weight: 3}, // Gulf of Riga dispersed\n    ];\n    \n    // Calculate total weight\n    const totalWeight = shippingLanes.reduce((sum, lane) => sum + lane.weight, 0);\n    \n    // Pick a random lane with weighting\n    let randomPoint = Math.random() * totalWeight;\n    let selectedLane = shippingLanes[0];\n    let cumulativeWeight = 0;\n    \n    for (const lane of shippingLanes) {\n      cumulativeWeight += lane.weight;\n      if (randomPoint <= cumulativeWeight) {\n        selectedLane = lane;\n        break;\n      }\n    }\n    \n    // Increase the spread factor to ensure better dispersal within areas\n    // Create a much more randomized distribution within the selected area\n    // rather than clustering toward the center\n    \n    // Get random point within the selected area with high dispersal\n    // Avoiding the tendency to cluster in the center\n    return [\n      selectedLane.minLng + Math.random() * (selectedLane.maxLng - selectedLane.minLng), // longitude - fully random within area\n      selectedLane.minLat + Math.random() * (selectedLane.maxLat - selectedLane.minLat)  // latitude - fully random within area\n    ];\n  };\n  \n  // Generate 300 simulated vessels with realistic properties (reduced from 1000)\n  const generateVessels = useCallback(() => {\n    const vesselTypes = ['commercial', 'military', 'fishing', 'passenger', 'tanker'];\n    const flags = ['Finland', 'Sweden', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Germany', 'Denmark', 'Russia'];\n    const russianOperators = ['Sovcomflot', 'Gazprom Fleet', 'Rosmorport', 'Russian Navy', 'Rosneft'];\n    const commercialOperators = ['Maersk', 'MSC', 'CMA CGM', 'Hapag-Lloyd', 'ONE', 'Evergreen', 'COSCO', \n                                'Yang Ming', 'HMM', 'Grimaldi', 'DFDS', 'Stena Line', 'Tallink', 'Viking Line'];\n    \n    // Generate vessels with better dispersal throughout the Baltic Sea\n    const generatedVessels = [];\n    const occupiedPositions = []; // Track positions to ensure better dispersal\n    const MIN_DISTANCE = 0.2; // Minimum distance between vessels in degrees (approx 10-20km)\n    \n    // Start with fewer vessels and then disperse them more effectively\n    const maxAttempts = 300; // Limit how many times we try to place each vessel\n    let placedVesselCount = 0;\n    \n    // Try to place vessels with appropriate spacing\n    for (let i = 1; placedVesselCount < 300 && i <= maxAttempts; i++) {\n      const type = vesselTypes[Math.floor(Math.random() * vesselTypes.length)];\n      const flag = flags[Math.floor(Math.random() * flags.length)];\n      const isRussian = flag === 'Russia' || (Math.random() < 0.05); // 5% chance of non-Russian flag but Russian operated\n      \n      // Get a potential position for the vessel\n      const position = randomCoordinate();\n      \n      // Check if position is in a lake and ensure it's in the Baltic Sea\n      // Baltic Sea general bounds\n      const isInBalticSea = (\n        position[1] >= 54.0 && position[1] <= 66.0 && // Latitude bounds\n        position[0] >= 9.0 && position[0] <= 30.0     // Longitude bounds\n      );\n      \n      // If not in Baltic Sea proper, skip this position\n      if (!isInBalticSea) {\n        continue;\n      }\n      \n      // Check if this position is too close to existing vessels\n      let isTooClose = false;\n      for (const existingPos of occupiedPositions) {\n        const distance = Math.sqrt(\n          Math.pow(position[0] - existingPos[0], 2) + \n          Math.pow(position[1] - existingPos[1], 2)\n        );\n        \n        if (distance < MIN_DISTANCE) {\n          isTooClose = true;\n          break;\n        }\n      }\n      \n      // If the position is too close to other vessels, skip this attempt\n      if (isTooClose) {\n        continue;\n      }\n      \n      // If we got here, the position is good, so add it to occupied positions\n      occupiedPositions.push(position);\n      placedVesselCount++;\n      \n      // Calculate a more realistic heading based on position\n      // Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\n      let heading;\n      const lat = position[1];\n      const lng = position[0];\n      \n      // Baltic shipping lane direction tendencies\n      if (lng < 14.0) {\n        // Danish straits and western Baltic - generally east/west traffic\n        heading = Math.random() < 0.7 ? 70 + Math.random() * 40 : 250 + Math.random() * 40;\n      } else if (lng > 23.0 && lat > 59.0) {\n        // Gulf of Finland - generally east/west traffic\n        heading = Math.random() < 0.5 ? 80 + Math.random() * 30 : 260 + Math.random() * 30;\n      } else if (lng > 19.0 && lat > 60.0) {\n        // Gulf of Bothnia - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 30 : 180 + Math.random() * 30;\n      } else if (lng > 22.0 && lat < 58.0 && lat > 56.5) {\n        // Gulf of Riga - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 40 : 180 + Math.random() * 40;\n      } else if (lat < 56.0 && lng > 18.0) {\n        // Southern Baltic to Polish/Lithuanian ports\n        heading = Math.random() < 0.6 ? 140 + Math.random() * 40 : 320 + Math.random() * 40;\n      } else {\n        // Central Baltic - mixed traffic patterns\n        heading = Math.floor(Math.random() * 360);\n      }\n      \n      // Realistic speed based on vessel type and weather (assumed normal conditions)\n      let speed;\n      if (type === 'commercial' || type === 'tanker') {\n        speed = 10 + Math.floor(Math.random() * 8); // 10-18 knots\n      } else if (type === 'passenger') {\n        speed = 15 + Math.floor(Math.random() * 10); // 15-25 knots\n      } else if (type === 'military') {\n        speed = 5 + Math.floor(Math.random() * 25); // 5-30 knots (more variable)\n      } else if (type === 'fishing') {\n        // Fishing vessels move slower or may be stationary when fishing\n        speed = Math.random() < 0.3 ? 0 : 5 + Math.floor(Math.random() * 7); // 0 or 5-12 knots\n      } else {\n        speed = Math.floor(Math.random() * 15) + 5; // 5-20 knots default\n      }\n      \n      // Determine vessel size\n      const length = type === 'tanker' || type === 'commercial' \n        ? 100 + Math.floor(Math.random() * 300) \n        : type === 'military' \n          ? 50 + Math.floor(Math.random() * 200)\n          : 20 + Math.floor(Math.random() * 50);\n      \n      // Calculate gross tonnage (GT) based on vessel length and type\n      // Using simplified formula based on vessel dimensions\n      let grossTonnage;\n      if (type === 'commercial' || type === 'tanker') {\n        // Commercial and tanker vessels have higher GT/length ratios\n        grossTonnage = Math.round(length * length * 0.18); // Approximation\n      } else if (type === 'military') {\n        // Military vessels are typically more dense but smaller\n        grossTonnage = Math.round(length * length * 0.16);\n      } else if (type === 'passenger') {\n        // Passenger vessels have high volume and less dense cargo\n        grossTonnage = Math.round(length * length * 0.2);\n      } else {\n        // Fishing and other vessels\n        grossTonnage = Math.round(length * length * 0.12);\n      }\n      \n      // Determine operator\n      let operator;\n      if (isRussian) {\n        operator = russianOperators[Math.floor(Math.random() * russianOperators.length)];\n      } else {\n        operator = commercialOperators[Math.floor(Math.random() * commercialOperators.length)];\n      }\n      \n      // Generate a realistic vessel name\n      const prefixes = isRussian ? \n        ['Admiral', 'Kapitan', 'Vostok', 'Sibir', 'Moskva', 'Sankt-Peterburg', 'Akademik'] : \n        ['Northern', 'Baltic', 'Sea', 'Atlantic', 'Pacific', 'Star', 'Pioneer'];\n      \n      const suffixes = isRussian ?\n        ['Kuznetsov', 'Nakhimov', 'Gorshkov', 'Lazarev', 'Kasatonov', 'Ustinov'] :\n        ['Adventurer', 'Explorer', 'Navigator', 'Voyager', 'Mariner', 'Trader', 'Express'];\n        \n      const shipNumbers = ['I', 'II', 'III', 'IV', 'V', '1', '2', '3', '4', '5'];\n      \n      let name;\n      if (Math.random() < 0.3) {\n        // 30% chance of having a prefix-suffix name\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${suffixes[Math.floor(Math.random() * suffixes.length)]}`;\n      } else if (Math.random() < 0.5) {\n        // 20% chance of having a name with a number\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${shipNumbers[Math.floor(Math.random() * shipNumbers.length)]}`;\n      } else {\n        // 50% chance of having a simple prefix or suffix name\n        name = Math.random() < 0.5 ? \n          prefixes[Math.floor(Math.random() * prefixes.length)] : \n          suffixes[Math.floor(Math.random() * suffixes.length)];\n      }\n      \n      if (type === 'military' && isRussian) {\n        name = `RFS ${name}`; // Russian Federation Ship\n      }\n      \n      // Calculate a detection probability\n      const detectionProbability = {\n        radar: Math.random(), // 0-1, higher means more visible on radar\n        sonar: Math.random(), // 0-1, higher means more detectable by sonar\n        fused: (Math.random() + Math.random()) / 2 // average of two values for a more normal distribution\n      };\n      \n      // Generate a vessel object with all properties\n      generatedVessels.push({\n        id: placedVesselCount,\n        name,\n        type,\n        flag,\n        isRussian,\n        position,\n        heading,\n        speed,\n        length,\n        operator,\n        detectionProbability,\n        grossTonnage\n      });\n    }\n    \n    // More evenly disperse submarines too\n    // Generate Russian submarines with special characteristics\n    const submarineNames = [\n      'Krasnodar', 'Novorossiysk', 'Rostov-on-Don', 'Stary Oskol', \n      'Velikiy Novgorod', 'Kolpino', 'Sankt Peterburg'\n    ];\n    \n    const submarineClasses = [\n      'Kilo-class', 'Kilo-class', 'Kilo-class', 'Kilo-class',\n      'Improved Kilo-class', 'Improved Kilo-class', 'Lada-class'\n    ];\n    \n    const submarineDesignations = [\n      'B-265', 'B-261', 'B-237', 'B-262', \n      'B-268', 'B-271', 'B-585'\n    ];\n    \n    // Use more strategic submarine positions\n    const submarineAreas = [\n      // Gulf of Finland approach - monitoring traffic to St. Petersburg\n      [26.2, 59.7],\n      // Near NATO naval exercise areas in central Baltic\n      [19.3, 56.8],\n      // Monitoring approach to Stockholm archipelago\n      [18.9, 58.9],\n      // Deep water between Gotland and Latvia (strategic position)\n      [20.1, 57.3],\n      // Patrolling near Kaliningrad naval base\n      [19.6, 55.2],\n      // Monitoring naval traffic near Gdańsk\n      [18.8, 54.8],\n      // Danish straits approaches - key strategic chokepoint\n      [12.8, 55.4]\n    ];\n    \n    // Add some randomness to submarine positions to avoid perfect predictability\n    const randomizedSubmarineAreas = submarineAreas.map(pos => [\n      pos[0] + (Math.random() - 0.5) * 0.5,  // Add up to ±0.25 degrees longitude\n      pos[1] + (Math.random() - 0.5) * 0.3   // Add up to ±0.15 degrees latitude\n    ]);\n    \n    // Add submarines to generated vessels\n    for (let i = 0; i < 7; i++) {\n      const position = randomizedSubmarineAreas[i];\n      const heading = Math.floor(Math.random() * 360);\n      const speed = 5 + Math.floor(Math.random() * 10); // Submarines move slower on average\n      const depth = 20 + Math.floor(Math.random() * 180); // Depth in meters\n      \n      // Submarine detection characteristics\n      // Low radar detection when submerged, high sonar signature\n      const isSubmerged = Math.random() > 0.3; // 70% chance of being submerged\n      \n      const detectionProbability = {\n        radar: isSubmerged ? 0.05 + Math.random() * 0.1 : 0.3 + Math.random() * 0.2, // Low radar when submerged\n        sonar: 0.6 + Math.random() * 0.4, // High sonar signature\n        fused: isSubmerged ? \n          (0.05 + Math.random() * 0.1 + 0.6 + Math.random() * 0.4) / 2 : // Average when submerged\n          (0.3 + Math.random() * 0.2 + 0.6 + Math.random() * 0.4) / 2    // Average when surfaced\n      };\n      \n      generatedVessels.push({\n        id: 1001 + i, // IDs starting from 1001 for submarines\n        name: `RFS ${submarineNames[i]}`,\n        type: 'submarine',\n        class: submarineClasses[i],\n        designation: submarineDesignations[i],\n        flag: 'Russia',\n        isRussian: true,\n        position,\n        heading,\n        speed,\n        depth,\n        length: 70 + Math.floor(Math.random() * 20), // Kilo-class submarines are around 70-74m\n        isSubmerged,\n        operator: 'Russian Navy',\n        detectionProbability\n      });\n    }\n    \n    return generatedVessels;\n  }, []);\n  \n  // Generate vessel data when component mounts\n  useEffect(() => {\n    const simulatedVessels = generateVessels();\n    setVessels(simulatedVessels);\n  }, [generateVessels]);\n  \n  // Update vessel positions based on speed and heading\n  const updateVesselPositions = useCallback(() => {\n    if (!simulationEnabled) return;\n    \n    const currentTime = Date.now();\n    const deltaTime = (currentTime - lastUpdateTimeRef.current) / 1000; // Convert ms to seconds\n    lastUpdateTimeRef.current = currentTime;\n    \n    // Apply speed multiplier to deltaTime\n    const adjustedDeltaTime = deltaTime * simulationSpeed;\n    \n    // Skip if delta time is too large (e.g., browser tab was inactive)\n    if (adjustedDeltaTime > 5) return;\n    \n    setVessels(prevVessels => {\n      return prevVessels.map(vessel => {\n        // Skip stationary vessels\n        if (vessel.speed === 0) return vessel;\n        \n        // Convert knots to degrees per second\n        // 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n        // Adjust for latitude (narrower longitude degrees at higher latitudes)\n        const latitudeAdjustment = Math.cos(vessel.position[1] * Math.PI / 180);\n        const longitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime / latitudeAdjustment;\n        const latitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime;\n        \n        // Calculate new position based on heading\n        const headingRad = vessel.heading * Math.PI / 180;\n        const newLng = vessel.position[0] + (longitudeChange * Math.sin(headingRad));\n        const newLat = vessel.position[1] + (latitudeChange * Math.cos(headingRad));\n        \n        // Enhanced boundary checking to keep vessels within the actual Baltic Sea water\n        if (!isInBalticSeaWaters(newLat, newLng)) {\n          // If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n          // Use a more detailed approach to find the right direction\n          \n          // Try finding a better direction by checking multiple angles\n          let bestHeading = vessel.heading;\n          let foundBetterDirection = false;\n          \n          // Check 8 directions around to find waters\n          for (let angleOffset = 0; angleOffset < 360; angleOffset += 45) {\n            const testHeading = (vessel.heading + angleOffset) % 360;\n            const testRad = testHeading * Math.PI / 180;\n            \n            // Check a position further out in this direction\n            const testLng = vessel.position[0] + (longitudeChange * 5 * Math.sin(testRad));\n            const testLat = vessel.position[1] + (latitudeChange * 5 * Math.cos(testRad));\n            \n            if (isInBalticSeaWaters(testLat, testLng)) {\n              bestHeading = testHeading;\n              foundBetterDirection = true;\n              break;\n            }\n          }\n          \n          // If no good direction found, head toward the Baltic center\n          if (!foundBetterDirection) {\n            const centerLat = 58.5; // More centered in the main Baltic basin\n            const centerLng = 20;   // Adjusted to be in deeper waters\n            const angleToCenter = Math.atan2(centerLng - vessel.position[0], centerLat - vessel.position[1]) * 180 / Math.PI;\n            \n            // Turn gradually toward the center\n            const headingDiff = ((angleToCenter - vessel.heading + 540) % 360) - 180;\n            bestHeading = (vessel.heading + Math.sign(headingDiff) * 45) % 360;\n            if (bestHeading < 0) bestHeading += 360;\n          }\n          \n          // Slow down near boundaries\n          const reducedSpeed = Math.max(1, vessel.speed * 0.5);\n          \n          return {\n            ...vessel,\n            heading: bestHeading,\n            speed: reducedSpeed // Temporarily reduce speed when changing course\n          };\n        }\n        \n        // For military and submarine vessels, randomly change heading occasionally\n        let newHeading = vessel.heading;\n        const originalSpeed = vessel.speed;\n        let newSpeed = originalSpeed;\n        \n        if ((vessel.type === 'military' || vessel.type === 'submarine') && Math.random() < 0.01 * adjustedDeltaTime) {\n          // Change heading by up to +/- 30 degrees\n          newHeading = (vessel.heading + (Math.random() * 60 - 30)) % 360;\n          if (newHeading < 0) newHeading += 360;\n          \n          // Military vessels might change speed during maneuvers\n          if (Math.random() < 0.3) {\n            const speedFactor = 0.7 + Math.random() * 0.6; // 70-130% of current speed\n            newSpeed = Math.max(1, Math.min(30, originalSpeed * speedFactor));\n          }\n        }\n        // Smaller random heading changes for other vessels to simulate realistic movement\n        else if (Math.random() < 0.005 * adjustedDeltaTime) {\n          // Change heading by up to +/- 10 degrees\n          newHeading = (vessel.heading + (Math.random() * 20 - 10)) % 360;\n          if (newHeading < 0) newHeading += 360;\n        }\n        \n        return {\n          ...vessel,\n          position: [newLng, newLat],\n          heading: newHeading,\n          speed: newSpeed\n        };\n      });\n    });\n    \n    // Request next animation frame\n    animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n  }, [simulationEnabled, simulationSpeed]);\n  \n  // Function to check if a point is in Baltic Sea waters\n  // This is a more precise check than just the bounding box\n  const isInBalticSeaWaters = useCallback((lat, lng) => {\n    // First check overall bounds\n    if (lat < 54.0 || lat > 66.0 || lng < 9.0 || lng > 30.0) {\n      return false;\n    }\n    \n    // Define areas that are land (to be avoided)\n    // Format: [south, north, west, east]\n    const landAreas = [\n      // Southern Sweden\n      [55.0, 59.5, 12.5, 15.5],\n      // Finland\n      [59.7, 65.5, 21.0, 30.0],\n      // Estonia\n      [57.5, 59.7, 23.0, 28.5],\n      // Latvia/Lithuania coast\n      [55.5, 57.5, 21.0, 28.0],\n      // Poland inland\n      [54.0, 55.5, 15.0, 19.5],\n      // Germany/Denmark inland\n      [54.0, 56.0, 9.0, 12.0],\n      // Gotland\n      [56.8, 58.0, 18.0, 19.2],\n      // Åland Islands\n      [59.7, 60.5, 19.3, 21.3],\n      // Bornholm\n      [54.9, 55.3, 14.7, 15.2]\n    ];\n    \n    // Define key shipping channels and deep waters (preferred areas)\n    // Format: [south, north, west, east, weight]\n    const shippingChannels = [\n      // Main Baltic basin\n      [55.5, 59.0, 16.5, 22.0, 10],\n      // Gulf of Finland shipping lane\n      [59.3, 60.2, 22.5, 28.0, 8],\n      // Approach to Stockholm\n      [58.7, 59.5, 17.5, 19.5, 6],\n      // Approach to Riga\n      [56.8, 58.0, 22.5, 24.5, 6],\n      // Approach to Helsinki/Tallinn\n      [59.2, 59.9, 24.0, 25.5, 8],\n      // Western Baltic shipping lane\n      [54.5, 56.0, 12.0, 15.0, 8],\n      // Kattegat\n      [56.0, 57.5, 10.5, 12.0, 6],\n      // Gulf of Bothnia\n      [60.5, 63.5, 18.5, 21.5, 5]\n    ];\n    \n    // Check if point is in a land area\n    for (const [south, north, west, east] of landAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // Further check for complex coastlines\n        // This is a very simplified approach - we add some randomness \n        // to prevent vessels from getting stuck at sharp boundary transitions\n        \n        // If near the edge of a land area, there's a small chance to still consider it water\n        // This helps vessels navigate around complex coastlines without getting stuck\n        const distanceFromEdge = Math.min(\n          Math.abs(lat - south),\n          Math.abs(lat - north),\n          Math.abs(lng - west),\n          Math.abs(lng - east)\n        );\n        \n        // Very close to edge - might be a complex coastline\n        if (distanceFromEdge < 0.1) {\n          // 20% chance to consider it water if very close to edge\n          // This randomness helps prevent getting stuck at boundaries\n          return Math.random() < 0.2;\n        }\n        \n        return false; // It's in a land area\n      }\n    }\n\n    // Check if in a preferred shipping channel\n    for (const [south, north, west, east] of shippingChannels) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true; // In a shipping channel - definitely good\n      }\n    }\n    \n    // For areas not explicitly defined, use the following general rules\n    \n    // Avoid shallow coastal waters (simplified approach)\n    // These are general buffer zones around landmasses\n    const coastalBuffers = [\n      // Swedish coast buffer\n      [55.0, 59.5, 15.5, 16.0],\n      // Finnish coast buffer\n      [59.7, 65.5, 20.0, 21.0],\n      // Estonian coast buffer\n      [57.5, 59.7, 22.0, 23.0],\n      // Latvian/Lithuanian coast buffer\n      [55.5, 57.5, 20.0, 21.0],\n      // Polish coast buffer\n      [54.0, 55.5, 14.0, 15.0],\n      // German/Danish coast buffer\n      [54.0, 56.0, 12.0, 12.5]\n    ];\n    \n    // Check coastal buffers with higher probability of rejection\n    for (const [south, north, west, east] of coastalBuffers) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 70% chance to consider coastal buffers as land\n        return Math.random() > 0.7;\n      }\n    }\n    \n    // If we got here, it's probably in open water\n    return true;\n  }, []);\n  \n  // Start/stop vessel position updates when simulation state changes\n  useEffect(() => {\n    if (simulationEnabled) {\n      lastUpdateTimeRef.current = Date.now();\n      animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    // Cleanup when component unmounts\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [simulationEnabled, updateVesselPositions]);\n  \n  // Function to check if an item is in the current map bounds\n  const isInMapBounds = useCallback((lat, lng) => {\n    if (!mapBounds) return true; // If no bounds yet, show everything\n    \n    // Add buffer to avoid popping at edges\n    const buffer = 0.5; // Buffer in degrees\n    \n    return (\n      lat >= mapBounds.south - buffer &&\n      lat <= mapBounds.north + buffer &&\n      lng >= mapBounds.west - buffer &&\n      lng <= mapBounds.east + buffer\n    );\n  }, [mapBounds]);\n  \n  // Function to render vessels based on the display mode and zoom level\n  const renderVessels = useCallback(() => {\n    // Use zoom level to determine detail level\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    const isLowDetail = currentZoom < 6;\n    \n    // Filter vessels based on current filter and map bounds\n    const filteredVessels = vessels.filter(v => {\n      // First apply user filter\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      // Then check if in current map bounds\n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    });\n    \n    // Create vessel markers\n    return filteredVessels.map(vessel => {\n      // Convert vessel position to LatLng\n      const position = { lat: vessel.position[1], lng: vessel.position[0] };\n      const isSelected = selectedVessel?.id === vessel.id;\n      \n      // Define icon and visualization based on display mode and zoom level\n      let iconProps = {};\n      let circleProps = { radius: 0 };\n    \n      switch(displayMode) {\n        case 'radar':\n          // Radar mode - shows vessels as dots with direction indicators\n          const radarOpacity = vessel.type === 'submarine' && vessel.isSubmerged ? \n            0.1 + vessel.detectionProbability.radar * 0.2 : \n            0.3 + vessel.detectionProbability.radar * 0.7;\n          \n          const radarScale = vessel.type === 'submarine' ? \n            vessel.isSubmerged ? 0.5 : 0.8 : \n            Math.max(0.6, Math.min(1.2, 0.6 + vessel.length / 300));\n          \n          const radarColor = vessel.type === 'submarine' ? \n            'rgb(255, 0, 0)' : \n            vessel.isRussian ? 'rgb(231, 76, 60)' : 'rgb(52, 152, 219)';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else if (isMediumDetail) {\n            // Simplified arrow for medium detail\n            const arrowSize = radarScale * 4;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L -${arrowSize/2},${arrowSize} Z`, // Simpler arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading, // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Full detail for high zoom levels\n            const arrowSize = radarScale * 5;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L 0,${arrowSize/2} L -${arrowSize/2},${arrowSize} Z`, // Arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading, // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          break;\n          \n        case 'sonar':\n          // Sonar mode - shows vessels as acoustic signatures\n          const sonarOpacity = vessel.type === 'submarine' ? \n            0.5 + vessel.detectionProbability.sonar * 0.5 : \n            0.2 + vessel.detectionProbability.sonar * 0.8;\n          \n          const sonarColor = vessel.type === 'submarine' ? '#FF00FF' : '#00E5FF';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Simplified acoustic wave\n            if (vessel.type === 'submarine') {\n              const waveRadius = vessel.speed * 80;\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          } else {\n            // Use the same arrow shape as radar mode but with sonar colors\n            const sonarArrowSize = vessel.type === 'submarine' ? 5 : 4;\n            iconProps = {\n              path: `M 0,-${sonarArrowSize} L ${sonarArrowSize/2},${sonarArrowSize} L 0,${sonarArrowSize/2} L -${sonarArrowSize/2},${sonarArrowSize} Z`, // Arrow shape\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Add acoustic wave circle - only at higher zoom levels\n            if (isHighDetail) {\n              const waveRadius = vessel.type === 'submarine' ? \n                Math.max(500, vessel.speed * 100) : \n                Math.max(300, vessel.speed * 60);\n                \n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.05,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.2,\n                  strokeWeight: 1,\n                }\n              };\n            } else if (isMediumDetail && vessel.type === 'submarine') {\n              const waveRadius = Math.max(300, vessel.speed * 80);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          }\n          break;\n          \n        case 'fused':\n          // Fused mode - combines radar and sonar data\n          const fusedOpacity = 0.4 + vessel.detectionProbability.fused * 0.6;\n          \n          // Create color gradient based on radar/sonar detection probabilities\n          const radarValue = Math.floor(vessel.detectionProbability.radar * 255);\n          const sonarValue = Math.floor(vessel.detectionProbability.sonar * 255);\n          const fusedColor = vessel.isRussian ? \n            `rgb(255, 100, 100)` : \n            `rgb(100, ${radarValue}, ${sonarValue})`;\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Use the same arrow shape as other modes but with fused colors\n            const fusedArrowSize = 5;\n            iconProps = {\n              path: `M 0,-${fusedArrowSize} L ${fusedArrowSize/2},${fusedArrowSize} L 0,${fusedArrowSize/2} L -${fusedArrowSize/2},${fusedArrowSize} Z`, // Arrow shape\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          \n          // Add confidence circle - only at higher zoom levels\n          if (isHighDetail) {\n            const confidenceRadius = 300 + (1 - vessel.detectionProbability.fused) * 1000;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.4,\n                strokeWeight: 0.5,\n              }\n            };\n          } else if (isMediumDetail && (vessel.type === 'military' || vessel.type === 'submarine')) {\n            // Only show confidence circles for important vessels at medium zoom\n            const confidenceRadius = 200 + (1 - vessel.detectionProbability.fused) * 800;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.3,\n                strokeWeight: 0.5,\n              }\n            };\n          }\n          break;\n          \n        default:\n          // Default to radar mode with arrow icon\n          const defaultSize = 5;\n          iconProps = {\n            path: `M 0,-${defaultSize} L ${defaultSize/2},${defaultSize} L 0,${defaultSize/2} L -${defaultSize/2},${defaultSize} Z`, // Arrow shape\n            fillColor: '#FFFFFF',\n            fillOpacity: 0.8,\n            strokeColor: '#000000',\n            strokeWeight: 1,\n            rotation: vessel.heading,\n            scale: 1,\n            anchor: new window.google.maps.Point(0, 0),\n          };\n          break;\n      }\n\n      return (\n        <React.Fragment key={vessel.id}>\n          <MemoizedMarker\n            position={position}\n            icon={iconProps}\n            onClick={() => {\n              console.log(\"Vessel clicked:\", vessel.name, vessel);\n              setSelectedVessel(vessel);\n            }}\n            clickable={true}\n            zIndex={isSelected ? 1000 : vessel.type === 'submarine' ? 500 : 100}\n          />\n          \n          {circleProps.radius > 0 && (\n            <MemoizedCircle\n              center={position}\n              radius={circleProps.radius}\n              options={circleProps.options}\n            />\n          )}\n          \n          {vessel.type === 'submarine' && vessel.isSubmerged && displayMode !== 'fused' && isHighDetail && (\n            <MemoizedMarker\n              position={{\n                lat: position.lat + 0.03,\n                lng: position.lng + 0.03\n              }}\n              label={{\n                text: `${vessel.depth}m`,\n                color: '#FFFFFF',\n                fontSize: '8px',\n                fontWeight: 'bold'\n              }}\n              icon={{\n                path: 0, // CIRCLE\n                scale: 0,\n                fillOpacity: 0,\n                strokeOpacity: 0\n              }}\n            />\n          )}\n        </React.Fragment>\n      );\n    });\n  }, [vessels, filter, isInMapBounds, selectedVessel, displayMode, currentZoom]);\n  \n  // Baltic Sea wind farm data - expanded with EMODnet data\n  const windFarmsData = [\n    // Denmark\n    { \n      name: \"Kriegers Flak\", \n      country: \"Denmark\", \n      capacity: 604, \n      lat: 54.9833, \n      lng: 13.0333, \n      status: \"operational\",\n      turbines: 72,\n      area: 132, // km²\n      areaPoints: [\n        {lat: 54.9633, lng: 13.0133},\n        {lat: 54.9733, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0133},\n        {lat: 54.9833, lng: 12.9933},\n        {lat: 54.9633, lng: 13.0133}\n      ]\n    },\n    { \n      name: \"Middelgrunden\", \n      country: \"Denmark\", \n      capacity: 40, \n      lat: 55.6853, \n      lng: 12.6913, \n      status: \"operational\",\n      turbines: 20,\n      area: 4, // km²\n      areaPoints: [\n        {lat: 55.6903, lng: 12.6813},\n        {lat: 55.6903, lng: 12.7013},\n        {lat: 55.6803, lng: 12.7013},\n        {lat: 55.6803, lng: 12.6813},\n        {lat: 55.6903, lng: 12.6813}\n      ]\n    },\n    { \n      name: \"Rødsand I\", \n      country: \"Denmark\", \n      capacity: 166, \n      lat: 54.5508, \n      lng: 11.7083, \n      status: \"operational\",\n      turbines: 72,\n      area: 35, // km²\n      areaPoints: [\n        {lat: 54.5408, lng: 11.6883},\n        {lat: 54.5408, lng: 11.7283},\n        {lat: 54.5608, lng: 11.7283},\n        {lat: 54.5608, lng: 11.6883},\n        {lat: 54.5408, lng: 11.6883}\n      ]\n    },\n    { name: \"Rødsand II\", country: \"Denmark\", capacity: 207, lat: 54.5580, lng: 11.6170, status: \"operational\", turbines: 90, area: 40 },\n    { name: \"Anholt\", country: \"Denmark\", capacity: 400, lat: 56.6000, lng: 11.2097, status: \"operational\", turbines: 111, area: 88 },\n    { name: \"Sprogø\", country: \"Denmark\", capacity: 21, lat: 55.3414, lng: 10.9767, status: \"operational\", turbines: 7, area: 6 },\n    { name: \"Samsø\", country: \"Denmark\", capacity: 23, lat: 55.7194, lng: 10.5639, status: \"operational\", turbines: 10, area: 5 },\n    \n    // Sweden\n    { name: \"Karehamn\", country: \"Sweden\", capacity: 48, lat: 56.9750, lng: 17.0000, status: \"operational\", turbines: 16, area: 8 },\n    { name: \"Lillgrund\", country: \"Sweden\", capacity: 110, lat: 55.5000, lng: 12.7667, status: \"operational\", turbines: 48, area: 6 },\n    { name: \"Södra Midsjöbanken\", country: \"Sweden\", capacity: 1500, lat: 55.7500, lng: 17.4000, status: \"planned\", turbines: 170, area: 265 },\n    { name: \"Storgrundet\", country: \"Sweden\", capacity: 265, lat: 61.1532, lng: 17.4376, status: \"planned\", turbines: 70, area: 57 },\n    { name: \"Utgrunden\", country: \"Sweden\", capacity: 10.5, lat: 56.3350, lng: 16.2860, status: \"operational\", turbines: 7, area: 2 },\n    { name: \"Bockstigen\", country: \"Sweden\", capacity: 2.5, lat: 57.0389, lng: 18.1378, status: \"operational\", turbines: 5, area: 1 },\n    \n    // Germany\n    { name: \"EnBW Baltic 1\", country: \"Germany\", capacity: 48, lat: 54.6080, lng: 12.6520, status: \"operational\", turbines: 21, area: 7 },\n    { name: \"EnBW Baltic 2\", country: \"Germany\", capacity: 288, lat: 54.9900, lng: 13.1666, status: \"operational\", turbines: 80, area: 27 },\n    { name: \"Arkona\", country: \"Germany\", capacity: 385, lat: 54.7833, lng: 14.1000, status: \"operational\", turbines: 60, area: 39 },\n    { name: \"Wikinger\", country: \"Germany\", capacity: 350, lat: 54.8333, lng: 14.0750, status: \"operational\", turbines: 70, area: 34 },\n    { name: \"Arcadis Ost 1\", country: \"Germany\", capacity: 257, lat: 54.8333, lng: 13.7500, status: \"under construction\", turbines: 27, area: 30 },\n    { name: \"Gennaker\", country: \"Germany\", capacity: 927, lat: 54.5500, lng: 12.2500, status: \"planned\", turbines: 103, area: 176 },\n    { name: \"Nordlicher Grund\", country: \"Germany\", capacity: 630, lat: 54.9831, lng: 6.3582, status: \"planned\", turbines: 64, area: 57 },\n    { name: \"Ostseeschatz\", country: \"Germany\", capacity: 372, lat: 54.3660, lng: 11.9165, status: \"planned\", turbines: 62, area: 40 },\n    { name: \"Baltic Eagle\", country: \"Germany\", capacity: 476, lat: 54.7778, lng: 13.9239, status: \"under construction\", turbines: 50, area: 40 },\n    \n    // Finland\n    { name: \"Tahkoluoto\", country: \"Finland\", capacity: 42, lat: 61.6330, lng: 21.3830, status: \"operational\", turbines: 10, area: 15 },\n    { name: \"Ajos\", country: \"Finland\", capacity: 42, lat: 65.7166, lng: 24.5166, status: \"operational\", turbines: 13, area: 10 },\n    { name: \"Kemi Ajos I\", country: \"Finland\", capacity: 15, lat: 65.6405, lng: 24.5267, status: \"operational\", turbines: 5, area: 6 },\n    { name: \"Kemi Ajos II\", country: \"Finland\", capacity: 16, lat: 65.6563, lng: 24.5402, status: \"operational\", turbines: 3, area: 4 },\n    { name: \"Raahe\", country: \"Finland\", capacity: 44, lat: 64.6500, lng: 24.3500, status: \"planned\", turbines: 8, area: 15 },\n    { name: \"Korsnäs\", country: \"Finland\", capacity: 1300, lat: 62.7500, lng: 21.0500, status: \"planned\", turbines: 70, area: 175 },\n    { name: \"Siikajoki\", country: \"Finland\", capacity: 100, lat: 64.8167, lng: 24.6167, status: \"planned\", turbines: 20, area: 25 },\n    \n    // Poland\n    { name: \"Baltic Power\", country: \"Poland\", capacity: 1200, lat: 55.0000, lng: 18.3330, status: \"under construction\", turbines: 76, area: 131 },\n    { name: \"FEW Baltic II\", country: \"Poland\", capacity: 350, lat: 54.8000, lng: 16.5000, status: \"planned\", turbines: 37, area: 41 },\n    { name: \"Baltica 1\", country: \"Poland\", capacity: 896, lat: 55.2060, lng: 17.1633, status: \"planned\", turbines: 64, area: 108 },\n    { name: \"Baltica 2\", country: \"Poland\", capacity: 1498, lat: 55.3340, lng: 16.8630, status: \"planned\", turbines: 107, area: 190 },\n    { name: \"Baltica 3\", country: \"Poland\", capacity: 1045, lat: 55.3340, lng: 16.7000, status: \"planned\", turbines: 95, area: 131 },\n    { name: \"MFW Bałtyk I\", country: \"Poland\", capacity: 1560, lat: 55.2383, lng: 17.4633, status: \"planned\", turbines: 100, area: 128 },\n    { name: \"MFW Bałtyk II\", country: \"Poland\", capacity: 720, lat: 55.1233, lng: 17.2467, status: \"planned\", turbines: 60, area: 65 },\n    { name: \"MFW Bałtyk III\", country: \"Poland\", capacity: 720, lat: 55.0817, lng: 17.0667, status: \"planned\", turbines: 60, area: 80 },\n    \n    // Estonia\n    { \n      name: \"Estonia Offshore 1\", \n      country: \"Estonia\", \n      capacity: 1000, \n      lat: 58.8000, \n      lng: 22.0000, \n      status: \"planned\",\n      turbines: 115,\n      area: 230, // km²\n      areaPoints: [\n        {lat: 58.7800, lng: 21.9600},\n        {lat: 58.7800, lng: 22.0400},\n        {lat: 58.8200, lng: 22.0400},\n        {lat: 58.8200, lng: 21.9600},\n        {lat: 58.7800, lng: 21.9600}\n      ]\n    },\n    { name: \"Liivi\", country: \"Estonia\", capacity: 1000, lat: 57.8333, lng: 23.5000, status: \"planned\", turbines: 100, area: 160 },\n    { name: \"Hiiumaa\", country: \"Estonia\", capacity: 700, lat: 59.0833, lng: 22.3833, status: \"planned\", turbines: 70, area: 100 },\n    { name: \"Saare-Liivi\", country: \"Estonia\", capacity: 600, lat: 57.9500, lng: 22.6833, status: \"planned\", turbines: 60, area: 90 },\n    \n    // Latvia\n    { name: \"ELWIND\", country: \"Latvia\", capacity: 1000, lat: 57.0830, lng: 20.7500, status: \"planned\", turbines: 100, area: 200 },\n    \n    // Lithuania\n    { name: \"Lithuanian OWF I\", country: \"Lithuania\", capacity: 700, lat: 55.8330, lng: 20.5000, status: \"planned\", turbines: 70, area: 120 },\n    \n    // Special projects\n    { \n      name: \"Bornholm Energy Island\", \n      country: \"Denmark\", \n      capacity: 3000, \n      lat: 55.1000, \n      lng: 14.9000, \n      status: \"planned\",\n      turbines: 200,\n      area: 400, // km²\n      areaPoints: [\n        {lat: 55.0500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.8500}\n      ]\n    },\n    { name: \"Hywind Tampen\", country: \"Norway\", capacity: 88, lat: 61.2500, lng: 20.4000, status: \"operational\", turbines: 11, area: 22 }\n  ];\n  \n  // Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\n  const renderWindFarms = useCallback(() => {\n    if (!showWindFarms) return null;\n    \n    // Filter wind farms to only show those in current map bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    \n    return visibleWindFarms\n      .map(windFarm => {\n        const position = { lat: windFarm.lat, lng: windFarm.lng };\n        \n        // Use different colors based on wind farm status\n        const fillColor = windFarm.status === \"operational\" \n          ? '#FFC107' // amber color for operational wind farms\n          : '#4CAF50'; // green color for planned and under construction\n        \n        // Icon for wind farms\n        const windFarmIcon = {\n          path: \"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\", // Square shape\n          scale: 1.5,\n          fillColor: fillColor,\n          fillOpacity: 0.8,\n          strokeColor: '#FFFFFF',\n          strokeWeight: 1,\n          rotation: 45, // Diamond shape\n        };\n        \n        // Determine how to visualize the area based on zoom level\n        let areaVisualization;\n        \n        if (isHighDetail) {\n          // Full detail at high zoom\n          if (windFarm.areaPoints) {\n            // Use specific polygon points if available\n            areaVisualization = (\n              <MemoizedPolygon\n                paths={windFarm.areaPoints}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else if (windFarm.area) {\n            // If we only have the area in km², create a sized circle\n            // Convert km² to meters radius using area = π*r²\n            const areaInSquareMeters = windFarm.area * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else {\n            // Calculate estimated area based on capacity and turbines\n            let estimatedArea;\n            if (windFarm.turbines) {\n              estimatedArea = windFarm.turbines * 1.0;\n            } else {\n              estimatedArea = windFarm.capacity / 6.5;\n            }\n            \n            const areaInSquareMeters = estimatedArea * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          }\n        } else if (isMediumDetail) {\n          // Simplified visualization for medium zoom levels\n          // Just use a circle with a simplified radius calculation\n          let radius;\n          \n          if (windFarm.area) {\n            // Use the known area but with simplified calculation\n            radius = Math.sqrt(windFarm.area) * 1000; // Simplified conversion to meters\n          } else if (windFarm.capacity > 500) {\n            radius = 15000; // Large wind farm\n          } else if (windFarm.capacity > 100) {\n            radius = 10000; // Medium wind farm\n          } else {\n            radius = 5000; // Small wind farm\n          }\n          \n          areaVisualization = (\n            <MemoizedCircle\n              center={position}\n              radius={radius}\n              options={{\n                fillColor: fillColor,\n                fillOpacity: 0.08,\n                strokeColor: fillColor,\n                strokeOpacity: 0.3,\n                strokeWeight: 1\n              }}\n            />\n          );\n        } else {\n          // No area visualization at low zoom levels - just markers\n          areaVisualization = null;\n        }\n        \n        return (\n          <React.Fragment key={`wind-farm-${windFarm.name}`}>\n            <MemoizedMarker\n              position={position}\n              icon={windFarmIcon}\n              onClick={() => {\n                console.log(\"Wind farm clicked:\", windFarm.name);\n                \n                // Calculate estimated area if not provided\n                let displayArea = windFarm.area;\n                if (!displayArea) {\n                  if (windFarm.turbines) {\n                    displayArea = Math.round(windFarm.turbines * 1.0);\n                  } else {\n                    displayArea = Math.round(windFarm.capacity / 6.5);\n                  }\n                }\n                \n                setSelectedVessel({\n                  id: `wind-farm-${windFarm.name}`,\n                  name: windFarm.name,\n                  type: 'wind-farm',\n                  flag: windFarm.country,\n                  operator: windFarm.country,\n                  capacity: windFarm.capacity,\n                  status: windFarm.status,\n                  area: displayArea,\n                  turbines: windFarm.turbines,\n                  estimatedArea: !windFarm.area,\n                  isWindFarm: true\n                });\n              }}\n              zIndex={50}\n            />\n            \n            {areaVisualization}\n          </React.Fragment>\n        );\n      });\n  }, [showWindFarms, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Separate function to render ONLY radar coverage with zoom-based detail\n  const renderRadarCoverage = useCallback(() => {\n    if (!showWindFarms || !showRadarCoverage) return null;\n    \n    // Skip rendering radar coverage at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    // Filter to only show radar coverage for wind farms in the current bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    \n    return visibleWindFarms.map(windFarm => {\n      const position = { lat: windFarm.lat, lng: windFarm.lng };\n      const radarCoverageRadius = 77784; // 42 nautical miles in meters\n      \n      return (\n        <MemoizedCircle\n          key={`radar-${windFarm.name}`}\n          center={position}\n          radius={radarCoverageRadius}\n          options={{\n            fillColor: '#FF0000',\n            fillOpacity: isHighDetail ? 0.05 : 0.03,\n            strokeColor: '#FF0000',\n            strokeOpacity: isHighDetail ? 0.7 : 0.5,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5], // Dashed line pattern\n          }}\n        />\n      );\n    });\n  }, [showWindFarms, showRadarCoverage, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Function to render vessel radar coverage based on gross tonnage with zoom-based detail\n  const renderVesselRadarCoverage = useCallback(() => {\n    // Skip rendering vessel radar at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    const result = [];\n    \n    // Render medium vessels (GT 300-2999) with 20 NM radar\n    if (showVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT 300-2999\n      const mediumVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 300 && v.grossTonnage < 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      mediumVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Medium vessels have 20 NM radar range\n        const radarRangeNM = 20;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    // Render large vessels (GT >= 3000) with 40 NM radar\n    if (showLargeVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT >= 3000\n      const largeVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      largeVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Large vessels have 40 NM radar range\n        const radarRangeNM = 40;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`large-vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    return result;\n  }, [showVesselRadar, showLargeVesselRadar, vessels, isInMapBounds, currentZoom]);\n  \n  // Update the map when display mode changes\n  useEffect(() => {\n    // This effect updates the Google Maps styling when display mode changes\n    mapOptions.styles = getMapStyle(displayMode);\n    \n    // If map is loaded, we can update its options\n    if (mapRef.current) {\n      mapRef.current.setOptions(mapOptions);\n    }\n  }, [displayMode, mapOptions]);\n  \n  // onMapLoad with error handling \n  const onMapLoad = useCallback((map) => {\n    console.log(\"Map loaded successfully\");\n    mapRef.current = map;\n    \n    // Make sure dragging is enabled\n    map.setOptions({\n      draggable: true,\n      zoomControl: false,\n      scrollwheel: true,\n      disableDoubleClickZoom: false\n    });\n    \n    // We can store the map's zoom control functionality\n    zoomRef.current = {\n      zoomIn: () => {\n        const newZoom = map.getZoom() + 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      },\n      zoomOut: () => {\n        const newZoom = map.getZoom() - 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      }\n    };\n    \n    // Get initial bounds\n    if (map.getBounds()) {\n      const bounds = map.getBounds();\n      setMapBounds({\n        north: bounds.getNorthEast().lat(),\n        east: bounds.getNorthEast().lng(),\n        south: bounds.getSouthWest().lat(),\n        west: bounds.getSouthWest().lng()\n      });\n      \n      // Initialize current center from the map\n      const center = map.getCenter();\n      setCurrentMapCenter({\n        lat: center.lat(),\n        lng: center.lng()\n      });\n    }\n    \n    // Set initial zoom\n    setCurrentZoom(map.getZoom());\n  }, []);\n  \n  // Add a click handler to the map background to deselect the current vessel\n  const handleMapClick = useCallback((e) => {\n    // Add debug logging\n    console.log(\"Map clicked\");\n    \n    // Only clear selection if we have one\n    if (selectedVessel) {\n      // The VesselMarker and WindFarmMarker will prevent event propagation\n      // This handler will only run for actual map clicks\n      setSelectedVessel(null);\n    }\n  }, [selectedVessel]);\n  \n  // Get visible vessel count - memoized for sidebar display\n  const visibleVesselCount = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                         (filter === 'russian' ? v.isRussian : v.type === filter);\n      return matchesFilter;\n    }).length\n  , [vessels, filter]);\n  \n  // Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\n  const displayedVessels = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    }).slice(0, 50) // Still limit to 50 for performance\n  , [vessels, filter, isInMapBounds]);\n  \n  // Memoize UI elements that don't need frequent updates\n  const controlPanels = useMemo(() => (\n    <>\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-2 palantir-heading\">Display Mode</h2>\n        <div className=\"flex flex-row flex-nowrap\">\n          <button \n            className={displayMode === 'radar' ? 'active' : ''} \n            onClick={() => setDisplayMode('radar')}\n          >\n            <Radar size={14} className=\"mr-1\" />\n            Radar\n          </button>\n          <button \n            className={displayMode === 'sonar' ? 'active' : ''} \n            onClick={() => setDisplayMode('sonar')}\n          >\n            <Waves size={14} className=\"mr-1\" />\n            Sonar\n          </button>\n          <button \n            className={displayMode === 'fused' ? 'active' : ''} \n            onClick={() => setDisplayMode('fused')}\n          >\n            <Layers size={14} className=\"mr-1\" />\n            Fused\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-2 palantir-heading\">Vessel Filter</h2>\n        <div className=\"flex flex-row flex-wrap\">\n          <button \n            className={filter === 'all' ? 'active' : ''} \n            onClick={() => setFilter('all')}\n          >\n            All\n          </button>\n          <button \n            className={filter === 'commercial' ? 'active' : ''} \n            onClick={() => setFilter('commercial')}\n          >\n            Commercial\n          </button>\n          <button \n            className={filter === 'military' ? 'active' : ''} \n            onClick={() => setFilter('military')}\n          >\n            Military\n          </button>\n          <button \n            className={filter === 'submarine' ? 'active' : ''} \n            onClick={() => setFilter('submarine')}\n          >\n            Submarines\n          </button>\n          <button \n            className={filter === 'russian' ? 'active' : ''} \n            onClick={() => setFilter('russian')}\n          >\n            Russian\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Wind Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showWindFarms ? 'active' : ''}\n            onClick={() => {\n              const newShowWindFarms = !showWindFarms;\n              setShowWindFarms(newShowWindFarms);\n              // If turning off wind farms, ensure radar coverage is also off\n              if (!newShowWindFarms) {\n                setShowRadarCoverage(false);\n              }\n            }}\n          >\n            <Wind size={16} className=\"mr-1\" />\n            Wind Farms {showWindFarms ? '(Shown)' : '(Hidden)'}\n          </button>\n          <button \n            className={showRadarCoverage ? 'active' : ''}\n            onClick={() => {\n              setShowRadarCoverage(!showRadarCoverage);\n            }}\n            disabled={!showWindFarms}\n            style={{ opacity: !showWindFarms ? 0.5 : 1 }}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Radar Coverage (42 NM)\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Commercial Vessel Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showVesselRadar ? 'active' : ''}\n            onClick={() => setShowVesselRadar(!showVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT 300-2999)\n          </button>\n          <button \n            className={showLargeVesselRadar ? 'active' : ''}\n            onClick={() => setShowLargeVesselRadar(!showLargeVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT &gt; 3000)\n          </button>\n        </div>\n      </div>\n      \n      {/* Add simulation controls panel */}\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Vessel Simulation</h2>\n        <div className=\"flex flex-col gap-3\">\n          <button \n            className={simulationEnabled ? 'active' : ''}\n            onClick={() => setSimulationEnabled(!simulationEnabled)}\n          >\n            <Ship size={16} className=\"mr-1\" />\n            {simulationEnabled ? 'Pause Movement' : 'Start Movement'}\n          </button>\n          <div className=\"flex flex-col\">\n            <span className=\"text-xs mb-1\">Speed: {simulationSpeed}x</span>\n            <input \n              type=\"range\" \n              min=\"1\" \n              max=\"50\" \n              value={simulationSpeed}\n              onChange={(e) => setSimulationSpeed(parseInt(e.target.value))}\n              className=\"w-2/5 max-w-[80px] accent-blue-500\"\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  ), [displayMode, filter, showWindFarms, showRadarCoverage, showVesselRadar, showLargeVesselRadar, simulationEnabled, simulationSpeed]);\n  \n  // Update UI to include display mode toggle\n  return (\n    <div className=\"baltic-tracker-container\">\n      <div className=\"flex h-screen\">\n        {showSidebar && (\n          <div className=\"sidebar w-80\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h1 className=\"text-xl font-semibold palantir-heading\">Baltic Sea Tracker</h1>\n              <button onClick={() => setShowSidebar(false)} className=\"text-gray-400 hover:text-white\">\n                <Menu size={20} />\n              </button>\n            </div>\n            \n            {controlPanels}\n          </div>\n        )}\n\n        <div className=\"flex-1 relative\">\n          {!showSidebar && (\n            <button\n              className=\"absolute top-4 left-4 z-10 bg-gray-800 p-2 rounded-md hover:bg-gray-700\"\n              onClick={() => setShowSidebar(true)}\n            >\n              <Menu size={20} />\n            </button>\n          )}\n          \n          {/* Simplified Google Maps integration */}\n          {loadError && (\n            <div className=\"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\">\n              <div className=\"text-xl mb-4\">Error loading Google Maps: {loadError.message}</div>\n            </div>\n          )}\n          \n          {!loadError && isLoaded ? (\n            <GoogleMap\n              mapContainerStyle={mapContainerStyle}\n              center={defaultCenter}\n              zoom={6}\n              options={{\n                disableDefaultUI: true,\n                zoomControl: false,\n                styles: getMapStyle(displayMode),\n                draggable: true,\n              }}\n              onLoad={onMapLoad}\n              key={mapKey}\n            >\n              {vessels.length > 0 && renderVessels()}\n              {showWindFarms && renderWindFarms()}\n              {showRadarCoverage && renderRadarCoverage()}\n              {(showVesselRadar || showLargeVesselRadar) && renderVesselRadarCoverage()}\n            </GoogleMap>\n          ) : !loadError ? (\n            <div className=\"w-full h-full flex items-center justify-center bg-gray-900 text-white\">\n              <div className=\"text-xl\">Loading map...</div>\n            </div>\n          ) : null}\n          \n          <div className=\"absolute bottom-4 right-4 flex gap-2\">\n            <button \n              onClick={() => zoomRef.current && zoomRef.current.zoomIn()}\n              className=\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\"\n            >\n              <ZoomIn size={20} className=\"text-blue-400\" />\n            </button>\n            <button \n              onClick={() => zoomRef.current && zoomRef.current.zoomOut()}\n              className=\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\"\n            >\n              <ZoomOut size={20} className=\"text-blue-400\" />\n            </button>\n          </div>\n          \n          {/* Move the Reset filters button to bottom-left corner */}\n          <button\n            onClick={() => {\n              // Reset vessel selection and visualization features\n              setSelectedVessel(null);\n              setShowWindFarms(false);\n              setShowRadarCoverage(false);\n              setShowVesselRadar(false);\n              setShowLargeVesselRadar(false);\n              setSimulationEnabled(false);\n              \n              // Reset display settings\n              setDisplayMode('radar');\n              setFilter('all');\n              setSimulationSpeed(10);\n              \n              // Reset map position and zoom\n              if (mapRef.current) {\n                mapRef.current.setCenter(defaultCenter);\n                mapRef.current.setZoom(6);\n                setCurrentZoom(6);\n                setCurrentMapCenter(defaultCenter);\n              }\n              \n              // Force React to remount map components\n              setMapKey(Date.now());\n              \n              // Small timeout to ensure map refreshes completely\n              setTimeout(() => {\n                if (mapRef.current && mapRef.current.overlayMapTypes) {\n                  mapRef.current.overlayMapTypes.clear();\n                }\n              }, 10);\n            }}\n            style={{\n              position: 'absolute',\n              bottom: '10px',\n              left: '10px',\n              backgroundColor: '#8B0000',\n              color: '#FFFFFF',\n              padding: '8px 16px',\n              borderRadius: '4px',\n              border: 'none',\n              fontWeight: '600',\n              cursor: 'pointer',\n              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.5)',\n              zIndex: 9999,\n              fontSize: '14px'\n            }}\n          >\n            Reset filters\n          </button>\n          \n          {selectedVessel && (\n            <div className=\"absolute top-20 right-10 control-panel\" style={{ zIndex: 9000 }}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-sm font-semibold palantir-heading\">{selectedVessel.name}</h3>\n                <button \n                  onClick={() => setSelectedVessel(null)} \n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  ×\n                </button>\n              </div>\n              <div className=\"text-sm text-gray-300\">\n                {selectedVessel.isWindFarm ? (\n                  <>\n                    <div>Type: Wind Farm</div>\n                    <div>Country: {selectedVessel.flag}</div>\n                    <div>Capacity: {selectedVessel.capacity} MW</div>\n                    {selectedVessel.turbines && <div>Turbines: {selectedVessel.turbines}</div>}\n                    {selectedVessel.area && (\n                      <div>\n                        Area: {selectedVessel.area} km² \n                        {selectedVessel.estimatedArea && <span className=\"text-amber-400\"> (est.)</span>}\n                      </div>\n                    )}\n                    <div>Status: {selectedVessel.status.charAt(0).toUpperCase() + selectedVessel.status.slice(1)}</div>\n                  </>\n                ) : (\n                  <>\n                    <div>Flag: {selectedVessel.flag}</div>\n                    <div>Type: {selectedVessel.type}</div>\n                    {selectedVessel.class && <div>Class: {selectedVessel.class}</div>}\n                    {selectedVessel.designation && <div>Designation: {selectedVessel.designation}</div>}\n                    <div>Operator: {selectedVessel.operator}</div>\n                    <div>Length: {selectedVessel.length}m</div>\n                    <div>Speed: {selectedVessel.speed} knots</div>\n                    <div>Heading: {selectedVessel.heading}°</div>\n                    {selectedVessel.grossTonnage && <div>Gross Tonnage: {selectedVessel.grossTonnage} GT</div>}\n                    {selectedVessel.type === 'submarine' && (\n                      <div>Depth: {selectedVessel.depth}m ({selectedVessel.isSubmerged ? 'Submerged' : 'Surfaced'})</div>\n                    )}\n                    <div className=\"mt-2\">Detection Confidence:</div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Radar:</span>\n                      <div className=\"progress-bar flex-1\">\n                        <div className=\"progress-value\" style={{width: `${selectedVessel.detectionProbability.radar * 100}%`, backgroundColor: \"#4285F4\"}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.radar * 100)}%</span>\n                    </div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Sonar:</span>\n                      <div className=\"progress-bar flex-1\">\n                        <div className=\"progress-value\" style={{width: `${selectedVessel.detectionProbability.sonar * 100}%`, backgroundColor: \"#00E5FF\"}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.sonar * 100)}%</span>\n                    </div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Fused:</span>\n                      <div className=\"progress-bar flex-1\">\n                        <div className=\"progress-value\" style={{width: `${selectedVessel.detectionProbability.fused * 100}%`, backgroundColor: \"#00C48C\"}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.fused * 100)}%</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-800 p-2 text-center text-sm text-gray-400\">\n        <div className=\"flex justify-center items-center\">\n          <Info size={16} className=\"mr-1 text-blue-400\" />\n          <span className=\"text-gray-300\">Baltic Sea Tracker - {filter === 'all' ? 300 : vessels.filter(v => filter === 'russian' ? v.isRussian : v.type === filter).length} vessels in {displayMode} mode | Zoom: {currentZoom}</span>\n          {showWindFarms && <span className=\"mx-1 text-amber-400\">| Wind Farms Shown</span>}\n          {showRadarCoverage && showWindFarms && <span className=\"mx-1 text-red-400\">| Radar Coverage (42 NM)</span>}\n          {showVesselRadar && <span className=\"mx-1 text-blue-400\">| Vessel Radar (20/40 NM)</span>}\n          {simulationEnabled && <span className=\"mx-1 text-green-400\">| Vessel Movement ({simulationSpeed}x)</span>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BalticSeaTracker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AACtF,SAASC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,cAAc;AAC5F,OAAO,8BAA8B;AACrC,SAASC,SAAS,EAAEC,cAAc,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,wBAAwB;;AAErG;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,cAAc,gBAAGpB,IAAI,CAACY,MAAM,CAAC;AAACS,EAAA,GAA9BD,cAAc;AACpB,MAAME,cAAc,gBAAGtB,IAAI,CAACa,MAAM,CAAC;AAACU,GAAA,GAA9BD,cAAc;AACpB,MAAME,eAAe,gBAAGxB,IAAI,CAACe,OAAO,CAAC;;AAErC;AAAAU,GAAA,GAFMD,eAAe;AAGrB,MAAME,iBAAiB,GAAG;EACxBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,EAAE;EACPC,GAAG,EAAE;AACP,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EACpE,oBACEpB,OAAA,CAACL,MAAM;IACLsB,QAAQ,EAAEA,QAAS;IACnBC,IAAI,EAAEA,IAAK;IACXE,OAAO,EAAEA,CAAA,KAAMA,OAAO,IAAIA,OAAO,CAACJ,MAAM,CAAE;IAC1CG,MAAM,EAAEA,MAAO;IACfE,OAAO,EAAE;MAAEC,SAAS,EAAE;IAAK;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEN,CAAC;;AAED;AAAAC,GAAA,GAZMZ,YAAY;AAalB,MAAMa,oBAAoB,gBAAG7C,IAAI,CAACgC,YAAY,CAAC;;AAE/C;AAAAc,GAAA,GAFMD,oBAAoB;AAG1B,MAAME,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEd,QAAQ;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EACxE,oBACEpB,OAAA,CAACL,MAAM;IACLsB,QAAQ,EAAEA,QAAS;IACnBC,IAAI,EAAEA,IAAK;IACXE,OAAO,EAAEA,CAAA,KAAMA,OAAO,IAAIA,OAAO,CAACW,QAAQ,CAAE;IAC5CZ,MAAM,EAAEA,MAAO;IACfE,OAAO,EAAE;MAAEC,SAAS,EAAE;IAAK;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEN,CAAC;;AAED;AAAAM,GAAA,GAZMF,cAAc;AAapB,MAAMG,sBAAsB,gBAAGlD,IAAI,CAAC+C,cAAc,CAAC;AAACI,GAAA,GAA9CD,sBAAsB;AAE5B,MAAME,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B;EACA,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAG5C,cAAc,CAAC;IAC7C6C,EAAE,EAAE,mBAAmB;IACvBC,gBAAgB,EAAE,yCAAyC;IAC3DC,SAAS,EAAE,CAAC,UAAU,EAAE,SAAS;EACnC,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;IAAEN,QAAQ;IAAEC;EAAU,CAAC,CAAC;;EAE3D;EACA,MAAMM,MAAM,GAAGhE,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMiE,OAAO,GAAGjE,MAAM,CAAC,IAAI,CAAC;EAC5B;EACA,MAAMkE,iBAAiB,GAAGlE,MAAM,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAM,CAACmE,OAAO,EAAEC,UAAU,CAAC,GAAGrE,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsE,cAAc,EAAEC,iBAAiB,CAAC,GAAGvE,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAM,CAACwE,WAAW,EAAEC,cAAc,CAAC,GAAGzE,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAAC0E,MAAM,EAAEC,SAAS,CAAC,GAAG3E,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAAC4E,WAAW,EAAEC,cAAc,CAAC,GAAG7E,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC8E,aAAa,EAAEC,gBAAgB,CAAC,GAAG/E,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACgF,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjF,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAACkF,eAAe,EAAEC,kBAAkB,CAAC,GAAGnF,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACoF,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGrF,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzE,MAAM,CAACsF,SAAS,EAAEC,YAAY,CAAC,GAAGvF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACwF,WAAW,EAAEC,cAAc,CAAC,GAAGzF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC0F,MAAM,EAAEC,SAAS,CAAC,GAAG3F,QAAQ,CAAC4F,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG/F,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAACgG,eAAe,EAAEC,kBAAkB,CAAC,GAAGjG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5D,MAAMkG,iBAAiB,GAAGjG,MAAM,CAAC2F,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAM,CAACM,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpG,QAAQ,CAACiC,aAAa,CAAC;;EAEvE;EACA,MAAMoE,QAAQ,GAAGlG,OAAO,CAAC,MAAMmG,WAAW,CAAC9B,WAAW,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEvE,MAAM+B,UAAU,GAAGpG,OAAO,CAAC,OAAO;IAChCqG,gBAAgB,EAAE,IAAI;IACtBC,WAAW,EAAE,KAAK;IAClBC,MAAM,EAAEL,QAAQ;IAChBM,SAAS,EAAE,IAAI;IAAE;IACjB;IACAC,YAAY,EAAE;MACZC,YAAY,EAAE;QACZC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE,IAAI;QACVC,IAAI,EAAE;MACR;IACF;EACF,CAAC,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;;EAEf;EACA,MAAMa,aAAa,GAAGjH,MAAM,CAAC,KAAK,CAAC;;EAEnC;EACAF,SAAS,CAAC,MAAM;IACd,IAAI4D,SAAS,EAAE;MACbI,OAAO,CAACoD,KAAK,CAAC,4BAA4B,EAAExD,SAAS,CAAC;IACxD;IACA,IAAID,QAAQ,IAAI,CAACwD,aAAa,CAACE,OAAO,EAAE;MACtCrD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClDkD,aAAa,CAACE,OAAO,GAAG,IAAI;IAC9B;EACF,CAAC,EAAE,CAAC1D,QAAQ,EAAEC,SAAS,CAAC,CAAC;;EAEzB;EACA,SAAS2C,WAAWA,CAACe,IAAI,EAAE;IACzB,QAAOA,IAAI;MACT,KAAK,OAAO;QACV,OAAO,CACL;UAAEC,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC5D;UAAEF,WAAW,EAAE,oBAAoB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACtE;UAAEF,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACpE;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAClF;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC1F;UAAEC,WAAW,EAAE,KAAK;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EACxD;UAAED,WAAW,EAAE,SAAS;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EAC5D;UAAED,WAAW,EAAE,MAAM;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACzD;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7DC,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACpC;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7D5C,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,KAAK,CAAC;UAC5C6C,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAK,CAAC;QAAE,CAAC,CACpC;MACH,KAAK,OAAO;QACV,OAAO,CACL;UAAEJ,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC5D;UAAEF,WAAW,EAAE,oBAAoB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACtE;UAAEF,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACpE;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAClF;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC1F;UAAEC,WAAW,EAAE,KAAK;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EACxD;UAAED,WAAW,EAAE,SAAS;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EAC5D;UAAED,WAAW,EAAE,MAAM;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACzD;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7DC,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACpC;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7D5C,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,KAAK,CAAC;UAC5C6C,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAK,CAAC;QAAE,CAAC,CACpC;MACH,KAAK,OAAO;QACV,OAAO,CACL;UAAEJ,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC5D;UAAEF,WAAW,EAAE,oBAAoB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACtE;UAAEF,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EACpE;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,UAAU;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAClF;UAAEC,WAAW,EAAE,OAAO;UAAEH,WAAW,EAAE,kBAAkB;UAAEC,OAAO,EAAE,CAAC;YAAEC,KAAK,EAAE;UAAU,CAAC;QAAE,CAAC,EAC1F;UAAEC,WAAW,EAAE,KAAK;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EACxD;UAAED,WAAW,EAAE,SAAS;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC,EAC5D;UAAED,WAAW,EAAE,MAAM;UAAEF,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACzD;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7DC,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAM,CAAC;QAAE,CAAC;QACpC;QACA;UAAED,WAAW,EAAE,yBAAyB;UAAEH,WAAW,EAAE,QAAQ;UAC7D5C,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,KAAK,CAAC;UAC5C6C,OAAO,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAK,CAAC;QAAE,CAAC,CACpC;MACH;QACE,OAAO,EAAE;IACb;EACF;;EAEA;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,aAAa,GAAG;IACpB;IACA;IACA;MAACC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;;IAErE;IACA;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;;IAErE;IACA;IACA;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;;IAErE;IACA;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;;IAErE;IACA;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;;IAErE;IACA;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC;IAAE;IACrE;MAACJ,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAC,CAAC,CAAE;IAAA,CACtE;;IAED;IACA,MAAMC,WAAW,GAAGN,aAAa,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACJ,MAAM,EAAE,CAAC,CAAC;;IAE7E;IACA,IAAIK,WAAW,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGN,WAAW;IAC7C,IAAIO,YAAY,GAAGb,aAAa,CAAC,CAAC,CAAC;IACnC,IAAIc,gBAAgB,GAAG,CAAC;IAExB,KAAK,MAAML,IAAI,IAAIT,aAAa,EAAE;MAChCc,gBAAgB,IAAIL,IAAI,CAACJ,MAAM;MAC/B,IAAIK,WAAW,IAAII,gBAAgB,EAAE;QACnCD,YAAY,GAAGJ,IAAI;QACnB;MACF;IACF;;IAEA;IACA;IACA;;IAEA;IACA;IACA,OAAO,CACLI,YAAY,CAACV,MAAM,GAAGQ,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIC,YAAY,CAACT,MAAM,GAAGS,YAAY,CAACV,MAAM,CAAC;IAAE;IACnFU,YAAY,CAACZ,MAAM,GAAGU,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIC,YAAY,CAACX,MAAM,GAAGW,YAAY,CAACZ,MAAM,CAAC,CAAE;IAAA,CACpF;EACH,CAAC;;EAED;EACA,MAAMc,eAAe,GAAGzI,WAAW,CAAC,MAAM;IACxC,MAAM0I,WAAW,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,CAAC;IAChF,MAAMC,KAAK,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC;IAC/G,MAAMC,gBAAgB,GAAG,CAAC,YAAY,EAAE,eAAe,EAAE,YAAY,EAAE,cAAc,EAAE,SAAS,CAAC;IACjG,MAAMC,mBAAmB,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EACvE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,aAAa,CAAC;;IAE3G;IACA,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,iBAAiB,GAAG,EAAE,CAAC,CAAC;IAC9B,MAAMC,YAAY,GAAG,GAAG,CAAC,CAAC;;IAE1B;IACA,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;IACzB,IAAIC,iBAAiB,GAAG,CAAC;;IAEzB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAED,iBAAiB,GAAG,GAAG,IAAIC,CAAC,IAAIF,WAAW,EAAEE,CAAC,EAAE,EAAE;MAChE,MAAMC,IAAI,GAAGV,WAAW,CAACL,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGI,WAAW,CAACY,MAAM,CAAC,CAAC;MACxE,MAAMC,IAAI,GAAGZ,KAAK,CAACN,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGK,KAAK,CAACW,MAAM,CAAC,CAAC;MAC5D,MAAME,SAAS,GAAGD,IAAI,KAAK,QAAQ,IAAKlB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAK,CAAC,CAAC;;MAE/D;MACA,MAAMlG,QAAQ,GAAGqF,gBAAgB,CAAC,CAAC;;MAEnC;MACA;MACA,MAAMgC,aAAa,GACjBrH,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,IAAIA,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI;MAAI;MAC9CA,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,IAAIA,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAK;MAC/C;;MAED;MACA,IAAI,CAACqH,aAAa,EAAE;QAClB;MACF;;MAEA;MACA,IAAIC,UAAU,GAAG,KAAK;MACtB,KAAK,MAAMC,WAAW,IAAIZ,iBAAiB,EAAE;QAC3C,MAAMa,QAAQ,GAAGvB,IAAI,CAACwB,IAAI,CACxBxB,IAAI,CAACyB,GAAG,CAAC1H,QAAQ,CAAC,CAAC,CAAC,GAAGuH,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GACzCtB,IAAI,CAACyB,GAAG,CAAC1H,QAAQ,CAAC,CAAC,CAAC,GAAGuH,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAC1C,CAAC;QAED,IAAIC,QAAQ,GAAGZ,YAAY,EAAE;UAC3BU,UAAU,GAAG,IAAI;UACjB;QACF;MACF;;MAEA;MACA,IAAIA,UAAU,EAAE;QACd;MACF;;MAEA;MACAX,iBAAiB,CAACgB,IAAI,CAAC3H,QAAQ,CAAC;MAChC8G,iBAAiB,EAAE;;MAEnB;MACA;MACA,IAAIc,OAAO;MACX,MAAMhI,GAAG,GAAGI,QAAQ,CAAC,CAAC,CAAC;MACvB,MAAMH,GAAG,GAAGG,QAAQ,CAAC,CAAC,CAAC;;MAEvB;MACA,IAAIH,GAAG,GAAG,IAAI,EAAE;QACd;QACA+H,OAAO,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MACpF,CAAC,MAAM,IAAIrG,GAAG,GAAG,IAAI,IAAID,GAAG,GAAG,IAAI,EAAE;QACnC;QACAgI,OAAO,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MACpF,CAAC,MAAM,IAAIrG,GAAG,GAAG,IAAI,IAAID,GAAG,GAAG,IAAI,EAAE;QACnC;QACAgI,OAAO,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MACnF,CAAC,MAAM,IAAIrG,GAAG,GAAG,IAAI,IAAID,GAAG,GAAG,IAAI,IAAIA,GAAG,GAAG,IAAI,EAAE;QACjD;QACAgI,OAAO,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MACnF,CAAC,MAAM,IAAItG,GAAG,GAAG,IAAI,IAAIC,GAAG,GAAG,IAAI,EAAE;QACnC;QACA+H,OAAO,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;MACrF,CAAC,MAAM;QACL;QACA0B,OAAO,GAAG3B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MAC3C;;MAEA;MACA,IAAI2B,KAAK;MACT,IAAIb,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC9Ca,KAAK,GAAG,EAAE,GAAG5B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9C,CAAC,MAAM,IAAIc,IAAI,KAAK,WAAW,EAAE;QAC/Ba,KAAK,GAAG,EAAE,GAAG5B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;MAC/C,CAAC,MAAM,IAAIc,IAAI,KAAK,UAAU,EAAE;QAC9Ba,KAAK,GAAG,CAAC,GAAG5B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;MAC9C,CAAC,MAAM,IAAIc,IAAI,KAAK,SAAS,EAAE;QAC7B;QACAa,KAAK,GAAG5B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAGD,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvE,CAAC,MAAM;QACL2B,KAAK,GAAG5B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;MAC9C;;MAEA;MACA,MAAMgB,MAAM,GAAGF,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,YAAY,GACrD,GAAG,GAAGf,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GACrCc,IAAI,KAAK,UAAU,GACjB,EAAE,GAAGf,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GACpC,EAAE,GAAGD,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;;MAEzC;MACA;MACA,IAAI4B,YAAY;MAChB,IAAId,IAAI,KAAK,YAAY,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC9C;QACAc,YAAY,GAAG7B,IAAI,CAAC8B,KAAK,CAACb,MAAM,GAAGA,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;MACrD,CAAC,MAAM,IAAIF,IAAI,KAAK,UAAU,EAAE;QAC9B;QACAc,YAAY,GAAG7B,IAAI,CAAC8B,KAAK,CAACb,MAAM,GAAGA,MAAM,GAAG,IAAI,CAAC;MACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,WAAW,EAAE;QAC/B;QACAc,YAAY,GAAG7B,IAAI,CAAC8B,KAAK,CAACb,MAAM,GAAGA,MAAM,GAAG,GAAG,CAAC;MAClD,CAAC,MAAM;QACL;QACAY,YAAY,GAAG7B,IAAI,CAAC8B,KAAK,CAACb,MAAM,GAAGA,MAAM,GAAG,IAAI,CAAC;MACnD;;MAEA;MACA,IAAIc,QAAQ;MACZ,IAAIZ,SAAS,EAAE;QACbY,QAAQ,GAAGxB,gBAAgB,CAACP,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGM,gBAAgB,CAACU,MAAM,CAAC,CAAC;MAClF,CAAC,MAAM;QACLc,QAAQ,GAAGvB,mBAAmB,CAACR,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGO,mBAAmB,CAACS,MAAM,CAAC,CAAC;MACxF;;MAEA;MACA,MAAMe,QAAQ,GAAGb,SAAS,GACxB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,UAAU,CAAC,GAClF,CAAC,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;MAEzE,MAAMc,QAAQ,GAAGd,SAAS,GACxB,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,GACxE,CAAC,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC;MAEpF,MAAMe,WAAW,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAE1E,IAAIC,IAAI;MACR,IAAInC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACvB;QACAkC,IAAI,GAAG,GAAGH,QAAQ,CAAChC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG+B,QAAQ,CAACf,MAAM,CAAC,CAAC,IAAIgB,QAAQ,CAACjC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGgC,QAAQ,CAAChB,MAAM,CAAC,CAAC,EAAE;MAC5H,CAAC,MAAM,IAAIjB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QAC9B;QACAkC,IAAI,GAAG,GAAGH,QAAQ,CAAChC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG+B,QAAQ,CAACf,MAAM,CAAC,CAAC,IAAIiB,WAAW,CAAClC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGiC,WAAW,CAACjB,MAAM,CAAC,CAAC,EAAE;MAClI,CAAC,MAAM;QACL;QACAkB,IAAI,GAAGnC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GACxB+B,QAAQ,CAAChC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG+B,QAAQ,CAACf,MAAM,CAAC,CAAC,GACrDgB,QAAQ,CAACjC,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGgC,QAAQ,CAAChB,MAAM,CAAC,CAAC;MACzD;MAEA,IAAIF,IAAI,KAAK,UAAU,IAAII,SAAS,EAAE;QACpCgB,IAAI,GAAG,OAAOA,IAAI,EAAE,CAAC,CAAC;MACxB;;MAEA;MACA,MAAMC,oBAAoB,GAAG;QAC3BC,KAAK,EAAErC,IAAI,CAACC,MAAM,CAAC,CAAC;QAAE;QACtBqC,KAAK,EAAEtC,IAAI,CAACC,MAAM,CAAC,CAAC;QAAE;QACtBsC,KAAK,EAAE,CAACvC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;MAC7C,CAAC;;MAED;MACAQ,gBAAgB,CAACiB,IAAI,CAAC;QACpBrG,EAAE,EAAEwF,iBAAiB;QACrBsB,IAAI;QACJpB,IAAI;QACJG,IAAI;QACJC,SAAS;QACTpH,QAAQ;QACR4H,OAAO;QACPC,KAAK;QACLX,MAAM;QACNc,QAAQ;QACRK,oBAAoB;QACpBP;MACF,CAAC,CAAC;IACJ;;IAEA;IACA;IACA,MAAMW,cAAc,GAAG,CACrB,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,aAAa,EAC3D,kBAAkB,EAAE,SAAS,EAAE,iBAAiB,CACjD;IAED,MAAMC,gBAAgB,GAAG,CACvB,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EACtD,qBAAqB,EAAE,qBAAqB,EAAE,YAAY,CAC3D;IAED,MAAMC,qBAAqB,GAAG,CAC5B,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAClC,OAAO,EAAE,OAAO,EAAE,OAAO,CAC1B;;IAED;IACA,MAAMC,cAAc,GAAG;IACrB;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC;IACZ;IACA,CAAC,IAAI,EAAE,IAAI,CAAC,CACb;;IAED;IACA,MAAMC,wBAAwB,GAAGD,cAAc,CAACE,GAAG,CAACC,GAAG,IAAI,CACzDA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC9C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;IAAG;IACvC6C,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC9C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAG;IAAA,CACxC,CAAC;;IAEF;IACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAM/G,QAAQ,GAAG6I,wBAAwB,CAAC9B,CAAC,CAAC;MAC5C,MAAMa,OAAO,GAAG3B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MAC/C,MAAM2B,KAAK,GAAG,CAAC,GAAG5B,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;MAClD,MAAM8C,KAAK,GAAG,EAAE,GAAG/C,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;;MAEpD;MACA;MACA,MAAM+C,WAAW,GAAGhD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;;MAEzC,MAAMmC,oBAAoB,GAAG;QAC3BC,KAAK,EAAEW,WAAW,GAAG,IAAI,GAAGhD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAE;QAC7EqC,KAAK,EAAE,GAAG,GAAGtC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAAE;QAClCsC,KAAK,EAAES,WAAW,GAChB,CAAC,IAAI,GAAGhD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;QAAG;QAC/D,CAAC,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAI;MACnE,CAAC;MAEDQ,gBAAgB,CAACiB,IAAI,CAAC;QACpBrG,EAAE,EAAE,IAAI,GAAGyF,CAAC;QAAE;QACdqB,IAAI,EAAE,OAAOK,cAAc,CAAC1B,CAAC,CAAC,EAAE;QAChCC,IAAI,EAAE,WAAW;QACjBkC,KAAK,EAAER,gBAAgB,CAAC3B,CAAC,CAAC;QAC1BoC,WAAW,EAAER,qBAAqB,CAAC5B,CAAC,CAAC;QACrCI,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,IAAI;QACfpH,QAAQ;QACR4H,OAAO;QACPC,KAAK;QACLmB,KAAK;QACL9B,MAAM,EAAE,EAAE,GAAGjB,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAAE;QAC7C+C,WAAW;QACXjB,QAAQ,EAAE,cAAc;QACxBK;MACF,CAAC,CAAC;IACJ;IAEA,OAAO3B,gBAAgB;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjJ,SAAS,CAAC,MAAM;IACd,MAAM2L,gBAAgB,GAAG/C,eAAe,CAAC,CAAC;IAC1CtE,UAAU,CAACqH,gBAAgB,CAAC;EAC9B,CAAC,EAAE,CAAC/C,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMgD,qBAAqB,GAAGzL,WAAW,CAAC,MAAM;IAC9C,IAAI,CAAC4F,iBAAiB,EAAE;IAExB,MAAM8F,WAAW,GAAGhG,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B,MAAMgG,SAAS,GAAG,CAACD,WAAW,GAAG1F,iBAAiB,CAACkB,OAAO,IAAI,IAAI,CAAC,CAAC;IACpElB,iBAAiB,CAACkB,OAAO,GAAGwE,WAAW;;IAEvC;IACA,MAAME,iBAAiB,GAAGD,SAAS,GAAG7F,eAAe;;IAErD;IACA,IAAI8F,iBAAiB,GAAG,CAAC,EAAE;IAE3BzH,UAAU,CAAC0H,WAAW,IAAI;MACxB,OAAOA,WAAW,CAACX,GAAG,CAAC/I,MAAM,IAAI;QAC/B;QACA,IAAIA,MAAM,CAAC8H,KAAK,KAAK,CAAC,EAAE,OAAO9H,MAAM;;QAErC;QACA;QACA;QACA,MAAM2J,kBAAkB,GAAGzD,IAAI,CAAC0D,GAAG,CAAC5J,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAGiG,IAAI,CAAC2D,EAAE,GAAG,GAAG,CAAC;QACvE,MAAMC,eAAe,GAAG9J,MAAM,CAAC8H,KAAK,GAAG,MAAM,GAAG2B,iBAAiB,GAAGE,kBAAkB;QACtF,MAAMI,cAAc,GAAG/J,MAAM,CAAC8H,KAAK,GAAG,MAAM,GAAG2B,iBAAiB;;QAEhE;QACA,MAAMO,UAAU,GAAGhK,MAAM,CAAC6H,OAAO,GAAG3B,IAAI,CAAC2D,EAAE,GAAG,GAAG;QACjD,MAAMI,MAAM,GAAGjK,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAI6J,eAAe,GAAG5D,IAAI,CAACgE,GAAG,CAACF,UAAU,CAAE;QAC5E,MAAMG,MAAM,GAAGnK,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAI8J,cAAc,GAAG7D,IAAI,CAAC0D,GAAG,CAACI,UAAU,CAAE;;QAE3E;QACA,IAAI,CAACI,mBAAmB,CAACD,MAAM,EAAEF,MAAM,CAAC,EAAE;UACxC;UACA;;UAEA;UACA,IAAII,WAAW,GAAGrK,MAAM,CAAC6H,OAAO;UAChC,IAAIyC,oBAAoB,GAAG,KAAK;;UAEhC;UACA,KAAK,IAAIC,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,GAAG,EAAEA,WAAW,IAAI,EAAE,EAAE;YAC9D,MAAMC,WAAW,GAAG,CAACxK,MAAM,CAAC6H,OAAO,GAAG0C,WAAW,IAAI,GAAG;YACxD,MAAME,OAAO,GAAGD,WAAW,GAAGtE,IAAI,CAAC2D,EAAE,GAAG,GAAG;;YAE3C;YACA,MAAMa,OAAO,GAAG1K,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAI6J,eAAe,GAAG,CAAC,GAAG5D,IAAI,CAACgE,GAAG,CAACO,OAAO,CAAE;YAC9E,MAAME,OAAO,GAAG3K,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAI8J,cAAc,GAAG,CAAC,GAAG7D,IAAI,CAAC0D,GAAG,CAACa,OAAO,CAAE;YAE7E,IAAIL,mBAAmB,CAACO,OAAO,EAAED,OAAO,CAAC,EAAE;cACzCL,WAAW,GAAGG,WAAW;cACzBF,oBAAoB,GAAG,IAAI;cAC3B;YACF;UACF;;UAEA;UACA,IAAI,CAACA,oBAAoB,EAAE;YACzB,MAAMM,SAAS,GAAG,IAAI,CAAC,CAAC;YACxB,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAG;YACxB,MAAMC,aAAa,GAAG5E,IAAI,CAAC6E,KAAK,CAACF,SAAS,GAAG7K,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAE2K,SAAS,GAAG5K,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGiG,IAAI,CAAC2D,EAAE;;YAEhH;YACA,MAAMmB,WAAW,GAAI,CAACF,aAAa,GAAG9K,MAAM,CAAC6H,OAAO,GAAG,GAAG,IAAI,GAAG,GAAI,GAAG;YACxEwC,WAAW,GAAG,CAACrK,MAAM,CAAC6H,OAAO,GAAG3B,IAAI,CAAC+E,IAAI,CAACD,WAAW,CAAC,GAAG,EAAE,IAAI,GAAG;YAClE,IAAIX,WAAW,GAAG,CAAC,EAAEA,WAAW,IAAI,GAAG;UACzC;;UAEA;UACA,MAAMa,YAAY,GAAGhF,IAAI,CAACiF,GAAG,CAAC,CAAC,EAAEnL,MAAM,CAAC8H,KAAK,GAAG,GAAG,CAAC;UAEpD,OAAO;YACL,GAAG9H,MAAM;YACT6H,OAAO,EAAEwC,WAAW;YACpBvC,KAAK,EAAEoD,YAAY,CAAC;UACtB,CAAC;QACH;;QAEA;QACA,IAAIE,UAAU,GAAGpL,MAAM,CAAC6H,OAAO;QAC/B,MAAMwD,aAAa,GAAGrL,MAAM,CAAC8H,KAAK;QAClC,IAAIwD,QAAQ,GAAGD,aAAa;QAE5B,IAAI,CAACrL,MAAM,CAACiH,IAAI,KAAK,UAAU,IAAIjH,MAAM,CAACiH,IAAI,KAAK,WAAW,KAAKf,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAGsD,iBAAiB,EAAE;UAC3G;UACA2B,UAAU,GAAG,CAACpL,MAAM,CAAC6H,OAAO,IAAI3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,GAAG;UAC/D,IAAIiF,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAI,GAAG;;UAErC;UACA,IAAIlF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;YACvB,MAAMoF,WAAW,GAAG,GAAG,GAAGrF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YAC/CmF,QAAQ,GAAGpF,IAAI,CAACiF,GAAG,CAAC,CAAC,EAAEjF,IAAI,CAACsF,GAAG,CAAC,EAAE,EAAEH,aAAa,GAAGE,WAAW,CAAC,CAAC;UACnE;QACF;QACA;QAAA,KACK,IAAIrF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,KAAK,GAAGsD,iBAAiB,EAAE;UAClD;UACA2B,UAAU,GAAG,CAACpL,MAAM,CAAC6H,OAAO,IAAI3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,GAAG;UAC/D,IAAIiF,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAI,GAAG;QACvC;QAEA,OAAO;UACL,GAAGpL,MAAM;UACTC,QAAQ,EAAE,CAACgK,MAAM,EAAEE,MAAM,CAAC;UAC1BtC,OAAO,EAAEuD,UAAU;UACnBtD,KAAK,EAAEwD;QACT,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAxJ,iBAAiB,CAACiD,OAAO,GAAG0G,qBAAqB,CAACnC,qBAAqB,CAAC;EAC1E,CAAC,EAAE,CAAC7F,iBAAiB,EAAEE,eAAe,CAAC,CAAC;;EAExC;EACA;EACA,MAAMyG,mBAAmB,GAAGvM,WAAW,CAAC,CAACgC,GAAG,EAAEC,GAAG,KAAK;IACpD;IACA,IAAID,GAAG,GAAG,IAAI,IAAIA,GAAG,GAAG,IAAI,IAAIC,GAAG,GAAG,GAAG,IAAIA,GAAG,GAAG,IAAI,EAAE;MACvD,OAAO,KAAK;IACd;;IAEA;IACA;IACA,MAAM4L,SAAS,GAAG;IAChB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;IACvB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CACzB;;IAED;IACA;IACA,MAAMC,gBAAgB,GAAG;IACvB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;IAC5B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3B;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAC5B;;IAED;IACA,KAAK,MAAM,CAACjH,KAAK,EAAED,KAAK,EAAEG,IAAI,EAAED,IAAI,CAAC,IAAI+G,SAAS,EAAE;MAClD,IAAI7L,GAAG,IAAI6E,KAAK,IAAI7E,GAAG,IAAI4E,KAAK,IAAI3E,GAAG,IAAI8E,IAAI,IAAI9E,GAAG,IAAI6E,IAAI,EAAE;QAC9D;QACA;QACA;;QAEA;QACA;QACA,MAAMiH,gBAAgB,GAAG1F,IAAI,CAACsF,GAAG,CAC/BtF,IAAI,CAAC2F,GAAG,CAAChM,GAAG,GAAG6E,KAAK,CAAC,EACrBwB,IAAI,CAAC2F,GAAG,CAAChM,GAAG,GAAG4E,KAAK,CAAC,EACrByB,IAAI,CAAC2F,GAAG,CAAC/L,GAAG,GAAG8E,IAAI,CAAC,EACpBsB,IAAI,CAAC2F,GAAG,CAAC/L,GAAG,GAAG6E,IAAI,CACrB,CAAC;;QAED;QACA,IAAIiH,gBAAgB,GAAG,GAAG,EAAE;UAC1B;UACA;UACA,OAAO1F,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QAC5B;QAEA,OAAO,KAAK,CAAC,CAAC;MAChB;IACF;;IAEA;IACA,KAAK,MAAM,CAACzB,KAAK,EAAED,KAAK,EAAEG,IAAI,EAAED,IAAI,CAAC,IAAIgH,gBAAgB,EAAE;MACzD,IAAI9L,GAAG,IAAI6E,KAAK,IAAI7E,GAAG,IAAI4E,KAAK,IAAI3E,GAAG,IAAI8E,IAAI,IAAI9E,GAAG,IAAI6E,IAAI,EAAE;QAC9D,OAAO,IAAI,CAAC,CAAC;MACf;IACF;;IAEA;;IAEA;IACA;IACA,MAAMmH,cAAc,GAAG;IACrB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxB;IACA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CACzB;;IAED;IACA,KAAK,MAAM,CAACpH,KAAK,EAAED,KAAK,EAAEG,IAAI,EAAED,IAAI,CAAC,IAAImH,cAAc,EAAE;MACvD,IAAIjM,GAAG,IAAI6E,KAAK,IAAI7E,GAAG,IAAI4E,KAAK,IAAI3E,GAAG,IAAI8E,IAAI,IAAI9E,GAAG,IAAI6E,IAAI,EAAE;QAC9D;QACA,OAAOuB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAC5B;IACF;;IAEA;IACA,OAAO,IAAI;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAzI,SAAS,CAAC,MAAM;IACd,IAAI+F,iBAAiB,EAAE;MACrBI,iBAAiB,CAACkB,OAAO,GAAGxB,IAAI,CAACC,GAAG,CAAC,CAAC;MACtC1B,iBAAiB,CAACiD,OAAO,GAAG0G,qBAAqB,CAACnC,qBAAqB,CAAC;IAC1E,CAAC,MAAM,IAAIxH,iBAAiB,CAACiD,OAAO,EAAE;MACpCgH,oBAAoB,CAACjK,iBAAiB,CAACiD,OAAO,CAAC;IACjD;;IAEA;IACA,OAAO,MAAM;MACX,IAAIjD,iBAAiB,CAACiD,OAAO,EAAE;QAC7BgH,oBAAoB,CAACjK,iBAAiB,CAACiD,OAAO,CAAC;MACjD;IACF,CAAC;EACH,CAAC,EAAE,CAACtB,iBAAiB,EAAE6F,qBAAqB,CAAC,CAAC;;EAE9C;EACA,MAAM0C,aAAa,GAAGnO,WAAW,CAAC,CAACgC,GAAG,EAAEC,GAAG,KAAK;IAC9C,IAAI,CAACmD,SAAS,EAAE,OAAO,IAAI,CAAC,CAAC;;IAE7B;IACA,MAAMgJ,MAAM,GAAG,GAAG,CAAC,CAAC;;IAEpB,OACEpM,GAAG,IAAIoD,SAAS,CAACyB,KAAK,GAAGuH,MAAM,IAC/BpM,GAAG,IAAIoD,SAAS,CAACwB,KAAK,GAAGwH,MAAM,IAC/BnM,GAAG,IAAImD,SAAS,CAAC2B,IAAI,GAAGqH,MAAM,IAC9BnM,GAAG,IAAImD,SAAS,CAAC0B,IAAI,GAAGsH,MAAM;EAElC,CAAC,EAAE,CAAChJ,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMiJ,aAAa,GAAGrO,WAAW,CAAC,MAAM;IACtC;IACA,MAAMsO,YAAY,GAAGhJ,WAAW,IAAI,CAAC;IACrC,MAAMiJ,cAAc,GAAGjJ,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAG,CAAC;IAC1D,MAAMkJ,WAAW,GAAGlJ,WAAW,GAAG,CAAC;;IAEnC;IACA,MAAMmJ,eAAe,GAAGvK,OAAO,CAACM,MAAM,CAACkK,CAAC,IAAI;MAC1C;MACA,MAAMC,aAAa,GAAGnK,MAAM,KAAK,KAAK,KACjBA,MAAM,KAAK,SAAS,GAAGkK,CAAC,CAAClF,SAAS,GAAGkF,CAAC,CAACtF,IAAI,KAAK5E,MAAM,CAAC;;MAE5E;MACA,MAAMoK,QAAQ,GAAGT,aAAa,CAACO,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,EAAEsM,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,CAAC;MAE5D,OAAOuM,aAAa,IAAIC,QAAQ;IAClC,CAAC,CAAC;;IAEF;IACA,OAAOH,eAAe,CAACvD,GAAG,CAAC/I,MAAM,IAAI;MACnC;MACA,MAAMC,QAAQ,GAAG;QAAEJ,GAAG,EAAEG,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;QAAEH,GAAG,EAAEE,MAAM,CAACC,QAAQ,CAAC,CAAC;MAAE,CAAC;MACrE,MAAMyM,UAAU,GAAG,CAAAzK,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEV,EAAE,MAAKvB,MAAM,CAACuB,EAAE;;MAEnD;MACA,IAAIoL,SAAS,GAAG,CAAC,CAAC;MAClB,IAAIC,WAAW,GAAG;QAAEC,MAAM,EAAE;MAAE,CAAC;MAE/B,QAAO1K,WAAW;QAChB,KAAK,OAAO;UACV;UACA,MAAM2K,YAAY,GAAG9M,MAAM,CAACiH,IAAI,KAAK,WAAW,IAAIjH,MAAM,CAACkJ,WAAW,GACpE,GAAG,GAAGlJ,MAAM,CAACsI,oBAAoB,CAACC,KAAK,GAAG,GAAG,GAC7C,GAAG,GAAGvI,MAAM,CAACsI,oBAAoB,CAACC,KAAK,GAAG,GAAG;UAE/C,MAAMwE,UAAU,GAAG/M,MAAM,CAACiH,IAAI,KAAK,WAAW,GAC5CjH,MAAM,CAACkJ,WAAW,GAAG,GAAG,GAAG,GAAG,GAC9BhD,IAAI,CAACiF,GAAG,CAAC,GAAG,EAAEjF,IAAI,CAACsF,GAAG,CAAC,GAAG,EAAE,GAAG,GAAGxL,MAAM,CAACmH,MAAM,GAAG,GAAG,CAAC,CAAC;UAEzD,MAAM6F,UAAU,GAAGhN,MAAM,CAACiH,IAAI,KAAK,WAAW,GAC5C,gBAAgB,GAChBjH,MAAM,CAACqH,SAAS,GAAG,kBAAkB,GAAG,mBAAmB;UAE7D,IAAIgF,WAAW,EAAE;YACf;YACAM,SAAS,GAAG;cACVM,IAAI,EAAEC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,UAAU,CAACC,MAAM;cAC1CC,SAAS,EAAEP,UAAU;cACrBQ,WAAW,EAAEV,YAAY;cACzBW,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfC,KAAK,EAAE3N,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC;cAC1C2G,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;UACH,CAAC,MAAM,IAAIzB,cAAc,EAAE;YACzB;YACA,MAAM0B,SAAS,GAAGf,UAAU,GAAG,CAAC;YAChCJ,SAAS,GAAG;cACVM,IAAI,EAAE,QAAQa,SAAS,MAAMA,SAAS,GAAC,CAAC,IAAIA,SAAS,OAAOA,SAAS,GAAC,CAAC,IAAIA,SAAS,IAAI;cAAE;cAC1FP,SAAS,EAAEP,UAAU;cACrBQ,WAAW,EAAEV,YAAY;cACzBW,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfK,QAAQ,EAAE/N,MAAM,CAAC6H,OAAO;cAAE;cAC1B8F,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;UACH,CAAC,MAAM;YACL;YACA,MAAMC,SAAS,GAAGf,UAAU,GAAG,CAAC;YAChCJ,SAAS,GAAG;cACVM,IAAI,EAAE,QAAQa,SAAS,MAAMA,SAAS,GAAC,CAAC,IAAIA,SAAS,QAAQA,SAAS,GAAC,CAAC,OAAOA,SAAS,GAAC,CAAC,IAAIA,SAAS,IAAI;cAAE;cAC7GP,SAAS,EAAEP,UAAU;cACrBQ,WAAW,EAAEV,YAAY;cACzBW,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfK,QAAQ,EAAE/N,MAAM,CAAC6H,OAAO;cAAE;cAC1B8F,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;UACH;UACA;QAEF,KAAK,OAAO;UACV;UACA,MAAMG,YAAY,GAAGhO,MAAM,CAACiH,IAAI,KAAK,WAAW,GAC9C,GAAG,GAAGjH,MAAM,CAACsI,oBAAoB,CAACE,KAAK,GAAG,GAAG,GAC7C,GAAG,GAAGxI,MAAM,CAACsI,oBAAoB,CAACE,KAAK,GAAG,GAAG;UAE/C,MAAMyF,UAAU,GAAGjO,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,SAAS,GAAG,SAAS;UAEtE,IAAIoF,WAAW,EAAE;YACf;YACAM,SAAS,GAAG;cACVM,IAAI,EAAEC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,UAAU,CAACC,MAAM;cAC1CC,SAAS,EAAEU,UAAU;cACrBT,WAAW,EAAEQ,YAAY;cACzBP,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfC,KAAK,EAAE3N,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC;cAC1C2G,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;;YAED;YACA,IAAI7N,MAAM,CAACiH,IAAI,KAAK,WAAW,EAAE;cAC/B,MAAMiH,UAAU,GAAGlO,MAAM,CAAC8H,KAAK,GAAG,EAAE;cACpC8E,WAAW,GAAG;gBACZC,MAAM,EAAEqB,UAAU;gBAClB7N,OAAO,EAAE;kBACPkN,SAAS,EAAEU,UAAU;kBACrBT,WAAW,EAAE,IAAI;kBACjBC,WAAW,EAAEQ,UAAU;kBACvBE,aAAa,EAAE,GAAG;kBAClBT,YAAY,EAAE;gBAChB;cACF,CAAC;YACH;UACF,CAAC,MAAM;YACL;YACA,MAAMU,cAAc,GAAGpO,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC;YAC1D0F,SAAS,GAAG;cACVM,IAAI,EAAE,QAAQmB,cAAc,MAAMA,cAAc,GAAC,CAAC,IAAIA,cAAc,QAAQA,cAAc,GAAC,CAAC,OAAOA,cAAc,GAAC,CAAC,IAAIA,cAAc,IAAI;cAAE;cAC3Ib,SAAS,EAAEU,UAAU;cACrBT,WAAW,EAAEQ,YAAY;cACzBP,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfK,QAAQ,EAAE/N,MAAM,CAAC6H,OAAO;cACxB8F,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;;YAED;YACA,IAAI1B,YAAY,EAAE;cAChB,MAAM+B,UAAU,GAAGlO,MAAM,CAACiH,IAAI,KAAK,WAAW,GAC5Cf,IAAI,CAACiF,GAAG,CAAC,GAAG,EAAEnL,MAAM,CAAC8H,KAAK,GAAG,GAAG,CAAC,GACjC5B,IAAI,CAACiF,GAAG,CAAC,GAAG,EAAEnL,MAAM,CAAC8H,KAAK,GAAG,EAAE,CAAC;cAElC8E,WAAW,GAAG;gBACZC,MAAM,EAAEqB,UAAU;gBAClB7N,OAAO,EAAE;kBACPkN,SAAS,EAAEU,UAAU;kBACrBT,WAAW,EAAE,IAAI;kBACjBC,WAAW,EAAEQ,UAAU;kBACvBE,aAAa,EAAE,GAAG;kBAClBT,YAAY,EAAE;gBAChB;cACF,CAAC;YACH,CAAC,MAAM,IAAItB,cAAc,IAAIpM,MAAM,CAACiH,IAAI,KAAK,WAAW,EAAE;cACxD,MAAMiH,UAAU,GAAGhI,IAAI,CAACiF,GAAG,CAAC,GAAG,EAAEnL,MAAM,CAAC8H,KAAK,GAAG,EAAE,CAAC;cACnD8E,WAAW,GAAG;gBACZC,MAAM,EAAEqB,UAAU;gBAClB7N,OAAO,EAAE;kBACPkN,SAAS,EAAEU,UAAU;kBACrBT,WAAW,EAAE,IAAI;kBACjBC,WAAW,EAAEQ,UAAU;kBACvBE,aAAa,EAAE,GAAG;kBAClBT,YAAY,EAAE;gBAChB;cACF,CAAC;YACH;UACF;UACA;QAEF,KAAK,OAAO;UACV;UACA,MAAMW,YAAY,GAAG,GAAG,GAAGrO,MAAM,CAACsI,oBAAoB,CAACG,KAAK,GAAG,GAAG;;UAElE;UACA,MAAM6F,UAAU,GAAGpI,IAAI,CAACgB,KAAK,CAAClH,MAAM,CAACsI,oBAAoB,CAACC,KAAK,GAAG,GAAG,CAAC;UACtE,MAAMgG,UAAU,GAAGrI,IAAI,CAACgB,KAAK,CAAClH,MAAM,CAACsI,oBAAoB,CAACE,KAAK,GAAG,GAAG,CAAC;UACtE,MAAMgG,UAAU,GAAGxO,MAAM,CAACqH,SAAS,GACjC,oBAAoB,GACpB,YAAYiH,UAAU,KAAKC,UAAU,GAAG;UAE1C,IAAIlC,WAAW,EAAE;YACf;YACAM,SAAS,GAAG;cACVM,IAAI,EAAEC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,UAAU,CAACC,MAAM;cAC1CC,SAAS,EAAEiB,UAAU;cACrBhB,WAAW,EAAEa,YAAY;cACzBZ,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfC,KAAK,EAAE3N,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC;cAC1C2G,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;UACH,CAAC,MAAM;YACL;YACA,MAAMY,cAAc,GAAG,CAAC;YACxB9B,SAAS,GAAG;cACVM,IAAI,EAAE,QAAQwB,cAAc,MAAMA,cAAc,GAAC,CAAC,IAAIA,cAAc,QAAQA,cAAc,GAAC,CAAC,OAAOA,cAAc,GAAC,CAAC,IAAIA,cAAc,IAAI;cAAE;cAC3IlB,SAAS,EAAEiB,UAAU;cACrBhB,WAAW,EAAEa,YAAY;cACzBZ,WAAW,EAAE,SAAS;cACtBC,YAAY,EAAE,CAAC;cACfK,QAAQ,EAAE/N,MAAM,CAAC6H,OAAO;cACxB8F,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3C,CAAC;UACH;;UAEA;UACA,IAAI1B,YAAY,EAAE;YAChB,MAAMuC,gBAAgB,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG1O,MAAM,CAACsI,oBAAoB,CAACG,KAAK,IAAI,IAAI;YAC7EmE,WAAW,GAAG;cACZC,MAAM,EAAE6B,gBAAgB;cACxBrO,OAAO,EAAE;gBACPkN,SAAS,EAAE,aAAa;gBACxBC,WAAW,EAAE,CAAC;gBACdC,WAAW,EAAEzN,MAAM,CAACqH,SAAS,GAAG,SAAS,GAAG,SAAS;gBACrD8G,aAAa,EAAE,GAAG;gBAClBT,YAAY,EAAE;cAChB;YACF,CAAC;UACH,CAAC,MAAM,IAAItB,cAAc,KAAKpM,MAAM,CAACiH,IAAI,KAAK,UAAU,IAAIjH,MAAM,CAACiH,IAAI,KAAK,WAAW,CAAC,EAAE;YACxF;YACA,MAAMyH,gBAAgB,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG1O,MAAM,CAACsI,oBAAoB,CAACG,KAAK,IAAI,GAAG;YAC5EmE,WAAW,GAAG;cACZC,MAAM,EAAE6B,gBAAgB;cACxBrO,OAAO,EAAE;gBACPkN,SAAS,EAAE,aAAa;gBACxBC,WAAW,EAAE,CAAC;gBACdC,WAAW,EAAEzN,MAAM,CAACqH,SAAS,GAAG,SAAS,GAAG,SAAS;gBACrD8G,aAAa,EAAE,GAAG;gBAClBT,YAAY,EAAE;cAChB;YACF,CAAC;UACH;UACA;QAEF;UACE;UACA,MAAMiB,WAAW,GAAG,CAAC;UACrBhC,SAAS,GAAG;YACVM,IAAI,EAAE,QAAQ0B,WAAW,MAAMA,WAAW,GAAC,CAAC,IAAIA,WAAW,QAAQA,WAAW,GAAC,CAAC,OAAOA,WAAW,GAAC,CAAC,IAAIA,WAAW,IAAI;YAAE;YACzHpB,SAAS,EAAE,SAAS;YACpBC,WAAW,EAAE,GAAG;YAChBC,WAAW,EAAE,SAAS;YACtBC,YAAY,EAAE,CAAC;YACfK,QAAQ,EAAE/N,MAAM,CAAC6H,OAAO;YACxB8F,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC;UAC3C,CAAC;UACD;MACJ;MAEA,oBACE7O,OAAA,CAACvB,KAAK,CAACwB,QAAQ;QAAA2P,QAAA,gBACb5P,OAAA,CAACG,cAAc;UACbc,QAAQ,EAAEA,QAAS;UACnBC,IAAI,EAAEyM,SAAU;UAChBvM,OAAO,EAAEA,CAAA,KAAM;YACbsB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE3B,MAAM,CAACqI,IAAI,EAAErI,MAAM,CAAC;YACnDkC,iBAAiB,CAAClC,MAAM,CAAC;UAC3B,CAAE;UACFM,SAAS,EAAE,IAAK;UAChBH,MAAM,EAAEuM,UAAU,GAAG,IAAI,GAAG1M,MAAM,CAACiH,IAAI,KAAK,WAAW,GAAG,GAAG,GAAG;QAAI;UAAA1G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrE,CAAC,EAEDkM,WAAW,CAACC,MAAM,GAAG,CAAC,iBACrB7N,OAAA,CAACK,cAAc;UACbwP,MAAM,EAAE5O,QAAS;UACjB4M,MAAM,EAAED,WAAW,CAACC,MAAO;UAC3BxM,OAAO,EAAEuM,WAAW,CAACvM;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CACF,EAEAV,MAAM,CAACiH,IAAI,KAAK,WAAW,IAAIjH,MAAM,CAACkJ,WAAW,IAAI/G,WAAW,KAAK,OAAO,IAAIgK,YAAY,iBAC3FnN,OAAA,CAACG,cAAc;UACbc,QAAQ,EAAE;YACRJ,GAAG,EAAEI,QAAQ,CAACJ,GAAG,GAAG,IAAI;YACxBC,GAAG,EAAEG,QAAQ,CAACH,GAAG,GAAG;UACtB,CAAE;UACFgP,KAAK,EAAE;YACLC,IAAI,EAAE,GAAG/O,MAAM,CAACiJ,KAAK,GAAG;YACxB9D,KAAK,EAAE,SAAS;YAChB6J,QAAQ,EAAE,KAAK;YACfC,UAAU,EAAE;UACd,CAAE;UACF/O,IAAI,EAAE;YACJ+M,IAAI,EAAE,CAAC;YAAE;YACTU,KAAK,EAAE,CAAC;YACRH,WAAW,EAAE,CAAC;YACdW,aAAa,EAAE;UACjB;QAAE;UAAA5N,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACF;MAAA,GAvCkBV,MAAM,CAACuB,EAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAwCd,CAAC;IAErB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACqB,OAAO,EAAEM,MAAM,EAAE2J,aAAa,EAAE/J,cAAc,EAAEE,WAAW,EAAEgB,WAAW,CAAC,CAAC;;EAE9E;EACA,MAAM+L,aAAa,GAAG;EACpB;EACA;IACE7G,IAAI,EAAE,eAAe;IACrB8G,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,GAAG;IACbvP,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,OAAO;IACZuP,MAAM,EAAE,aAAa;IACrBC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,GAAG;IAAE;IACXC,UAAU,EAAE,CACV;MAAC3P,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;EAEhC,CAAC,EACD;IACEuI,IAAI,EAAE,eAAe;IACrB8G,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,EAAE;IACZvP,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,OAAO;IACZuP,MAAM,EAAE,aAAa;IACrBC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,CAAC;IAAE;IACTC,UAAU,EAAE,CACV;MAAC3P,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;EAEhC,CAAC,EACD;IACEuI,IAAI,EAAE,WAAW;IACjB8G,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,GAAG;IACbvP,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,OAAO;IACZuP,MAAM,EAAE,aAAa;IACrBC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IAAE;IACVC,UAAU,EAAE,CACV;MAAC3P,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;EAEhC,CAAC,EACD;IAAEuI,IAAI,EAAE,YAAY;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EACpI;IAAElH,IAAI,EAAE,QAAQ;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAG,CAAC,EACjI;IAAElH,IAAI,EAAE,QAAQ;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC,EAC7H;IAAElH,IAAI,EAAE,OAAO;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAC;EAE7H;EACA;IAAElH,IAAI,EAAE,UAAU;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAC,EAC/H;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAC,EACjI;IAAElH,IAAI,EAAE,oBAAoB;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC1I;IAAElH,IAAI,EAAE,aAAa;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAChI;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC,EACjI;IAAElH,IAAI,EAAE,YAAY;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC;EAEjI;EACA;IAAElH,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAC,EACrI;IAAElH,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EACvI;IAAElH,IAAI,EAAE,QAAQ;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAChI;IAAElH,IAAI,EAAE,UAAU;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAClI;IAAElH,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,oBAAoB;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAC9I;IAAElH,IAAI,EAAE,UAAU;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC,EAChI;IAAElH,IAAI,EAAE,kBAAkB;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,MAAM;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EACrI;IAAElH,IAAI,EAAE,cAAc;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAClI;IAAElH,IAAI,EAAE,cAAc;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,oBAAoB;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAE7I;EACA;IAAElH,IAAI,EAAE,YAAY;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EACnI;IAAElH,IAAI,EAAE,MAAM;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAC7H;IAAElH,IAAI,EAAE,aAAa;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC,EAClI;IAAElH,IAAI,EAAE,cAAc;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC,EACnI;IAAElH,IAAI,EAAE,OAAO;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAG,CAAC,EACzH;IAAElH,IAAI,EAAE,SAAS;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC/H;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAE/H;EACA;IAAElH,IAAI,EAAE,cAAc;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,oBAAoB;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC9I;IAAElH,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAClI;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC/H;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC,EACjI;IAAElH,IAAI,EAAE,WAAW;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC,EAChI;IAAElH,IAAI,EAAE,cAAc;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC,EACpI;IAAElH,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,EAClI;IAAElH,IAAI,EAAE,gBAAgB;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAEnI;EACA;IACElH,IAAI,EAAE,oBAAoB;IAC1B8G,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,IAAI;IACdvP,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,OAAO;IACZuP,MAAM,EAAE,SAAS;IACjBC,QAAQ,EAAE,GAAG;IACbC,IAAI,EAAE,GAAG;IAAE;IACXC,UAAU,EAAE,CACV;MAAC3P,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;EAEhC,CAAC,EACD;IAAEuI,IAAI,EAAE,OAAO;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC9H;IAAElH,IAAI,EAAE,SAAS;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC,EAC9H;IAAElH,IAAI,EAAE,aAAa;IAAE8G,OAAO,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAEjI;EACA;IAAElH,IAAI,EAAE,QAAQ;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,IAAI;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;EAE9H;EACA;IAAElH,IAAI,EAAE,kBAAkB;IAAE8G,OAAO,EAAE,WAAW;IAAEC,QAAQ,EAAE,GAAG;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,SAAS;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAI,CAAC;EAEzI;EACA;IACElH,IAAI,EAAE,wBAAwB;IAC9B8G,OAAO,EAAE,SAAS;IAClBC,QAAQ,EAAE,IAAI;IACdvP,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE,OAAO;IACZuP,MAAM,EAAE,SAAS;IACjBC,QAAQ,EAAE,GAAG;IACbC,IAAI,EAAE,GAAG;IAAE;IACXC,UAAU,EAAE,CACV;MAAC3P,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC,EAC5B;MAACD,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;EAEhC,CAAC,EACD;IAAEuI,IAAI,EAAE,eAAe;IAAE8G,OAAO,EAAE,QAAQ;IAAEC,QAAQ,EAAE,EAAE;IAAEvP,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEuP,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,CACtI;;EAED;EACA,MAAME,eAAe,GAAG5R,WAAW,CAAC,MAAM;IACxC,IAAI,CAAC4E,aAAa,EAAE,OAAO,IAAI;;IAE/B;IACA,MAAMiN,gBAAgB,GAAGR,aAAa,CAAC7M,MAAM,CAACsN,IAAI,IAChD3D,aAAa,CAAC2D,IAAI,CAAC9P,GAAG,EAAE8P,IAAI,CAAC7P,GAAG,CAClC,CAAC;IAED,MAAMqM,YAAY,GAAGhJ,WAAW,IAAI,CAAC;IACrC,MAAMiJ,cAAc,GAAGjJ,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAG,CAAC;IAE1D,OAAOuM,gBAAgB,CACpB3G,GAAG,CAAChI,QAAQ,IAAI;MACf,MAAMd,QAAQ,GAAG;QAAEJ,GAAG,EAAEkB,QAAQ,CAAClB,GAAG;QAAEC,GAAG,EAAEiB,QAAQ,CAACjB;MAAI,CAAC;;MAEzD;MACA,MAAMyN,SAAS,GAAGxM,QAAQ,CAACsO,MAAM,KAAK,aAAa,GAC/C,SAAS,CAAC;MAAA,EACV,SAAS,CAAC,CAAC;;MAEf;MACA,MAAMO,YAAY,GAAG;QACnB3C,IAAI,EAAE,+BAA+B;QAAE;QACvCU,KAAK,EAAE,GAAG;QACVJ,SAAS,EAAEA,SAAS;QACpBC,WAAW,EAAE,GAAG;QAChBC,WAAW,EAAE,SAAS;QACtBC,YAAY,EAAE,CAAC;QACfK,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;;MAED;MACA,IAAI8B,iBAAiB;MAErB,IAAI1D,YAAY,EAAE;QAChB;QACA,IAAIpL,QAAQ,CAACyO,UAAU,EAAE;UACvB;UACAK,iBAAiB,gBACf7Q,OAAA,CAACO,eAAe;YACduQ,KAAK,EAAE/O,QAAQ,CAACyO,UAAW;YAC3BnP,OAAO,EAAE;cACPkN,SAAS,EAAEA,SAAS;cACpBC,WAAW,EAAE,GAAG;cAChBC,WAAW,EAAEF,SAAS;cACtBY,aAAa,EAAE,GAAG;cAClBT,YAAY,EAAE;YAChB;UAAE;YAAAnN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACF;QACH,CAAC,MAAM,IAAIK,QAAQ,CAACwO,IAAI,EAAE;UACxB;UACA;UACA,MAAMQ,kBAAkB,GAAGhP,QAAQ,CAACwO,IAAI,GAAG,OAAO;UAClD,MAAMS,cAAc,GAAG9J,IAAI,CAACwB,IAAI,CAACqI,kBAAkB,GAAG7J,IAAI,CAAC2D,EAAE,CAAC;UAE9DgG,iBAAiB,gBACf7Q,OAAA,CAACK,cAAc;YACbwP,MAAM,EAAE5O,QAAS;YACjB4M,MAAM,EAAEmD,cAAe;YACvB3P,OAAO,EAAE;cACPkN,SAAS,EAAEA,SAAS;cACpBC,WAAW,EAAE,GAAG;cAChBC,WAAW,EAAEF,SAAS;cACtBY,aAAa,EAAE,GAAG;cAClBT,YAAY,EAAE;YAChB;UAAE;YAAAnN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACF;QACH,CAAC,MAAM;UACL;UACA,IAAIuP,aAAa;UACjB,IAAIlP,QAAQ,CAACuO,QAAQ,EAAE;YACrBW,aAAa,GAAGlP,QAAQ,CAACuO,QAAQ,GAAG,GAAG;UACzC,CAAC,MAAM;YACLW,aAAa,GAAGlP,QAAQ,CAACqO,QAAQ,GAAG,GAAG;UACzC;UAEA,MAAMW,kBAAkB,GAAGE,aAAa,GAAG,OAAO;UAClD,MAAMD,cAAc,GAAG9J,IAAI,CAACwB,IAAI,CAACqI,kBAAkB,GAAG7J,IAAI,CAAC2D,EAAE,CAAC;UAE9DgG,iBAAiB,gBACf7Q,OAAA,CAACK,cAAc;YACbwP,MAAM,EAAE5O,QAAS;YACjB4M,MAAM,EAAEmD,cAAe;YACvB3P,OAAO,EAAE;cACPkN,SAAS,EAAEA,SAAS;cACpBC,WAAW,EAAE,GAAG;cAChBC,WAAW,EAAEF,SAAS;cACtBY,aAAa,EAAE,GAAG;cAClBT,YAAY,EAAE;YAChB;UAAE;YAAAnN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACF;QACH;MACF,CAAC,MAAM,IAAI0L,cAAc,EAAE;QACzB;QACA;QACA,IAAIS,MAAM;QAEV,IAAI9L,QAAQ,CAACwO,IAAI,EAAE;UACjB;UACA1C,MAAM,GAAG3G,IAAI,CAACwB,IAAI,CAAC3G,QAAQ,CAACwO,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5C,CAAC,MAAM,IAAIxO,QAAQ,CAACqO,QAAQ,GAAG,GAAG,EAAE;UAClCvC,MAAM,GAAG,KAAK,CAAC,CAAC;QAClB,CAAC,MAAM,IAAI9L,QAAQ,CAACqO,QAAQ,GAAG,GAAG,EAAE;UAClCvC,MAAM,GAAG,KAAK,CAAC,CAAC;QAClB,CAAC,MAAM;UACLA,MAAM,GAAG,IAAI,CAAC,CAAC;QACjB;QAEAgD,iBAAiB,gBACf7Q,OAAA,CAACK,cAAc;UACbwP,MAAM,EAAE5O,QAAS;UACjB4M,MAAM,EAAEA,MAAO;UACfxM,OAAO,EAAE;YACPkN,SAAS,EAAEA,SAAS;YACpBC,WAAW,EAAE,IAAI;YACjBC,WAAW,EAAEF,SAAS;YACtBY,aAAa,EAAE,GAAG;YAClBT,YAAY,EAAE;UAChB;QAAE;UAAAnN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACF;MACH,CAAC,MAAM;QACL;QACAmP,iBAAiB,GAAG,IAAI;MAC1B;MAEA,oBACE7Q,OAAA,CAACvB,KAAK,CAACwB,QAAQ;QAAA2P,QAAA,gBACb5P,OAAA,CAACG,cAAc;UACbc,QAAQ,EAAEA,QAAS;UACnBC,IAAI,EAAE0P,YAAa;UACnBxP,OAAO,EAAEA,CAAA,KAAM;YACbsB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEZ,QAAQ,CAACsH,IAAI,CAAC;;YAEhD;YACA,IAAI6H,WAAW,GAAGnP,QAAQ,CAACwO,IAAI;YAC/B,IAAI,CAACW,WAAW,EAAE;cAChB,IAAInP,QAAQ,CAACuO,QAAQ,EAAE;gBACrBY,WAAW,GAAGhK,IAAI,CAAC8B,KAAK,CAACjH,QAAQ,CAACuO,QAAQ,GAAG,GAAG,CAAC;cACnD,CAAC,MAAM;gBACLY,WAAW,GAAGhK,IAAI,CAAC8B,KAAK,CAACjH,QAAQ,CAACqO,QAAQ,GAAG,GAAG,CAAC;cACnD;YACF;YAEAlN,iBAAiB,CAAC;cAChBX,EAAE,EAAE,aAAaR,QAAQ,CAACsH,IAAI,EAAE;cAChCA,IAAI,EAAEtH,QAAQ,CAACsH,IAAI;cACnBpB,IAAI,EAAE,WAAW;cACjBG,IAAI,EAAErG,QAAQ,CAACoO,OAAO;cACtBlH,QAAQ,EAAElH,QAAQ,CAACoO,OAAO;cAC1BC,QAAQ,EAAErO,QAAQ,CAACqO,QAAQ;cAC3BC,MAAM,EAAEtO,QAAQ,CAACsO,MAAM;cACvBE,IAAI,EAAEW,WAAW;cACjBZ,QAAQ,EAAEvO,QAAQ,CAACuO,QAAQ;cAC3BW,aAAa,EAAE,CAAClP,QAAQ,CAACwO,IAAI;cAC7BY,UAAU,EAAE;YACd,CAAC,CAAC;UACJ,CAAE;UACFhQ,MAAM,EAAE;QAAG;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CAAC,EAEDmP,iBAAiB;MAAA,GAlCC,aAAa9O,QAAQ,CAACsH,IAAI,EAAE;QAAA9H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmCjC,CAAC;IAErB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC+B,aAAa,EAAEuJ,aAAa,EAAE7I,WAAW,EAAE+L,aAAa,CAAC,CAAC;;EAE9D;EACA,MAAMkB,mBAAmB,GAAGvS,WAAW,CAAC,MAAM;IAC5C,IAAI,CAAC4E,aAAa,IAAI,CAACE,iBAAiB,EAAE,OAAO,IAAI;;IAErD;IACA,IAAIQ,WAAW,GAAG,CAAC,EAAE,OAAO,IAAI;;IAEhC;IACA,MAAMuM,gBAAgB,GAAGR,aAAa,CAAC7M,MAAM,CAACsN,IAAI,IAChD3D,aAAa,CAAC2D,IAAI,CAAC9P,GAAG,EAAE8P,IAAI,CAAC7P,GAAG,CAClC,CAAC;IAED,MAAMqM,YAAY,GAAGhJ,WAAW,IAAI,CAAC;IAErC,OAAOuM,gBAAgB,CAAC3G,GAAG,CAAChI,QAAQ,IAAI;MACtC,MAAMd,QAAQ,GAAG;QAAEJ,GAAG,EAAEkB,QAAQ,CAAClB,GAAG;QAAEC,GAAG,EAAEiB,QAAQ,CAACjB;MAAI,CAAC;MACzD,MAAMuQ,mBAAmB,GAAG,KAAK,CAAC,CAAC;;MAEnC,oBACErR,OAAA,CAACK,cAAc;QAEbwP,MAAM,EAAE5O,QAAS;QACjB4M,MAAM,EAAEwD,mBAAoB;QAC5BhQ,OAAO,EAAE;UACPkN,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAErB,YAAY,GAAG,IAAI,GAAG,IAAI;UACvCsB,WAAW,EAAE,SAAS;UACtBU,aAAa,EAAEhC,YAAY,GAAG,GAAG,GAAG,GAAG;UACvCuB,YAAY,EAAEvB,YAAY,GAAG,CAAC,GAAG,GAAG;UACpCmE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;QAC3B;MAAE,GAVG,SAASvP,QAAQ,CAACsH,IAAI,EAAE;QAAA9H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAW9B,CAAC;IAEN,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC+B,aAAa,EAAEE,iBAAiB,EAAEqJ,aAAa,EAAE7I,WAAW,EAAE+L,aAAa,CAAC,CAAC;;EAEjF;EACA,MAAMqB,yBAAyB,GAAG1S,WAAW,CAAC,MAAM;IAClD;IACA,IAAIsF,WAAW,GAAG,CAAC,EAAE,OAAO,IAAI;IAEhC,MAAMqN,MAAM,GAAG,EAAE;;IAEjB;IACA,IAAI3N,eAAe,EAAE;MACnB;MACA,MAAM4N,aAAa,GAAG1O,OAAO,CAACM,MAAM,CAACkK,CAAC,IACpC,CAACA,CAAC,CAACtF,IAAI,KAAK,YAAY,IAAIsF,CAAC,CAACtF,IAAI,KAAK,QAAQ,IAAIsF,CAAC,CAACtF,IAAI,KAAK,WAAW,KACzEsF,CAAC,CAACxE,YAAY,IAAI,GAAG,IAAIwE,CAAC,CAACxE,YAAY,GAAG,IAAI,IAC9CiE,aAAa,CAACO,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,EAAEsM,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,CAC5C,CAAC;MAED,MAAMkM,YAAY,GAAGhJ,WAAW,IAAI,CAAC;MAErCsN,aAAa,CAACC,OAAO,CAAC1Q,MAAM,IAAI;QAC9B,MAAMC,QAAQ,GAAG;UAAEJ,GAAG,EAAEG,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;UAAEH,GAAG,EAAEE,MAAM,CAACC,QAAQ,CAAC,CAAC;QAAE,CAAC;;QAErE;QACA,MAAM0Q,YAAY,GAAG,EAAE;QACvB;QACA,MAAMC,gBAAgB,GAAGD,YAAY,GAAG,IAAI;QAE5CH,MAAM,CAAC5I,IAAI,cACT5I,OAAA,CAACK,cAAc;UAEbwP,MAAM,EAAE5O,QAAS;UACjB4M,MAAM,EAAE+D,gBAAiB;UACzBvQ,OAAO,EAAE;YACPkN,SAAS,EAAE,SAAS;YACpBC,WAAW,EAAErB,YAAY,GAAG,IAAI,GAAG,IAAI;YACvCsB,WAAW,EAAE,SAAS;YACtBU,aAAa,EAAEhC,YAAY,GAAG,GAAG,GAAG,GAAG;YACvCuB,YAAY,EAAEvB,YAAY,GAAG,CAAC,GAAG,GAAG;YACpCmE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;UAC3B;QAAE,GAVG,gBAAgBtQ,MAAM,CAACuB,EAAE,EAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWjC,CACH,CAAC;MACH,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIqC,oBAAoB,EAAE;MACxB;MACA,MAAM8N,YAAY,GAAG9O,OAAO,CAACM,MAAM,CAACkK,CAAC,IACnC,CAACA,CAAC,CAACtF,IAAI,KAAK,YAAY,IAAIsF,CAAC,CAACtF,IAAI,KAAK,QAAQ,IAAIsF,CAAC,CAACtF,IAAI,KAAK,WAAW,KACzEsF,CAAC,CAACxE,YAAY,IAAI,IAAI,IACtBiE,aAAa,CAACO,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,EAAEsM,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,CAC5C,CAAC;MAED,MAAMkM,YAAY,GAAGhJ,WAAW,IAAI,CAAC;MAErC0N,YAAY,CAACH,OAAO,CAAC1Q,MAAM,IAAI;QAC7B,MAAMC,QAAQ,GAAG;UAAEJ,GAAG,EAAEG,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;UAAEH,GAAG,EAAEE,MAAM,CAACC,QAAQ,CAAC,CAAC;QAAE,CAAC;;QAErE;QACA,MAAM0Q,YAAY,GAAG,EAAE;QACvB;QACA,MAAMC,gBAAgB,GAAGD,YAAY,GAAG,IAAI;QAE5CH,MAAM,CAAC5I,IAAI,cACT5I,OAAA,CAACK,cAAc;UAEbwP,MAAM,EAAE5O,QAAS;UACjB4M,MAAM,EAAE+D,gBAAiB;UACzBvQ,OAAO,EAAE;YACPkN,SAAS,EAAE,SAAS;YACpBC,WAAW,EAAErB,YAAY,GAAG,IAAI,GAAG,IAAI;YACvCsB,WAAW,EAAE,SAAS;YACtBU,aAAa,EAAEhC,YAAY,GAAG,GAAG,GAAG,GAAG;YACvCuB,YAAY,EAAEvB,YAAY,GAAG,CAAC,GAAG,GAAG;YACpCmE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;UAC3B;QAAE,GAVG,sBAAsBtQ,MAAM,CAACuB,EAAE,EAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWvC,CACH,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,OAAO8P,MAAM;EACf,CAAC,EAAE,CAAC3N,eAAe,EAAEE,oBAAoB,EAAEhB,OAAO,EAAEiK,aAAa,EAAE7I,WAAW,CAAC,CAAC;;EAEhF;EACAzF,SAAS,CAAC,MAAM;IACd;IACAwG,UAAU,CAACG,MAAM,GAAGJ,WAAW,CAAC9B,WAAW,CAAC;;IAE5C;IACA,IAAIP,MAAM,CAACmD,OAAO,EAAE;MAClBnD,MAAM,CAACmD,OAAO,CAAC+L,UAAU,CAAC5M,UAAU,CAAC;IACvC;EACF,CAAC,EAAE,CAAC/B,WAAW,EAAE+B,UAAU,CAAC,CAAC;;EAE7B;EACA,MAAM6M,SAAS,GAAGlT,WAAW,CAAEkL,GAAG,IAAK;IACrCrH,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCC,MAAM,CAACmD,OAAO,GAAGgE,GAAG;;IAEpB;IACAA,GAAG,CAAC+H,UAAU,CAAC;MACbxM,SAAS,EAAE,IAAI;MACfF,WAAW,EAAE,KAAK;MAClB4M,WAAW,EAAE,IAAI;MACjBC,sBAAsB,EAAE;IAC1B,CAAC,CAAC;;IAEF;IACApP,OAAO,CAACkD,OAAO,GAAG;MAChBmM,MAAM,EAAEA,CAAA,KAAM;QACZ,MAAMC,OAAO,GAAGpI,GAAG,CAACqI,OAAO,CAAC,CAAC,GAAG,CAAC;QACjCrI,GAAG,CAACsI,OAAO,CAACF,OAAO,CAAC;QACpB/N,cAAc,CAAC+N,OAAO,CAAC;MACzB,CAAC;MACDG,OAAO,EAAEA,CAAA,KAAM;QACb,MAAMH,OAAO,GAAGpI,GAAG,CAACqI,OAAO,CAAC,CAAC,GAAG,CAAC;QACjCrI,GAAG,CAACsI,OAAO,CAACF,OAAO,CAAC;QACpB/N,cAAc,CAAC+N,OAAO,CAAC;MACzB;IACF,CAAC;;IAED;IACA,IAAIpI,GAAG,CAACwI,SAAS,CAAC,CAAC,EAAE;MACnB,MAAMC,MAAM,GAAGzI,GAAG,CAACwI,SAAS,CAAC,CAAC;MAC9BrO,YAAY,CAAC;QACXuB,KAAK,EAAE+M,MAAM,CAACC,YAAY,CAAC,CAAC,CAAC5R,GAAG,CAAC,CAAC;QAClC8E,IAAI,EAAE6M,MAAM,CAACC,YAAY,CAAC,CAAC,CAAC3R,GAAG,CAAC,CAAC;QACjC4E,KAAK,EAAE8M,MAAM,CAACE,YAAY,CAAC,CAAC,CAAC7R,GAAG,CAAC,CAAC;QAClC+E,IAAI,EAAE4M,MAAM,CAACE,YAAY,CAAC,CAAC,CAAC5R,GAAG,CAAC;MAClC,CAAC,CAAC;;MAEF;MACA,MAAM+O,MAAM,GAAG9F,GAAG,CAAC4I,SAAS,CAAC,CAAC;MAC9B5N,mBAAmB,CAAC;QAClBlE,GAAG,EAAEgP,MAAM,CAAChP,GAAG,CAAC,CAAC;QACjBC,GAAG,EAAE+O,MAAM,CAAC/O,GAAG,CAAC;MAClB,CAAC,CAAC;IACJ;;IAEA;IACAsD,cAAc,CAAC2F,GAAG,CAACqI,OAAO,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,cAAc,GAAG/T,WAAW,CAAEgU,CAAC,IAAK;IACxC;IACAnQ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;IAE1B;IACA,IAAIM,cAAc,EAAE;MAClB;MACA;MACAC,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAM6P,kBAAkB,GAAGhU,OAAO,CAAC,MACjCiE,OAAO,CAACM,MAAM,CAACkK,CAAC,IAAI;IAClB,MAAMC,aAAa,GAAGnK,MAAM,KAAK,KAAK,KAClBA,MAAM,KAAK,SAAS,GAAGkK,CAAC,CAAClF,SAAS,GAAGkF,CAAC,CAACtF,IAAI,KAAK5E,MAAM,CAAC;IAC3E,OAAOmK,aAAa;EACtB,CAAC,CAAC,CAACrF,MAAM,EACT,CAACpF,OAAO,EAAEM,MAAM,CAAC,CAAC;;EAEpB;EACA,MAAM0P,gBAAgB,GAAGjU,OAAO,CAAC,MAC/BiE,OAAO,CAACM,MAAM,CAACkK,CAAC,IAAI;IAClB,MAAMC,aAAa,GAAGnK,MAAM,KAAK,KAAK,KACjBA,MAAM,KAAK,SAAS,GAAGkK,CAAC,CAAClF,SAAS,GAAGkF,CAAC,CAACtF,IAAI,KAAK5E,MAAM,CAAC;IAE5E,MAAMoK,QAAQ,GAAGT,aAAa,CAACO,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,EAAEsM,CAAC,CAACtM,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE5D,OAAOuM,aAAa,IAAIC,QAAQ;EAClC,CAAC,CAAC,CAACuF,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAAA,EAChB,CAACjQ,OAAO,EAAEM,MAAM,EAAE2J,aAAa,CAAC,CAAC;;EAEnC;EACA,MAAMiG,aAAa,GAAGnU,OAAO,CAAC,mBAC5BkB,OAAA,CAAAE,SAAA;IAAA0P,QAAA,gBACE5P,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,gBAC5B5P,OAAA;QAAIkT,SAAS,EAAC,6CAA6C;QAAAtD,QAAA,EAAC;MAAY;QAAArO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7E1B,OAAA;QAAKkT,SAAS,EAAC,2BAA2B;QAAAtD,QAAA,gBACxC5P,OAAA;UACEkT,SAAS,EAAE/P,WAAW,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG;UACnD/B,OAAO,EAAEA,CAAA,KAAMgC,cAAc,CAAC,OAAO,CAAE;UAAAwM,QAAA,gBAEvC5P,OAAA,CAACX,KAAK;YAAC8T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,SAEtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE/P,WAAW,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG;UACnD/B,OAAO,EAAEA,CAAA,KAAMgC,cAAc,CAAC,OAAO,CAAE;UAAAwM,QAAA,gBAEvC5P,OAAA,CAACV,KAAK;YAAC6T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,SAEtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE/P,WAAW,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG;UACnD/B,OAAO,EAAEA,CAAA,KAAMgC,cAAc,CAAC,OAAO,CAAE;UAAAwM,QAAA,gBAEvC5P,OAAA,CAACT,MAAM;YAAC4T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,SAEvC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1B,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,gBAC5B5P,OAAA;QAAIkT,SAAS,EAAC,6CAA6C;QAAAtD,QAAA,EAAC;MAAa;QAAArO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9E1B,OAAA;QAAKkT,SAAS,EAAC,yBAAyB;QAAAtD,QAAA,gBACtC5P,OAAA;UACEkT,SAAS,EAAE7P,MAAM,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAG;UAC5CjC,OAAO,EAAEA,CAAA,KAAMkC,SAAS,CAAC,KAAK,CAAE;UAAAsM,QAAA,EACjC;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE7P,MAAM,KAAK,YAAY,GAAG,QAAQ,GAAG,EAAG;UACnDjC,OAAO,EAAEA,CAAA,KAAMkC,SAAS,CAAC,YAAY,CAAE;UAAAsM,QAAA,EACxC;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE7P,MAAM,KAAK,UAAU,GAAG,QAAQ,GAAG,EAAG;UACjDjC,OAAO,EAAEA,CAAA,KAAMkC,SAAS,CAAC,UAAU,CAAE;UAAAsM,QAAA,EACtC;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE7P,MAAM,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAG;UAClDjC,OAAO,EAAEA,CAAA,KAAMkC,SAAS,CAAC,WAAW,CAAE;UAAAsM,QAAA,EACvC;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAE7P,MAAM,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAG;UAChDjC,OAAO,EAAEA,CAAA,KAAMkC,SAAS,CAAC,SAAS,CAAE;UAAAsM,QAAA,EACrC;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1B,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,gBAC5B5P,OAAA;QAAIkT,SAAS,EAAC,6CAA6C;QAAAtD,QAAA,EAAC;MAAmB;QAAArO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpF1B,OAAA;QAAKkT,SAAS,EAAC,qBAAqB;QAAAtD,QAAA,gBAClC5P,OAAA;UACEkT,SAAS,EAAEzP,aAAa,GAAG,QAAQ,GAAG,EAAG;UACzCrC,OAAO,EAAEA,CAAA,KAAM;YACb,MAAMgS,gBAAgB,GAAG,CAAC3P,aAAa;YACvCC,gBAAgB,CAAC0P,gBAAgB,CAAC;YAClC;YACA,IAAI,CAACA,gBAAgB,EAAE;cACrBxP,oBAAoB,CAAC,KAAK,CAAC;YAC7B;UACF,CAAE;UAAAgM,QAAA,gBAEF5P,OAAA,CAACR,IAAI;YAAC2T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACxB,EAAC+B,aAAa,GAAG,SAAS,GAAG,UAAU;QAAA;UAAAlC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAEvP,iBAAiB,GAAG,QAAQ,GAAG,EAAG;UAC7CvC,OAAO,EAAEA,CAAA,KAAM;YACbwC,oBAAoB,CAAC,CAACD,iBAAiB,CAAC;UAC1C,CAAE;UACF0P,QAAQ,EAAE,CAAC5P,aAAc;UACzB6P,KAAK,EAAE;YAAEC,OAAO,EAAE,CAAC9P,aAAa,GAAG,GAAG,GAAG;UAAE,CAAE;UAAAmM,QAAA,gBAE7C5P,OAAA,CAACX,KAAK;YAAC8T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,0BAEtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1B,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,gBAC5B5P,OAAA;QAAIkT,SAAS,EAAC,6CAA6C;QAAAtD,QAAA,EAAC;MAAgC;QAAArO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjG1B,OAAA;QAAKkT,SAAS,EAAC,qBAAqB;QAAAtD,QAAA,gBAClC5P,OAAA;UACEkT,SAAS,EAAErP,eAAe,GAAG,QAAQ,GAAG,EAAG;UAC3CzC,OAAO,EAAEA,CAAA,KAAM0C,kBAAkB,CAAC,CAACD,eAAe,CAAE;UAAA+L,QAAA,gBAEpD5P,OAAA,CAACX,KAAK;YAAC8T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,8BAEtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT1B,OAAA;UACEkT,SAAS,EAAEnP,oBAAoB,GAAG,QAAQ,GAAG,EAAG;UAChD3C,OAAO,EAAEA,CAAA,KAAM4C,uBAAuB,CAAC,CAACD,oBAAoB,CAAE;UAAA6L,QAAA,gBAE9D5P,OAAA,CAACX,KAAK;YAAC8T,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,4BAEtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN1B,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,gBAC5B5P,OAAA;QAAIkT,SAAS,EAAC,6CAA6C;QAAAtD,QAAA,EAAC;MAAiB;QAAArO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClF1B,OAAA;QAAKkT,SAAS,EAAC,qBAAqB;QAAAtD,QAAA,gBAClC5P,OAAA;UACEkT,SAAS,EAAEzO,iBAAiB,GAAG,QAAQ,GAAG,EAAG;UAC7CrD,OAAO,EAAEA,CAAA,KAAMsD,oBAAoB,CAAC,CAACD,iBAAiB,CAAE;UAAAmL,QAAA,gBAExD5P,OAAA,CAACf,IAAI;YAACkU,IAAI,EAAE,EAAG;YAACD,SAAS,EAAC;UAAM;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAClC+C,iBAAiB,GAAG,gBAAgB,GAAG,gBAAgB;QAAA;UAAAlD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC,eACT1B,OAAA;UAAKkT,SAAS,EAAC,eAAe;UAAAtD,QAAA,gBAC5B5P,OAAA;YAAMkT,SAAS,EAAC,cAAc;YAAAtD,QAAA,GAAC,SAAO,EAACjL,eAAe,EAAC,GAAC;UAAA;YAAApD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC/D1B,OAAA;YACEiI,IAAI,EAAC,OAAO;YACZuE,GAAG,EAAC,GAAG;YACPL,GAAG,EAAC,IAAI;YACRqH,KAAK,EAAE7O,eAAgB;YACvB8O,QAAQ,EAAGZ,CAAC,IAAKjO,kBAAkB,CAAC8O,QAAQ,CAACb,CAAC,CAACc,MAAM,CAACH,KAAK,CAAC,CAAE;YAC9DN,SAAS,EAAC;UAAoC;YAAA3R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CACH,EAAE,CAACyB,WAAW,EAAEE,MAAM,EAAEI,aAAa,EAAEE,iBAAiB,EAAEE,eAAe,EAAEE,oBAAoB,EAAEU,iBAAiB,EAAEE,eAAe,CAAC,CAAC;;EAEtI;EACA,oBACE3E,OAAA;IAAKkT,SAAS,EAAC,0BAA0B;IAAAtD,QAAA,gBACvC5P,OAAA;MAAKkT,SAAS,EAAC,eAAe;MAAAtD,QAAA,GAC3BrM,WAAW,iBACVvD,OAAA;QAAKkT,SAAS,EAAC,cAAc;QAAAtD,QAAA,gBAC3B5P,OAAA;UAAKkT,SAAS,EAAC,wCAAwC;UAAAtD,QAAA,gBACrD5P,OAAA;YAAIkT,SAAS,EAAC,wCAAwC;YAAAtD,QAAA,EAAC;UAAkB;YAAArO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9E1B,OAAA;YAAQoB,OAAO,EAAEA,CAAA,KAAMoC,cAAc,CAAC,KAAK,CAAE;YAAC0P,SAAS,EAAC,gCAAgC;YAAAtD,QAAA,eACtF5P,OAAA,CAACd,IAAI;cAACiU,IAAI,EAAE;YAAG;cAAA5R,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EAELuR,aAAa;MAAA;QAAA1R,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CACN,eAED1B,OAAA;QAAKkT,SAAS,EAAC,iBAAiB;QAAAtD,QAAA,GAC7B,CAACrM,WAAW,iBACXvD,OAAA;UACEkT,SAAS,EAAC,yEAAyE;UACnF9R,OAAO,EAAEA,CAAA,KAAMoC,cAAc,CAAC,IAAI,CAAE;UAAAoM,QAAA,eAEpC5P,OAAA,CAACd,IAAI;YAACiU,IAAI,EAAE;UAAG;YAAA5R,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ,CACT,EAGAY,SAAS,iBACRtC,OAAA;UAAKkT,SAAS,EAAC,oFAAoF;UAAAtD,QAAA,eACjG5P,OAAA;YAAKkT,SAAS,EAAC,cAAc;YAAAtD,QAAA,GAAC,6BAA2B,EAACtN,SAAS,CAACsR,OAAO;UAAA;YAAArS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/E,CACN,EAEA,CAACY,SAAS,IAAID,QAAQ,gBACrBrC,OAAA,CAACP,SAAS;UACRgB,iBAAiB,EAAEA,iBAAkB;UACrCoP,MAAM,EAAEjP,aAAc;UACtBiT,IAAI,EAAE,CAAE;UACRxS,OAAO,EAAE;YACP8D,gBAAgB,EAAE,IAAI;YACtBC,WAAW,EAAE,KAAK;YAClBC,MAAM,EAAEJ,WAAW,CAAC9B,WAAW,CAAC;YAChCmC,SAAS,EAAE;UACb,CAAE;UACFwO,MAAM,EAAE/B,SAAU;UAAAnC,QAAA,GAGjB7M,OAAO,CAACoF,MAAM,GAAG,CAAC,IAAI+E,aAAa,CAAC,CAAC,EACrCzJ,aAAa,IAAIgN,eAAe,CAAC,CAAC,EAClC9M,iBAAiB,IAAIyN,mBAAmB,CAAC,CAAC,EAC1C,CAACvN,eAAe,IAAIE,oBAAoB,KAAKwN,yBAAyB,CAAC,CAAC;QAAA,GALpElN,MAAM;UAAA9C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMF,CAAC,GACV,CAACY,SAAS,gBACZtC,OAAA;UAAKkT,SAAS,EAAC,uEAAuE;UAAAtD,QAAA,eACpF5P,OAAA;YAAKkT,SAAS,EAAC,SAAS;YAAAtD,QAAA,EAAC;UAAc;YAAArO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,GACJ,IAAI,eAER1B,OAAA;UAAKkT,SAAS,EAAC,sCAAsC;UAAAtD,QAAA,gBACnD5P,OAAA;YACEoB,OAAO,EAAEA,CAAA,KAAMyB,OAAO,CAACkD,OAAO,IAAIlD,OAAO,CAACkD,OAAO,CAACmM,MAAM,CAAC,CAAE;YAC3DgB,SAAS,EAAC,wDAAwD;YAAAtD,QAAA,eAElE5P,OAAA,CAACb,MAAM;cAACgU,IAAI,EAAE,EAAG;cAACD,SAAS,EAAC;YAAe;cAAA3R,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,eACT1B,OAAA;YACEoB,OAAO,EAAEA,CAAA,KAAMyB,OAAO,CAACkD,OAAO,IAAIlD,OAAO,CAACkD,OAAO,CAACuM,OAAO,CAAC,CAAE;YAC5DY,SAAS,EAAC,wDAAwD;YAAAtD,QAAA,eAElE5P,OAAA,CAACZ,OAAO;cAAC+T,IAAI,EAAE,EAAG;cAACD,SAAS,EAAC;YAAe;cAAA3R,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGN1B,OAAA;UACEoB,OAAO,EAAEA,CAAA,KAAM;YACb;YACA8B,iBAAiB,CAAC,IAAI,CAAC;YACvBQ,gBAAgB,CAAC,KAAK,CAAC;YACvBE,oBAAoB,CAAC,KAAK,CAAC;YAC3BE,kBAAkB,CAAC,KAAK,CAAC;YACzBE,uBAAuB,CAAC,KAAK,CAAC;YAC9BU,oBAAoB,CAAC,KAAK,CAAC;;YAE3B;YACAtB,cAAc,CAAC,OAAO,CAAC;YACvBE,SAAS,CAAC,KAAK,CAAC;YAChBsB,kBAAkB,CAAC,EAAE,CAAC;;YAEtB;YACA,IAAIhC,MAAM,CAACmD,OAAO,EAAE;cAClBnD,MAAM,CAACmD,OAAO,CAACgO,SAAS,CAACnT,aAAa,CAAC;cACvCgC,MAAM,CAACmD,OAAO,CAACsM,OAAO,CAAC,CAAC,CAAC;cACzBjO,cAAc,CAAC,CAAC,CAAC;cACjBW,mBAAmB,CAACnE,aAAa,CAAC;YACpC;;YAEA;YACA0D,SAAS,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;;YAErB;YACAwP,UAAU,CAAC,MAAM;cACf,IAAIpR,MAAM,CAACmD,OAAO,IAAInD,MAAM,CAACmD,OAAO,CAACkO,eAAe,EAAE;gBACpDrR,MAAM,CAACmD,OAAO,CAACkO,eAAe,CAACC,KAAK,CAAC,CAAC;cACxC;YACF,CAAC,EAAE,EAAE,CAAC;UACR,CAAE;UACFZ,KAAK,EAAE;YACLrS,QAAQ,EAAE,UAAU;YACpBkT,MAAM,EAAE,MAAM;YACdC,IAAI,EAAE,MAAM;YACZC,eAAe,EAAE,SAAS;YAC1BlO,KAAK,EAAE,SAAS;YAChBmO,OAAO,EAAE,UAAU;YACnBC,YAAY,EAAE,KAAK;YACnBC,MAAM,EAAE,MAAM;YACdvE,UAAU,EAAE,KAAK;YACjBwE,MAAM,EAAE,SAAS;YACjBC,SAAS,EAAE,8BAA8B;YACzCvT,MAAM,EAAE,IAAI;YACZ6O,QAAQ,EAAE;UACZ,CAAE;UAAAJ,QAAA,EACH;QAED;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAERuB,cAAc,iBACbjD,OAAA;UAAKkT,SAAS,EAAC,wCAAwC;UAACI,KAAK,EAAE;YAAEnS,MAAM,EAAE;UAAK,CAAE;UAAAyO,QAAA,gBAC9E5P,OAAA;YAAKkT,SAAS,EAAC,wCAAwC;YAAAtD,QAAA,gBACrD5P,OAAA;cAAIkT,SAAS,EAAC,wCAAwC;cAAAtD,QAAA,EAAE3M,cAAc,CAACoG;YAAI;cAAA9H,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjF1B,OAAA;cACEoB,OAAO,EAAEA,CAAA,KAAM8B,iBAAiB,CAAC,IAAI,CAAE;cACvCgQ,SAAS,EAAC,gCAAgC;cAAAtD,QAAA,EAC3C;YAED;cAAArO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACN1B,OAAA;YAAKkT,SAAS,EAAC,uBAAuB;YAAAtD,QAAA,EACnC3M,cAAc,CAACkO,UAAU,gBACxBnR,OAAA,CAAAE,SAAA;cAAA0P,QAAA,gBACE5P,OAAA;gBAAA4P,QAAA,EAAK;cAAe;gBAAArO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1B1B,OAAA;gBAAA4P,QAAA,GAAK,WAAS,EAAC3M,cAAc,CAACmF,IAAI;cAAA;gBAAA7G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACzC1B,OAAA;gBAAA4P,QAAA,GAAK,YAAU,EAAC3M,cAAc,CAACmN,QAAQ,EAAC,KAAG;cAAA;gBAAA7O,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EAChDuB,cAAc,CAACqN,QAAQ,iBAAItQ,OAAA;gBAAA4P,QAAA,GAAK,YAAU,EAAC3M,cAAc,CAACqN,QAAQ;cAAA;gBAAA/O,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EACzEuB,cAAc,CAACsN,IAAI,iBAClBvQ,OAAA;gBAAA4P,QAAA,GAAK,QACG,EAAC3M,cAAc,CAACsN,IAAI,EAAC,SAC3B,EAACtN,cAAc,CAACgO,aAAa,iBAAIjR,OAAA;kBAAMkT,SAAS,EAAC,gBAAgB;kBAAAtD,QAAA,EAAC;gBAAO;kBAAArO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7E,CACN,eACD1B,OAAA;gBAAA4P,QAAA,GAAK,UAAQ,EAAC3M,cAAc,CAACoN,MAAM,CAACsE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG3R,cAAc,CAACoN,MAAM,CAAC2C,KAAK,CAAC,CAAC,CAAC;cAAA;gBAAAzR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,eACnG,CAAC,gBAEH1B,OAAA,CAAAE,SAAA;cAAA0P,QAAA,gBACE5P,OAAA;gBAAA4P,QAAA,GAAK,QAAM,EAAC3M,cAAc,CAACmF,IAAI;cAAA;gBAAA7G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtC1B,OAAA;gBAAA4P,QAAA,GAAK,QAAM,EAAC3M,cAAc,CAACgF,IAAI;cAAA;gBAAA1G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EACrCuB,cAAc,CAACkH,KAAK,iBAAInK,OAAA;gBAAA4P,QAAA,GAAK,SAAO,EAAC3M,cAAc,CAACkH,KAAK;cAAA;gBAAA5I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAChEuB,cAAc,CAACmH,WAAW,iBAAIpK,OAAA;gBAAA4P,QAAA,GAAK,eAAa,EAAC3M,cAAc,CAACmH,WAAW;cAAA;gBAAA7I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACnF1B,OAAA;gBAAA4P,QAAA,GAAK,YAAU,EAAC3M,cAAc,CAACgG,QAAQ;cAAA;gBAAA1H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC9C1B,OAAA;gBAAA4P,QAAA,GAAK,UAAQ,EAAC3M,cAAc,CAACkF,MAAM,EAAC,GAAC;cAAA;gBAAA5G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3C1B,OAAA;gBAAA4P,QAAA,GAAK,SAAO,EAAC3M,cAAc,CAAC6F,KAAK,EAAC,QAAM;cAAA;gBAAAvH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9C1B,OAAA;gBAAA4P,QAAA,GAAK,WAAS,EAAC3M,cAAc,CAAC4F,OAAO,EAAC,MAAC;cAAA;gBAAAtH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EAC5CuB,cAAc,CAAC8F,YAAY,iBAAI/I,OAAA;gBAAA4P,QAAA,GAAK,iBAAe,EAAC3M,cAAc,CAAC8F,YAAY,EAAC,KAAG;cAAA;gBAAAxH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EACzFuB,cAAc,CAACgF,IAAI,KAAK,WAAW,iBAClCjI,OAAA;gBAAA4P,QAAA,GAAK,SAAO,EAAC3M,cAAc,CAACgH,KAAK,EAAC,KAAG,EAAChH,cAAc,CAACiH,WAAW,GAAG,WAAW,GAAG,UAAU,EAAC,GAAC;cAAA;gBAAA3I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CACnG,eACD1B,OAAA;gBAAKkT,SAAS,EAAC,MAAM;gBAAAtD,QAAA,EAAC;cAAqB;gBAAArO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjD1B,OAAA;gBAAKkT,SAAS,EAAC,wBAAwB;gBAAAtD,QAAA,gBACrC5P,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,EAAC;gBAAM;kBAAArO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC5C1B,OAAA;kBAAKkT,SAAS,EAAC,qBAAqB;kBAAAtD,QAAA,eAClC5P,OAAA;oBAAKkT,SAAS,EAAC,gBAAgB;oBAACI,KAAK,EAAE;sBAAC5S,KAAK,EAAE,GAAGuC,cAAc,CAACqG,oBAAoB,CAACC,KAAK,GAAG,GAAG,GAAG;sBAAE8K,eAAe,EAAE;oBAAS;kBAAE;oBAAA9S,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtI,CAAC,eACN1B,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,GAAE1I,IAAI,CAAC8B,KAAK,CAAC/F,cAAc,CAACqG,oBAAoB,CAACC,KAAK,GAAG,GAAG,CAAC,EAAC,GAAC;gBAAA;kBAAAhI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjG,CAAC,eACN1B,OAAA;gBAAKkT,SAAS,EAAC,wBAAwB;gBAAAtD,QAAA,gBACrC5P,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,EAAC;gBAAM;kBAAArO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC5C1B,OAAA;kBAAKkT,SAAS,EAAC,qBAAqB;kBAAAtD,QAAA,eAClC5P,OAAA;oBAAKkT,SAAS,EAAC,gBAAgB;oBAACI,KAAK,EAAE;sBAAC5S,KAAK,EAAE,GAAGuC,cAAc,CAACqG,oBAAoB,CAACE,KAAK,GAAG,GAAG,GAAG;sBAAE6K,eAAe,EAAE;oBAAS;kBAAE;oBAAA9S,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtI,CAAC,eACN1B,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,GAAE1I,IAAI,CAAC8B,KAAK,CAAC/F,cAAc,CAACqG,oBAAoB,CAACE,KAAK,GAAG,GAAG,CAAC,EAAC,GAAC;gBAAA;kBAAAjI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjG,CAAC,eACN1B,OAAA;gBAAKkT,SAAS,EAAC,wBAAwB;gBAAAtD,QAAA,gBACrC5P,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,EAAC;gBAAM;kBAAArO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC5C1B,OAAA;kBAAKkT,SAAS,EAAC,qBAAqB;kBAAAtD,QAAA,eAClC5P,OAAA;oBAAKkT,SAAS,EAAC,gBAAgB;oBAACI,KAAK,EAAE;sBAAC5S,KAAK,EAAE,GAAGuC,cAAc,CAACqG,oBAAoB,CAACG,KAAK,GAAG,GAAG,GAAG;sBAAE4K,eAAe,EAAE;oBAAS;kBAAE;oBAAA9S,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtI,CAAC,eACN1B,OAAA;kBAAMkT,SAAS,EAAC,cAAc;kBAAAtD,QAAA,GAAE1I,IAAI,CAAC8B,KAAK,CAAC/F,cAAc,CAACqG,oBAAoB,CAACG,KAAK,GAAG,GAAG,CAAC,EAAC,GAAC;gBAAA;kBAAAlI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjG,CAAC;YAAA,eACN;UACH;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1B,OAAA;MAAKkT,SAAS,EAAC,mDAAmD;MAAAtD,QAAA,eAChE5P,OAAA;QAAKkT,SAAS,EAAC,kCAAkC;QAAAtD,QAAA,gBAC/C5P,OAAA,CAAChB,IAAI;UAACmU,IAAI,EAAE,EAAG;UAACD,SAAS,EAAC;QAAoB;UAAA3R,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjD1B,OAAA;UAAMkT,SAAS,EAAC,eAAe;UAAAtD,QAAA,GAAC,uBAAqB,EAACvM,MAAM,KAAK,KAAK,GAAG,GAAG,GAAGN,OAAO,CAACM,MAAM,CAACkK,CAAC,IAAIlK,MAAM,KAAK,SAAS,GAAGkK,CAAC,CAAClF,SAAS,GAAGkF,CAAC,CAACtF,IAAI,KAAK5E,MAAM,CAAC,CAAC8E,MAAM,EAAC,cAAY,EAAChF,WAAW,EAAC,gBAAc,EAACgB,WAAW;QAAA;UAAA5C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EAC5N+B,aAAa,iBAAIzD,OAAA;UAAMkT,SAAS,EAAC,qBAAqB;UAAAtD,QAAA,EAAC;QAAkB;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAChFiC,iBAAiB,IAAIF,aAAa,iBAAIzD,OAAA;UAAMkT,SAAS,EAAC,mBAAmB;UAAAtD,QAAA,EAAC;QAAwB;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EACzGmC,eAAe,iBAAI7D,OAAA;UAAMkT,SAAS,EAAC,oBAAoB;UAAAtD,QAAA,EAAC;QAAyB;UAAArO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EACxF+C,iBAAiB,iBAAIzE,OAAA;UAAMkT,SAAS,EAAC,qBAAqB;UAAAtD,QAAA,GAAC,qBAAmB,EAACjL,eAAe,EAAC,IAAE;QAAA;UAAApD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAU,EAAA,CAh4DKD,gBAAgB;EAAA,QAEYzC,cAAc;AAAA;AAAAmV,GAAA,GAF1C1S,gBAAgB;AAk4DtB,eAAeA,gBAAgB;AAAC,IAAA/B,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAmB,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAA2S,GAAA;AAAAC,YAAA,CAAA1U,EAAA;AAAA0U,YAAA,CAAAxU,GAAA;AAAAwU,YAAA,CAAAtU,GAAA;AAAAsU,YAAA,CAAAnT,GAAA;AAAAmT,YAAA,CAAAjT,GAAA;AAAAiT,YAAA,CAAA9S,GAAA;AAAA8S,YAAA,CAAA5S,GAAA;AAAA4S,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}