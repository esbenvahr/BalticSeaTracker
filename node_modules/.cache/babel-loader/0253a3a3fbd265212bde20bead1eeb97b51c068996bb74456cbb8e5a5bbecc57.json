{"ast":null,"code":"var _jsxFileName = \"/Users/esbenvahr/Desktop/NEW FINAL/app/src/components/BalticSeaTracker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback, useMemo, memo } from 'react';\nimport { Info, Ship, Menu, ZoomIn, ZoomOut, Radar, Waves, Layers, Wind } from 'lucide-react';\nimport '../styles/palantir-theme.css';\nimport { GoogleMap, Marker, Circle, Polygon } from '@react-google-maps/api';\n\n// Memoized components for better performance\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MemoizedMarker = /*#__PURE__*/memo(Marker);\n_c = MemoizedMarker;\nconst MemoizedCircle = /*#__PURE__*/memo(Circle);\n_c2 = MemoizedCircle;\nconst MemoizedPolygon = /*#__PURE__*/memo(Polygon);\n_c3 = MemoizedPolygon;\nconst BalticSeaTracker = () => {\n  _s();\n  const [vessels, setVessels] = useState([]);\n  const [selectedVessel, setSelectedVessel] = useState(null);\n  const [filter, setFilter] = useState('all');\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [displayMode, setDisplayMode] = useState('radar'); // 'radar', 'sonar', or 'fused'\n  const [showWindFarms, setShowWindFarms] = useState(false);\n  const [showRadarCoverage, setShowRadarCoverage] = useState(false); // New state for radar coverage\n  const [showVesselRadar, setShowVesselRadar] = useState(false); // State for vessel radar coverage (300-2999 GT)\n  const [showLargeVesselRadar, setShowLargeVesselRadar] = useState(false); // New state for large vessel radar (>3000 GT)\n  const [mapBounds, setMapBounds] = useState(null); // Track current map bounds\n  const [currentZoom, setCurrentZoom] = useState(6); // Track current zoom level\n  const [mapKey, setMapKey] = useState(Date.now()); // Add key to force remount of map components\n  const [simulationEnabled, setSimulationEnabled] = useState(false); // Track if vessel movement simulation is enabled\n  const [simulationSpeed, setSimulationSpeed] = useState(10); // Simulation speed multiplier (default 10x)\n  const animationFrameRef = useRef(null); // Reference to store animation frame ID\n  const lastUpdateTimeRef = useRef(Date.now()); // Reference to store last update time\n\n  const zoomRef = useRef(null);\n  const mapRef = useRef(null);\n\n  // Google Maps settings\n  const mapCenter = {\n    lat: 59,\n    lng: 19\n  }; // Center on Baltic Sea\n  const mapZoom = 6;\n\n  // Add state to track current map center\n  const [currentMapCenter, setCurrentMapCenter] = useState(mapCenter);\n\n  // Memoize map style to prevent recalculations\n  const mapStyle = useMemo(() => getMapStyle(displayMode), [displayMode]);\n  const mapOptions = useMemo(() => ({\n    disableDefaultUI: true,\n    zoomControl: false,\n    styles: mapStyle,\n    draggable: true,\n    // Ensure map is draggable\n    // Hide cities with population under 5000\n    restrictions: {\n      latLngBounds: {\n        north: 66.0,\n        south: 54.0,\n        east: 30.0,\n        west: 9.0\n      }\n    }\n  }), [mapStyle]);\n\n  // Instead of using useJsApiLoader, we assume Google Maps is already loaded\n  const isLoaded = true;\n  const loadError = null;\n\n  // Create a ref to track if Google Maps loaded\n  const mapsLoadedRef = useRef(false);\n\n  // Log any errors with Google Maps loading\n  useEffect(() => {\n    if (window.google && window.google.maps && !mapsLoadedRef.current) {\n      console.log('Google Maps API loaded successfully');\n      mapsLoadedRef.current = true;\n    } else if (!window.google || !window.google.maps) {\n      console.error('Error loading Google Maps: API not available');\n    }\n  }, []);\n\n  // Function to get map style based on display mode\n  function getMapStyle(mode) {\n    switch (mode) {\n      case 'radar':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#212121\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#212121\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#746855\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#181818\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#3d3d3d\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      case 'sonar':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#003545\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#003545\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#00C8FF\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#001E29\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#00E5FF\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      case 'fused':\n        return [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#142639\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#142639\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#3D85C6\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#0A1C2A\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#4a90e2\"\n          }]\n        }, {\n          featureType: \"poi\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"transit\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }, {\n          featureType: \"road\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Hide smaller cities/towns\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        },\n        // Only show major cities\n        {\n          featureType: \"administrative.locality\",\n          elementType: \"labels\",\n          filter: [\">=\", [\"get\", \"population\"], 10000],\n          stylers: [{\n            visibility: \"on\"\n          }]\n        }];\n      default:\n        return [];\n    }\n  }\n\n  // Function to generate a random coordinate within Baltic Sea\n  const randomCoordinate = () => {\n    // Combine shipping lanes with wider dispersal areas\n    const shippingLanes = [\n    // Main shipping lanes (lower weight than before to reduce clustering)\n    // Danish Straits to St. Petersburg\n    {\n      minLat: 54.5,\n      maxLat: 55.2,\n      minLng: 10.8,\n      maxLng: 13.0,\n      weight: 5\n    },\n    // Danish Straits entrance\n    {\n      minLat: 55.0,\n      maxLat: 55.8,\n      minLng: 12.8,\n      maxLng: 14.5,\n      weight: 4\n    },\n    // Route east of Denmark\n    {\n      minLat: 55.3,\n      maxLat: 56.2,\n      minLng: 14.5,\n      maxLng: 16.5,\n      weight: 4\n    },\n    // Southern Sweden coast\n    {\n      minLat: 55.0,\n      maxLat: 56.0,\n      minLng: 16.5,\n      maxLng: 18.5,\n      weight: 3\n    },\n    // Midway to Gotland\n    {\n      minLat: 57.0,\n      maxLat: 58.2,\n      minLng: 18.5,\n      maxLng: 20.0,\n      weight: 4\n    },\n    // North of Gotland\n    {\n      minLat: 58.5,\n      maxLat: 59.5,\n      minLng: 20.0,\n      maxLng: 22.0,\n      weight: 3\n    },\n    // Approach to Gulf of Finland\n    {\n      minLat: 59.2,\n      maxLat: 59.8,\n      minLng: 22.0,\n      maxLng: 24.5,\n      weight: 5\n    },\n    // Gulf of Finland western part\n    {\n      minLat: 59.7,\n      maxLat: 60.2,\n      minLng: 24.5,\n      maxLng: 28.0,\n      weight: 4\n    },\n    // Gulf of Finland eastern part\n\n    // Port approaches - reduced weights to prevent clustering\n    {\n      minLat: 60.0,\n      maxLat: 60.5,\n      minLng: 24.5,\n      maxLng: 25.0,\n      weight: 3\n    },\n    // Helsinki\n    {\n      minLat: 60.2,\n      maxLat: 60.5,\n      minLng: 22.0,\n      maxLng: 22.5,\n      weight: 3\n    },\n    // Turku\n    {\n      minLat: 55.3,\n      maxLat: 56.3,\n      minLng: 12.5,\n      maxLng: 13.0,\n      weight: 3\n    },\n    // Malmö\n    {\n      minLat: 58.5,\n      maxLat: 59.5,\n      minLng: 16.5,\n      maxLng: 18.5,\n      weight: 3\n    },\n    // Stockholm\n    {\n      minLat: 54.3,\n      maxLat: 54.8,\n      minLng: 18.3,\n      maxLng: 19.0,\n      weight: 3\n    },\n    // Gdańsk\n    {\n      minLat: 54.0,\n      maxLat: 54.5,\n      minLng: 13.0,\n      maxLng: 14.5,\n      weight: 3\n    },\n    // Rostock\n\n    // Wider dispersal areas - these ensure ships are spread throughout the entire sea\n    // Central Baltic - large dispersal areas\n    {\n      minLat: 56.0,\n      maxLat: 58.0,\n      minLng: 17.0,\n      maxLng: 20.0,\n      weight: 5\n    },\n    // Central Baltic wider area\n    {\n      minLat: 57.5,\n      maxLat: 59.5,\n      minLng: 19.0,\n      maxLng: 22.0,\n      weight: 5\n    },\n    // Eastern Baltic wider area\n\n    // Gulf of Bothnia - more dispersed\n    {\n      minLat: 60.0,\n      maxLat: 62.0,\n      minLng: 18.0,\n      maxLng: 21.0,\n      weight: 4\n    },\n    // Southern Bothnia dispersed\n    {\n      minLat: 62.0,\n      maxLat: 65.0,\n      minLng: 18.0,\n      maxLng: 23.0,\n      weight: 3\n    },\n    // Northern Bothnia dispersed\n\n    // Western Baltic - more dispersed\n    {\n      minLat: 54.0,\n      maxLat: 56.0,\n      minLng: 12.0,\n      maxLng: 15.0,\n      weight: 4\n    },\n    // Western Baltic dispersed\n    {\n      minLat: 54.0,\n      maxLat: 57.0,\n      minLng: 15.0,\n      maxLng: 18.0,\n      weight: 5\n    },\n    // South-central Baltic dispersed\n\n    // Other dispersed areas to ensure wider coverage\n    {\n      minLat: 54.0,\n      maxLat: 55.5,\n      minLng: 18.0,\n      maxLng: 20.0,\n      weight: 3\n    },\n    // Southern Baltic dispersed\n    {\n      minLat: 56.5,\n      maxLat: 58.0,\n      minLng: 15.0,\n      maxLng: 17.0,\n      weight: 3\n    },\n    // Western Gotland dispersed\n    {\n      minLat: 57.0,\n      maxLat: 58.5,\n      minLng: 20.0,\n      maxLng: 22.0,\n      weight: 3\n    },\n    // Eastern Gotland dispersed\n    {\n      minLat: 57.0,\n      maxLat: 58.5,\n      minLng: 22.0,\n      maxLng: 24.0,\n      weight: 3\n    } // Gulf of Riga dispersed\n    ];\n\n    // Calculate total weight\n    const totalWeight = shippingLanes.reduce((sum, lane) => sum + lane.weight, 0);\n\n    // Pick a random lane with weighting\n    let randomPoint = Math.random() * totalWeight;\n    let selectedLane = shippingLanes[0];\n    let cumulativeWeight = 0;\n    for (const lane of shippingLanes) {\n      cumulativeWeight += lane.weight;\n      if (randomPoint <= cumulativeWeight) {\n        selectedLane = lane;\n        break;\n      }\n    }\n\n    // Increase the spread factor to ensure better dispersal within areas\n    // Create a much more randomized distribution within the selected area\n    // rather than clustering toward the center\n\n    // Get random point within the selected area with high dispersal\n    // Avoiding the tendency to cluster in the center\n    return [selectedLane.minLng + Math.random() * (selectedLane.maxLng - selectedLane.minLng),\n    // longitude - fully random within area\n    selectedLane.minLat + Math.random() * (selectedLane.maxLat - selectedLane.minLat) // latitude - fully random within area\n    ];\n  };\n\n  // Generate 300 simulated vessels with realistic properties (reduced from 1000)\n  const generateVessels = useCallback(() => {\n    const vesselTypes = ['commercial', 'military', 'fishing', 'passenger', 'tanker'];\n    const flags = ['Finland', 'Sweden', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Germany', 'Denmark', 'Russia'];\n    const russianOperators = ['Sovcomflot', 'Gazprom Fleet', 'Rosmorport', 'Russian Navy', 'Rosneft'];\n    const commercialOperators = ['Maersk', 'MSC', 'CMA CGM', 'Hapag-Lloyd', 'ONE', 'Evergreen', 'COSCO', 'Yang Ming', 'HMM', 'Grimaldi', 'DFDS', 'Stena Line', 'Tallink', 'Viking Line'];\n\n    // Generate vessels with better dispersal throughout the Baltic Sea\n    const generatedVessels = [];\n    const occupiedPositions = []; // Track positions to ensure better dispersal\n    const MIN_DISTANCE = 0.2; // Minimum distance between vessels in degrees (approx 10-20km)\n\n    // Start with fewer vessels and then disperse them more effectively\n    const maxAttempts = 300; // Limit how many times we try to place each vessel\n    let placedVesselCount = 0;\n\n    // Try to place vessels with appropriate spacing\n    for (let i = 1; placedVesselCount < 300 && i <= maxAttempts; i++) {\n      const type = vesselTypes[Math.floor(Math.random() * vesselTypes.length)];\n      const flag = flags[Math.floor(Math.random() * flags.length)];\n      const isRussian = flag === 'Russia' || Math.random() < 0.05; // 5% chance of non-Russian flag but Russian operated\n\n      // Get a potential position for the vessel\n      const position = randomCoordinate();\n\n      // Check if position is in a lake and ensure it's in the Baltic Sea\n      // Baltic Sea general bounds\n      const isInBalticSea = position[1] >= 54.0 && position[1] <= 66.0 &&\n      // Latitude bounds\n      position[0] >= 9.0 && position[0] <= 30.0 // Longitude bounds\n      ;\n\n      // If not in Baltic Sea proper, skip this position\n      if (!isInBalticSea) {\n        continue;\n      }\n\n      // Check if this position is too close to existing vessels\n      let isTooClose = false;\n      for (const existingPos of occupiedPositions) {\n        const distance = Math.sqrt(Math.pow(position[0] - existingPos[0], 2) + Math.pow(position[1] - existingPos[1], 2));\n        if (distance < MIN_DISTANCE) {\n          isTooClose = true;\n          break;\n        }\n      }\n\n      // If the position is too close to other vessels, skip this attempt\n      if (isTooClose) {\n        continue;\n      }\n\n      // If we got here, the position is good, so add it to occupied positions\n      occupiedPositions.push(position);\n      placedVesselCount++;\n\n      // Calculate a more realistic heading based on position\n      // Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\n      let heading;\n      const lat = position[1];\n      const lng = position[0];\n\n      // Baltic shipping lane direction tendencies\n      if (lng < 14.0) {\n        // Danish straits and western Baltic - generally east/west traffic\n        heading = Math.random() < 0.7 ? 70 + Math.random() * 40 : 250 + Math.random() * 40;\n      } else if (lng > 23.0 && lat > 59.0) {\n        // Gulf of Finland - generally east/west traffic\n        heading = Math.random() < 0.5 ? 80 + Math.random() * 30 : 260 + Math.random() * 30;\n      } else if (lng > 19.0 && lat > 60.0) {\n        // Gulf of Bothnia - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 30 : 180 + Math.random() * 30;\n      } else if (lng > 22.0 && lat < 58.0 && lat > 56.5) {\n        // Gulf of Riga - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 40 : 180 + Math.random() * 40;\n      } else if (lat < 56.0 && lng > 18.0) {\n        // Southern Baltic to Polish/Lithuanian ports\n        heading = Math.random() < 0.6 ? 140 + Math.random() * 40 : 320 + Math.random() * 40;\n      } else {\n        // Central Baltic - mixed traffic patterns\n        heading = Math.floor(Math.random() * 360);\n      }\n\n      // Realistic speed based on vessel type and weather (assumed normal conditions)\n      let speed;\n      if (type === 'commercial' || type === 'tanker') {\n        speed = 10 + Math.floor(Math.random() * 8); // 10-18 knots\n      } else if (type === 'passenger') {\n        speed = 15 + Math.floor(Math.random() * 10); // 15-25 knots\n      } else if (type === 'military') {\n        speed = 5 + Math.floor(Math.random() * 25); // 5-30 knots (more variable)\n      } else if (type === 'fishing') {\n        // Fishing vessels move slower or may be stationary when fishing\n        speed = Math.random() < 0.3 ? 0 : 5 + Math.floor(Math.random() * 7); // 0 or 5-12 knots\n      } else {\n        speed = Math.floor(Math.random() * 15) + 5; // 5-20 knots default\n      }\n\n      // Determine vessel size\n      const length = type === 'tanker' || type === 'commercial' ? 100 + Math.floor(Math.random() * 300) : type === 'military' ? 50 + Math.floor(Math.random() * 200) : 20 + Math.floor(Math.random() * 50);\n\n      // Calculate gross tonnage (GT) based on vessel length and type\n      // Using simplified formula based on vessel dimensions\n      let grossTonnage;\n      if (type === 'commercial' || type === 'tanker') {\n        // Commercial and tanker vessels have higher GT/length ratios\n        grossTonnage = Math.round(length * length * 0.18); // Approximation\n      } else if (type === 'military') {\n        // Military vessels are typically more dense but smaller\n        grossTonnage = Math.round(length * length * 0.16);\n      } else if (type === 'passenger') {\n        // Passenger vessels have high volume and less dense cargo\n        grossTonnage = Math.round(length * length * 0.2);\n      } else {\n        // Fishing and other vessels\n        grossTonnage = Math.round(length * length * 0.12);\n      }\n\n      // Determine operator\n      let operator;\n      if (isRussian) {\n        operator = russianOperators[Math.floor(Math.random() * russianOperators.length)];\n      } else {\n        operator = commercialOperators[Math.floor(Math.random() * commercialOperators.length)];\n      }\n\n      // Generate a realistic vessel name\n      const prefixes = isRussian ? ['Admiral', 'Kapitan', 'Vostok', 'Sibir', 'Moskva', 'Sankt-Peterburg', 'Akademik'] : ['Northern', 'Baltic', 'Sea', 'Atlantic', 'Pacific', 'Star', 'Pioneer'];\n      const suffixes = isRussian ? ['Kuznetsov', 'Nakhimov', 'Gorshkov', 'Lazarev', 'Kasatonov', 'Ustinov'] : ['Adventurer', 'Explorer', 'Navigator', 'Voyager', 'Mariner', 'Trader', 'Express'];\n      const shipNumbers = ['I', 'II', 'III', 'IV', 'V', '1', '2', '3', '4', '5'];\n      let name;\n      if (Math.random() < 0.3) {\n        // 30% chance of having a prefix-suffix name\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${suffixes[Math.floor(Math.random() * suffixes.length)]}`;\n      } else if (Math.random() < 0.5) {\n        // 20% chance of having a name with a number\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${shipNumbers[Math.floor(Math.random() * shipNumbers.length)]}`;\n      } else {\n        // 50% chance of having a simple prefix or suffix name\n        name = Math.random() < 0.5 ? prefixes[Math.floor(Math.random() * prefixes.length)] : suffixes[Math.floor(Math.random() * suffixes.length)];\n      }\n      if (type === 'military' && isRussian) {\n        name = `RFS ${name}`; // Russian Federation Ship\n      }\n\n      // Calculate a detection probability\n      const detectionProbability = {\n        radar: Math.random(),\n        // 0-1, higher means more visible on radar\n        sonar: Math.random(),\n        // 0-1, higher means more detectable by sonar\n        fused: (Math.random() + Math.random()) / 2 // average of two values for a more normal distribution\n      };\n\n      // Generate a vessel object with all properties\n      generatedVessels.push({\n        id: placedVesselCount,\n        name,\n        type,\n        flag,\n        isRussian,\n        position,\n        heading,\n        speed,\n        length,\n        operator,\n        detectionProbability,\n        grossTonnage\n      });\n    }\n\n    // More evenly disperse submarines too\n    // Generate Russian submarines with special characteristics\n    const submarineNames = ['Krasnodar', 'Novorossiysk', 'Rostov-on-Don', 'Stary Oskol', 'Velikiy Novgorod', 'Kolpino', 'Sankt Peterburg'];\n    const submarineClasses = ['Kilo-class', 'Kilo-class', 'Kilo-class', 'Kilo-class', 'Improved Kilo-class', 'Improved Kilo-class', 'Lada-class'];\n    const submarineDesignations = ['B-265', 'B-261', 'B-237', 'B-262', 'B-268', 'B-271', 'B-585'];\n\n    // Use more strategic submarine positions\n    const submarineAreas = [\n    // Gulf of Finland approach - monitoring traffic to St. Petersburg\n    [26.2, 59.7],\n    // Near NATO naval exercise areas in central Baltic\n    [19.3, 56.8],\n    // Monitoring approach to Stockholm archipelago\n    [18.9, 58.9],\n    // Deep water between Gotland and Latvia (strategic position)\n    [20.1, 57.3],\n    // Patrolling near Kaliningrad naval base\n    [19.6, 55.2],\n    // Monitoring naval traffic near Gdańsk\n    [18.8, 54.8],\n    // Danish straits approaches - key strategic chokepoint\n    [12.8, 55.4]];\n\n    // Add some randomness to submarine positions to avoid perfect predictability\n    const randomizedSubmarineAreas = submarineAreas.map(pos => [pos[0] + (Math.random() - 0.5) * 0.5,\n    // Add up to ±0.25 degrees longitude\n    pos[1] + (Math.random() - 0.5) * 0.3 // Add up to ±0.15 degrees latitude\n    ]);\n\n    // Add submarines to generated vessels\n    for (let i = 0; i < 7; i++) {\n      const position = randomizedSubmarineAreas[i];\n      const heading = Math.floor(Math.random() * 360);\n      const speed = 5 + Math.floor(Math.random() * 10); // Submarines move slower on average\n      const depth = 20 + Math.floor(Math.random() * 180); // Depth in meters\n\n      // Submarine detection characteristics\n      // Low radar detection when submerged, high sonar signature\n      const isSubmerged = Math.random() > 0.3; // 70% chance of being submerged\n\n      const detectionProbability = {\n        radar: isSubmerged ? 0.05 + Math.random() * 0.1 : 0.3 + Math.random() * 0.2,\n        // Low radar when submerged\n        sonar: 0.6 + Math.random() * 0.4,\n        // High sonar signature\n        fused: isSubmerged ? (0.05 + Math.random() * 0.1 + 0.6 + Math.random() * 0.4) / 2 :\n        // Average when submerged\n        (0.3 + Math.random() * 0.2 + 0.6 + Math.random() * 0.4) / 2 // Average when surfaced\n      };\n      generatedVessels.push({\n        id: 1001 + i,\n        // IDs starting from 1001 for submarines\n        name: `RFS ${submarineNames[i]}`,\n        type: 'submarine',\n        class: submarineClasses[i],\n        designation: submarineDesignations[i],\n        flag: 'Russia',\n        isRussian: true,\n        position,\n        heading,\n        speed,\n        depth,\n        length: 70 + Math.floor(Math.random() * 20),\n        // Kilo-class submarines are around 70-74m\n        isSubmerged,\n        operator: 'Russian Navy',\n        detectionProbability\n      });\n    }\n    return generatedVessels;\n  }, []);\n\n  // Generate vessel data when component mounts\n  useEffect(() => {\n    const simulatedVessels = generateVessels();\n    setVessels(simulatedVessels);\n  }, [generateVessels]);\n\n  // Update vessel positions based on speed and heading\n  const updateVesselPositions = useCallback(() => {\n    if (!simulationEnabled) return;\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - lastUpdateTimeRef.current) / 1000; // Convert ms to seconds\n    lastUpdateTimeRef.current = currentTime;\n\n    // Apply speed multiplier to deltaTime\n    const adjustedDeltaTime = deltaTime * simulationSpeed;\n\n    // Skip if delta time is too large (e.g., browser tab was inactive)\n    if (adjustedDeltaTime > 5) return;\n    setVessels(prevVessels => {\n      return prevVessels.map(vessel => {\n        // Skip stationary vessels\n        if (vessel.speed === 0) return vessel;\n\n        // Convert knots to degrees per second\n        // 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n        // Adjust for latitude (narrower longitude degrees at higher latitudes)\n        const latitudeAdjustment = Math.cos(vessel.position[1] * Math.PI / 180);\n        const longitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime / latitudeAdjustment;\n        const latitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime;\n\n        // Calculate new position based on heading\n        const headingRad = vessel.heading * Math.PI / 180;\n        const newLng = vessel.position[0] + longitudeChange * Math.sin(headingRad);\n        const newLat = vessel.position[1] + latitudeChange * Math.cos(headingRad);\n\n        // Enhanced boundary checking to keep vessels within the actual Baltic Sea water\n        if (!isInBalticSeaWaters(newLat, newLng)) {\n          // If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n          // Use a more detailed approach to find the right direction\n\n          // Try finding a better direction by checking multiple angles\n          let bestHeading = vessel.heading;\n          let foundBetterDirection = false;\n\n          // Check 8 directions around to find waters\n          for (let angleOffset = 0; angleOffset < 360; angleOffset += 45) {\n            const testHeading = (vessel.heading + angleOffset) % 360;\n            const testRad = testHeading * Math.PI / 180;\n\n            // Check a position further out in this direction\n            const testLng = vessel.position[0] + longitudeChange * 5 * Math.sin(testRad);\n            const testLat = vessel.position[1] + latitudeChange * 5 * Math.cos(testRad);\n            if (isInBalticSeaWaters(testLat, testLng)) {\n              bestHeading = testHeading;\n              foundBetterDirection = true;\n              break;\n            }\n          }\n\n          // If no good direction found, head toward the Baltic center\n          if (!foundBetterDirection) {\n            const centerLat = 58.5; // More centered in the main Baltic basin\n            const centerLng = 20; // Adjusted to be in deeper waters\n            const angleToCenter = Math.atan2(centerLng - vessel.position[0], centerLat - vessel.position[1]) * 180 / Math.PI;\n\n            // Turn gradually toward the center\n            const headingDiff = (angleToCenter - vessel.heading + 540) % 360 - 180;\n            bestHeading = (vessel.heading + Math.sign(headingDiff) * 45) % 360;\n            if (bestHeading < 0) bestHeading += 360;\n          }\n\n          // Slow down near boundaries\n          const reducedSpeed = Math.max(1, vessel.speed * 0.5);\n          return {\n            ...vessel,\n            heading: bestHeading,\n            speed: reducedSpeed // Temporarily reduce speed when changing course\n          };\n        }\n\n        // For military and submarine vessels, randomly change heading occasionally\n        let newHeading = vessel.heading;\n        const originalSpeed = vessel.speed;\n        let newSpeed = originalSpeed;\n        if ((vessel.type === 'military' || vessel.type === 'submarine') && Math.random() < 0.01 * adjustedDeltaTime) {\n          // Change heading by up to +/- 30 degrees\n          newHeading = (vessel.heading + (Math.random() * 60 - 30)) % 360;\n          if (newHeading < 0) newHeading += 360;\n\n          // Military vessels might change speed during maneuvers\n          if (Math.random() < 0.3) {\n            const speedFactor = 0.7 + Math.random() * 0.6; // 70-130% of current speed\n            newSpeed = Math.max(1, Math.min(30, originalSpeed * speedFactor));\n          }\n        }\n        // Smaller random heading changes for other vessels to simulate realistic movement\n        else if (Math.random() < 0.005 * adjustedDeltaTime) {\n          // Change heading by up to +/- 10 degrees\n          newHeading = (vessel.heading + (Math.random() * 20 - 10)) % 360;\n          if (newHeading < 0) newHeading += 360;\n        }\n        return {\n          ...vessel,\n          position: [newLng, newLat],\n          heading: newHeading,\n          speed: newSpeed\n        };\n      });\n    });\n\n    // Request next animation frame\n    animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n  }, [simulationEnabled, simulationSpeed]);\n\n  // Function to check if a point is in Baltic Sea waters\n  // This is a more precise check than just the bounding box\n  const isInBalticSeaWaters = useCallback((lat, lng) => {\n    // First check overall bounds\n    if (lat < 54.0 || lat > 66.0 || lng < 9.0 || lng > 30.0) {\n      return false;\n    }\n\n    // Define areas that are land (to be avoided)\n    // Format: [south, north, west, east]\n    const landAreas = [\n    // Southern Sweden\n    [55.0, 59.5, 12.5, 15.5],\n    // Finland\n    [59.7, 65.5, 21.0, 30.0],\n    // Estonia\n    [57.5, 59.7, 23.0, 28.5],\n    // Latvia/Lithuania coast\n    [55.5, 57.5, 21.0, 28.0],\n    // Poland inland\n    [54.0, 55.5, 15.0, 19.5],\n    // Germany/Denmark inland\n    [54.0, 56.0, 9.0, 12.0],\n    // Gotland\n    [56.8, 58.0, 18.0, 19.2],\n    // Åland Islands\n    [59.7, 60.5, 19.3, 21.3],\n    // Bornholm\n    [54.9, 55.3, 14.7, 15.2]];\n\n    // Define key shipping channels and deep waters (preferred areas)\n    // Format: [south, north, west, east, weight]\n    const shippingChannels = [\n    // Main Baltic basin\n    [55.5, 59.0, 16.5, 22.0, 10],\n    // Gulf of Finland shipping lane\n    [59.3, 60.2, 22.5, 28.0, 8],\n    // Approach to Stockholm\n    [58.7, 59.5, 17.5, 19.5, 6],\n    // Approach to Riga\n    [56.8, 58.0, 22.5, 24.5, 6],\n    // Approach to Helsinki/Tallinn\n    [59.2, 59.9, 24.0, 25.5, 8],\n    // Western Baltic shipping lane\n    [54.5, 56.0, 12.0, 15.0, 8],\n    // Kattegat\n    [56.0, 57.5, 10.5, 12.0, 6],\n    // Gulf of Bothnia\n    [60.5, 63.5, 18.5, 21.5, 5]];\n\n    // Check if point is in a land area\n    for (const [south, north, west, east] of landAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // Further check for complex coastlines\n        // This is a very simplified approach - we add some randomness \n        // to prevent vessels from getting stuck at sharp boundary transitions\n\n        // If near the edge of a land area, there's a small chance to still consider it water\n        // This helps vessels navigate around complex coastlines without getting stuck\n        const distanceFromEdge = Math.min(Math.abs(lat - south), Math.abs(lat - north), Math.abs(lng - west), Math.abs(lng - east));\n\n        // Very close to edge - might be a complex coastline\n        if (distanceFromEdge < 0.1) {\n          // 20% chance to consider it water if very close to edge\n          // This randomness helps prevent getting stuck at boundaries\n          return Math.random() < 0.2;\n        }\n        return false; // It's in a land area\n      }\n    }\n\n    // Check if in a preferred shipping channel\n    for (const [south, north, west, east] of shippingChannels) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true; // In a shipping channel - definitely good\n      }\n    }\n\n    // For areas not explicitly defined, use the following general rules\n\n    // Avoid shallow coastal waters (simplified approach)\n    // These are general buffer zones around landmasses\n    const coastalBuffers = [\n    // Swedish coast buffer\n    [55.0, 59.5, 15.5, 16.0],\n    // Finnish coast buffer\n    [59.7, 65.5, 20.0, 21.0],\n    // Estonian coast buffer\n    [57.5, 59.7, 22.0, 23.0],\n    // Latvian/Lithuanian coast buffer\n    [55.5, 57.5, 20.0, 21.0],\n    // Polish coast buffer\n    [54.0, 55.5, 14.0, 15.0],\n    // German/Danish coast buffer\n    [54.0, 56.0, 12.0, 12.5]];\n\n    // Check coastal buffers with higher probability of rejection\n    for (const [south, north, west, east] of coastalBuffers) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 70% chance to consider coastal buffers as land\n        return Math.random() > 0.7;\n      }\n    }\n\n    // If we got here, it's probably in open water\n    return true;\n  }, []);\n\n  // Start/stop vessel position updates when simulation state changes\n  useEffect(() => {\n    if (simulationEnabled) {\n      lastUpdateTimeRef.current = Date.now();\n      animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Cleanup when component unmounts\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [simulationEnabled, updateVesselPositions]);\n\n  // Function to check if an item is in the current map bounds\n  const isInMapBounds = useCallback((lat, lng) => {\n    if (!mapBounds) return true; // If no bounds yet, show everything\n\n    // Add buffer to avoid popping at edges\n    const buffer = 0.5; // Buffer in degrees\n\n    return lat >= mapBounds.south - buffer && lat <= mapBounds.north + buffer && lng >= mapBounds.west - buffer && lng <= mapBounds.east + buffer;\n  }, [mapBounds]);\n\n  // Function to render vessels based on the display mode and zoom level\n  const renderVessels = useCallback(() => {\n    // Use zoom level to determine detail level\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    const isLowDetail = currentZoom < 6;\n\n    // Filter vessels based on current filter and map bounds\n    const filteredVessels = vessels.filter(v => {\n      // First apply user filter\n      const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n\n      // Then check if in current map bounds\n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      return matchesFilter && inBounds;\n    });\n\n    // Create vessel markers\n    return filteredVessels.map(vessel => {\n      // Convert vessel position to LatLng\n      const position = {\n        lat: vessel.position[1],\n        lng: vessel.position[0]\n      };\n      const isSelected = (selectedVessel === null || selectedVessel === void 0 ? void 0 : selectedVessel.id) === vessel.id;\n\n      // Define icon and visualization based on display mode and zoom level\n      let iconProps = {};\n      let circleProps = {\n        radius: 0\n      };\n      switch (displayMode) {\n        case 'radar':\n          // Radar mode - shows vessels as dots with direction indicators\n          const radarOpacity = vessel.type === 'submarine' && vessel.isSubmerged ? 0.1 + vessel.detectionProbability.radar * 0.2 : 0.3 + vessel.detectionProbability.radar * 0.7;\n          const radarScale = vessel.type === 'submarine' ? vessel.isSubmerged ? 0.5 : 0.8 : Math.max(0.6, Math.min(1.2, 0.6 + vessel.length / 300));\n          const radarColor = vessel.type === 'submarine' ? 'rgb(255, 0, 0)' : vessel.isRussian ? 'rgb(231, 76, 60)' : 'rgb(52, 152, 219)';\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else if (isMediumDetail) {\n            // Simplified arrow for medium detail\n            const arrowSize = radarScale * 4;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize / 2},${arrowSize} L -${arrowSize / 2},${arrowSize} Z`,\n              // Simpler arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else {\n            // Full detail for high zoom levels\n            const arrowSize = radarScale * 5;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize / 2},${arrowSize} L 0,${arrowSize / 2} L -${arrowSize / 2},${arrowSize} Z`,\n              // Arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          }\n          break;\n        case 'sonar':\n          // Sonar mode - shows vessels as acoustic signatures\n          const sonarOpacity = vessel.type === 'submarine' ? 0.5 + vessel.detectionProbability.sonar * 0.5 : 0.2 + vessel.detectionProbability.sonar * 0.8;\n          const sonarColor = vessel.type === 'submarine' ? '#FF00FF' : '#00E5FF';\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n\n            // Simplified acoustic wave\n            if (vessel.type === 'submarine') {\n              const waveRadius = vessel.speed * 80;\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1\n                }\n              };\n            }\n          } else {\n            // Use the same arrow shape as radar mode but with sonar colors\n            const sonarArrowSize = vessel.type === 'submarine' ? 5 : 4;\n            iconProps = {\n              path: `M 0,-${sonarArrowSize} L ${sonarArrowSize / 2},${sonarArrowSize} L 0,${sonarArrowSize / 2} L -${sonarArrowSize / 2},${sonarArrowSize} Z`,\n              // Arrow shape\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n\n            // Add acoustic wave circle - only at higher zoom levels\n            if (isHighDetail) {\n              const waveRadius = vessel.type === 'submarine' ? Math.max(500, vessel.speed * 100) : Math.max(300, vessel.speed * 60);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.05,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.2,\n                  strokeWeight: 1\n                }\n              };\n            } else if (isMediumDetail && vessel.type === 'submarine') {\n              const waveRadius = Math.max(300, vessel.speed * 80);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1\n                }\n              };\n            }\n          }\n          break;\n        case 'fused':\n          // Fused mode - combines radar and sonar data\n          const fusedOpacity = 0.4 + vessel.detectionProbability.fused * 0.6;\n\n          // Create color gradient based on radar/sonar detection probabilities\n          const radarValue = Math.floor(vessel.detectionProbability.radar * 255);\n          const sonarValue = Math.floor(vessel.detectionProbability.sonar * 255);\n          const fusedColor = vessel.isRussian ? `rgb(255, 100, 100)` : `rgb(100, ${radarValue}, ${sonarValue})`;\n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          } else {\n            // Use the same arrow shape as other modes but with fused colors\n            const fusedArrowSize = 5;\n            iconProps = {\n              path: `M 0,-${fusedArrowSize} L ${fusedArrowSize / 2},${fusedArrowSize} L 0,${fusedArrowSize / 2} L -${fusedArrowSize / 2},${fusedArrowSize} Z`,\n              // Arrow shape\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0)\n            };\n          }\n\n          // Add confidence circle - only at higher zoom levels\n          if (isHighDetail) {\n            const confidenceRadius = 300 + (1 - vessel.detectionProbability.fused) * 1000;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.4,\n                strokeWeight: 0.5\n              }\n            };\n          } else if (isMediumDetail && (vessel.type === 'military' || vessel.type === 'submarine')) {\n            // Only show confidence circles for important vessels at medium zoom\n            const confidenceRadius = 200 + (1 - vessel.detectionProbability.fused) * 800;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.3,\n                strokeWeight: 0.5\n              }\n            };\n          }\n          break;\n        default:\n          // Default to radar mode with arrow icon\n          const defaultSize = 5;\n          iconProps = {\n            path: `M 0,-${defaultSize} L ${defaultSize / 2},${defaultSize} L 0,${defaultSize / 2} L -${defaultSize / 2},${defaultSize} Z`,\n            // Arrow shape\n            fillColor: '#FFFFFF',\n            fillOpacity: 0.8,\n            strokeColor: '#000000',\n            strokeWeight: 1,\n            rotation: vessel.heading,\n            scale: 1,\n            anchor: new window.google.maps.Point(0, 0)\n          };\n          break;\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: position,\n          icon: iconProps,\n          onClick: () => setSelectedVessel(vessel),\n          zIndex: isSelected ? 1000 : vessel.type === 'submarine' ? 500 : 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 11\n        }, this), circleProps.radius > 0 && /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: circleProps.radius,\n          options: circleProps.options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 13\n        }, this), vessel.type === 'submarine' && vessel.isSubmerged && displayMode !== 'fused' && isHighDetail && /*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: {\n            lat: position.lat + 0.03,\n            lng: position.lng + 0.03\n          },\n          label: {\n            text: `${vessel.depth}m`,\n            color: '#FFFFFF',\n            fontSize: '8px',\n            fontWeight: 'bold'\n          },\n          icon: {\n            path: 0,\n            // CIRCLE\n            scale: 0,\n            fillOpacity: 0,\n            strokeOpacity: 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 13\n        }, this)]\n      }, vessel.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 9\n      }, this);\n    });\n  }, [vessels, filter, isInMapBounds, selectedVessel, displayMode, currentZoom]); // Added dependencies for memoization\n\n  // Baltic Sea wind farm data - expanded with EMODnet data\n  const windFarmsData = [\n  // Denmark\n  {\n    name: \"Kriegers Flak\",\n    country: \"Denmark\",\n    capacity: 604,\n    lat: 54.9833,\n    lng: 13.0333,\n    status: \"operational\",\n    turbines: 72,\n    area: 132,\n    // km²\n    areaPoints: [{\n      lat: 54.9633,\n      lng: 13.0133\n    }, {\n      lat: 54.9733,\n      lng: 13.0533\n    }, {\n      lat: 55.0033,\n      lng: 13.0533\n    }, {\n      lat: 55.0033,\n      lng: 13.0133\n    }, {\n      lat: 54.9833,\n      lng: 12.9933\n    }, {\n      lat: 54.9633,\n      lng: 13.0133\n    }]\n  }, {\n    name: \"Middelgrunden\",\n    country: \"Denmark\",\n    capacity: 40,\n    lat: 55.6853,\n    lng: 12.6913,\n    status: \"operational\",\n    turbines: 20,\n    area: 4,\n    // km²\n    areaPoints: [{\n      lat: 55.6903,\n      lng: 12.6813\n    }, {\n      lat: 55.6903,\n      lng: 12.7013\n    }, {\n      lat: 55.6803,\n      lng: 12.7013\n    }, {\n      lat: 55.6803,\n      lng: 12.6813\n    }, {\n      lat: 55.6903,\n      lng: 12.6813\n    }]\n  }, {\n    name: \"Rødsand I\",\n    country: \"Denmark\",\n    capacity: 166,\n    lat: 54.5508,\n    lng: 11.7083,\n    status: \"operational\",\n    turbines: 72,\n    area: 35,\n    // km²\n    areaPoints: [{\n      lat: 54.5408,\n      lng: 11.6883\n    }, {\n      lat: 54.5408,\n      lng: 11.7283\n    }, {\n      lat: 54.5608,\n      lng: 11.7283\n    }, {\n      lat: 54.5608,\n      lng: 11.6883\n    }, {\n      lat: 54.5408,\n      lng: 11.6883\n    }]\n  }, {\n    name: \"Rødsand II\",\n    country: \"Denmark\",\n    capacity: 207,\n    lat: 54.5580,\n    lng: 11.6170,\n    status: \"operational\",\n    turbines: 90,\n    area: 40\n  }, {\n    name: \"Anholt\",\n    country: \"Denmark\",\n    capacity: 400,\n    lat: 56.6000,\n    lng: 11.2097,\n    status: \"operational\",\n    turbines: 111,\n    area: 88\n  }, {\n    name: \"Sprogø\",\n    country: \"Denmark\",\n    capacity: 21,\n    lat: 55.3414,\n    lng: 10.9767,\n    status: \"operational\",\n    turbines: 7,\n    area: 6\n  }, {\n    name: \"Samsø\",\n    country: \"Denmark\",\n    capacity: 23,\n    lat: 55.7194,\n    lng: 10.5639,\n    status: \"operational\",\n    turbines: 10,\n    area: 5\n  },\n  // Sweden\n  {\n    name: \"Karehamn\",\n    country: \"Sweden\",\n    capacity: 48,\n    lat: 56.9750,\n    lng: 17.0000,\n    status: \"operational\",\n    turbines: 16,\n    area: 8\n  }, {\n    name: \"Lillgrund\",\n    country: \"Sweden\",\n    capacity: 110,\n    lat: 55.5000,\n    lng: 12.7667,\n    status: \"operational\",\n    turbines: 48,\n    area: 6\n  }, {\n    name: \"Södra Midsjöbanken\",\n    country: \"Sweden\",\n    capacity: 1500,\n    lat: 55.7500,\n    lng: 17.4000,\n    status: \"planned\",\n    turbines: 170,\n    area: 265\n  }, {\n    name: \"Storgrundet\",\n    country: \"Sweden\",\n    capacity: 265,\n    lat: 61.1532,\n    lng: 17.4376,\n    status: \"planned\",\n    turbines: 70,\n    area: 57\n  }, {\n    name: \"Utgrunden\",\n    country: \"Sweden\",\n    capacity: 10.5,\n    lat: 56.3350,\n    lng: 16.2860,\n    status: \"operational\",\n    turbines: 7,\n    area: 2\n  }, {\n    name: \"Bockstigen\",\n    country: \"Sweden\",\n    capacity: 2.5,\n    lat: 57.0389,\n    lng: 18.1378,\n    status: \"operational\",\n    turbines: 5,\n    area: 1\n  },\n  // Germany\n  {\n    name: \"EnBW Baltic 1\",\n    country: \"Germany\",\n    capacity: 48,\n    lat: 54.6080,\n    lng: 12.6520,\n    status: \"operational\",\n    turbines: 21,\n    area: 7\n  }, {\n    name: \"EnBW Baltic 2\",\n    country: \"Germany\",\n    capacity: 288,\n    lat: 54.9900,\n    lng: 13.1666,\n    status: \"operational\",\n    turbines: 80,\n    area: 27\n  }, {\n    name: \"Arkona\",\n    country: \"Germany\",\n    capacity: 385,\n    lat: 54.7833,\n    lng: 14.1000,\n    status: \"operational\",\n    turbines: 60,\n    area: 39\n  }, {\n    name: \"Wikinger\",\n    country: \"Germany\",\n    capacity: 350,\n    lat: 54.8333,\n    lng: 14.0750,\n    status: \"operational\",\n    turbines: 70,\n    area: 34\n  }, {\n    name: \"Arcadis Ost 1\",\n    country: \"Germany\",\n    capacity: 257,\n    lat: 54.8333,\n    lng: 13.7500,\n    status: \"under construction\",\n    turbines: 27,\n    area: 30\n  }, {\n    name: \"Gennaker\",\n    country: \"Germany\",\n    capacity: 927,\n    lat: 54.5500,\n    lng: 12.2500,\n    status: \"planned\",\n    turbines: 103,\n    area: 176\n  }, {\n    name: \"Nordlicher Grund\",\n    country: \"Germany\",\n    capacity: 630,\n    lat: 54.9831,\n    lng: 6.3582,\n    status: \"planned\",\n    turbines: 64,\n    area: 57\n  }, {\n    name: \"Ostseeschatz\",\n    country: \"Germany\",\n    capacity: 372,\n    lat: 54.3660,\n    lng: 11.9165,\n    status: \"planned\",\n    turbines: 62,\n    area: 40\n  }, {\n    name: \"Baltic Eagle\",\n    country: \"Germany\",\n    capacity: 476,\n    lat: 54.7778,\n    lng: 13.9239,\n    status: \"under construction\",\n    turbines: 50,\n    area: 40\n  },\n  // Finland\n  {\n    name: \"Tahkoluoto\",\n    country: \"Finland\",\n    capacity: 42,\n    lat: 61.6330,\n    lng: 21.3830,\n    status: \"operational\",\n    turbines: 10,\n    area: 15\n  }, {\n    name: \"Ajos\",\n    country: \"Finland\",\n    capacity: 42,\n    lat: 65.7166,\n    lng: 24.5166,\n    status: \"operational\",\n    turbines: 13,\n    area: 10\n  }, {\n    name: \"Kemi Ajos I\",\n    country: \"Finland\",\n    capacity: 15,\n    lat: 65.6405,\n    lng: 24.5267,\n    status: \"operational\",\n    turbines: 5,\n    area: 6\n  }, {\n    name: \"Kemi Ajos II\",\n    country: \"Finland\",\n    capacity: 16,\n    lat: 65.6563,\n    lng: 24.5402,\n    status: \"operational\",\n    turbines: 3,\n    area: 4\n  }, {\n    name: \"Raahe\",\n    country: \"Finland\",\n    capacity: 44,\n    lat: 64.6500,\n    lng: 24.3500,\n    status: \"planned\",\n    turbines: 8,\n    area: 15\n  }, {\n    name: \"Korsnäs\",\n    country: \"Finland\",\n    capacity: 1300,\n    lat: 62.7500,\n    lng: 21.0500,\n    status: \"planned\",\n    turbines: 70,\n    area: 175\n  }, {\n    name: \"Siikajoki\",\n    country: \"Finland\",\n    capacity: 100,\n    lat: 64.8167,\n    lng: 24.6167,\n    status: \"planned\",\n    turbines: 20,\n    area: 25\n  },\n  // Poland\n  {\n    name: \"Baltic Power\",\n    country: \"Poland\",\n    capacity: 1200,\n    lat: 55.0000,\n    lng: 18.3330,\n    status: \"under construction\",\n    turbines: 76,\n    area: 131\n  }, {\n    name: \"FEW Baltic II\",\n    country: \"Poland\",\n    capacity: 350,\n    lat: 54.8000,\n    lng: 16.5000,\n    status: \"planned\",\n    turbines: 37,\n    area: 41\n  }, {\n    name: \"Baltica 1\",\n    country: \"Poland\",\n    capacity: 896,\n    lat: 55.2060,\n    lng: 17.1633,\n    status: \"planned\",\n    turbines: 64,\n    area: 108\n  }, {\n    name: \"Baltica 2\",\n    country: \"Poland\",\n    capacity: 1498,\n    lat: 55.3340,\n    lng: 16.8630,\n    status: \"planned\",\n    turbines: 107,\n    area: 190\n  }, {\n    name: \"Baltica 3\",\n    country: \"Poland\",\n    capacity: 1045,\n    lat: 55.3340,\n    lng: 16.7000,\n    status: \"planned\",\n    turbines: 95,\n    area: 131\n  }, {\n    name: \"MFW Bałtyk I\",\n    country: \"Poland\",\n    capacity: 1560,\n    lat: 55.2383,\n    lng: 17.4633,\n    status: \"planned\",\n    turbines: 100,\n    area: 128\n  }, {\n    name: \"MFW Bałtyk II\",\n    country: \"Poland\",\n    capacity: 720,\n    lat: 55.1233,\n    lng: 17.2467,\n    status: \"planned\",\n    turbines: 60,\n    area: 65\n  }, {\n    name: \"MFW Bałtyk III\",\n    country: \"Poland\",\n    capacity: 720,\n    lat: 55.0817,\n    lng: 17.0667,\n    status: \"planned\",\n    turbines: 60,\n    area: 80\n  },\n  // Estonia\n  {\n    name: \"Estonia Offshore 1\",\n    country: \"Estonia\",\n    capacity: 1000,\n    lat: 58.8000,\n    lng: 22.0000,\n    status: \"planned\",\n    turbines: 115,\n    area: 230,\n    // km²\n    areaPoints: [{\n      lat: 58.7800,\n      lng: 21.9600\n    }, {\n      lat: 58.7800,\n      lng: 22.0400\n    }, {\n      lat: 58.8200,\n      lng: 22.0400\n    }, {\n      lat: 58.8200,\n      lng: 21.9600\n    }, {\n      lat: 58.7800,\n      lng: 21.9600\n    }]\n  }, {\n    name: \"Liivi\",\n    country: \"Estonia\",\n    capacity: 1000,\n    lat: 57.8333,\n    lng: 23.5000,\n    status: \"planned\",\n    turbines: 100,\n    area: 160\n  }, {\n    name: \"Hiiumaa\",\n    country: \"Estonia\",\n    capacity: 700,\n    lat: 59.0833,\n    lng: 22.3833,\n    status: \"planned\",\n    turbines: 70,\n    area: 100\n  }, {\n    name: \"Saare-Liivi\",\n    country: \"Estonia\",\n    capacity: 600,\n    lat: 57.9500,\n    lng: 22.6833,\n    status: \"planned\",\n    turbines: 60,\n    area: 90\n  },\n  // Latvia\n  {\n    name: \"ELWIND\",\n    country: \"Latvia\",\n    capacity: 1000,\n    lat: 57.0830,\n    lng: 20.7500,\n    status: \"planned\",\n    turbines: 100,\n    area: 200\n  },\n  // Lithuania\n  {\n    name: \"Lithuanian OWF I\",\n    country: \"Lithuania\",\n    capacity: 700,\n    lat: 55.8330,\n    lng: 20.5000,\n    status: \"planned\",\n    turbines: 70,\n    area: 120\n  },\n  // Special projects\n  {\n    name: \"Bornholm Energy Island\",\n    country: \"Denmark\",\n    capacity: 3000,\n    lat: 55.1000,\n    lng: 14.9000,\n    status: \"planned\",\n    turbines: 200,\n    area: 400,\n    // km²\n    areaPoints: [{\n      lat: 55.0500,\n      lng: 14.8500\n    }, {\n      lat: 55.0500,\n      lng: 14.9500\n    }, {\n      lat: 55.1500,\n      lng: 14.9500\n    }, {\n      lat: 55.1500,\n      lng: 14.8500\n    }, {\n      lat: 55.0500,\n      lng: 14.8500\n    }]\n  }, {\n    name: \"Hywind Tampen\",\n    country: \"Norway\",\n    capacity: 88,\n    lat: 61.2500,\n    lng: 20.4000,\n    status: \"operational\",\n    turbines: 11,\n    area: 22\n  }];\n\n  // Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\n  const renderWindFarms = useCallback(() => {\n    if (!showWindFarms) return null;\n\n    // Filter wind farms to only show those in current map bounds\n    const visibleWindFarms = windFarmsData.filter(farm => isInMapBounds(farm.lat, farm.lng));\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    return visibleWindFarms.map(windFarm => {\n      const position = {\n        lat: windFarm.lat,\n        lng: windFarm.lng\n      };\n\n      // Use different colors based on wind farm status\n      const fillColor = windFarm.status === \"operational\" ? '#FFC107' // amber color for operational wind farms\n      : '#4CAF50'; // green color for planned and under construction\n\n      // Icon for wind farms\n      const windFarmIcon = {\n        path: \"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\",\n        // Square shape\n        scale: 1.5,\n        fillColor: fillColor,\n        fillOpacity: 0.8,\n        strokeColor: '#FFFFFF',\n        strokeWeight: 1,\n        rotation: 45 // Diamond shape\n      };\n\n      // Determine how to visualize the area based on zoom level\n      let areaVisualization;\n      if (isHighDetail) {\n        // Full detail at high zoom\n        if (windFarm.areaPoints) {\n          // Use specific polygon points if available\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedPolygon, {\n            paths: windFarm.areaPoints,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1222,\n            columnNumber: 15\n          }, this);\n        } else if (windFarm.area) {\n          // If we only have the area in km², create a sized circle\n          // Convert km² to meters radius using area = π*r²\n          const areaInSquareMeters = windFarm.area * 1000000;\n          const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n            center: position,\n            radius: radiusInMeters,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1240,\n            columnNumber: 15\n          }, this);\n        } else {\n          // Calculate estimated area based on capacity and turbines\n          let estimatedArea;\n          if (windFarm.turbines) {\n            estimatedArea = windFarm.turbines * 1.0;\n          } else {\n            estimatedArea = windFarm.capacity / 6.5;\n          }\n          const areaInSquareMeters = estimatedArea * 1000000;\n          const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n          areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n            center: position,\n            radius: radiusInMeters,\n            options: {\n              fillColor: fillColor,\n              fillOpacity: 0.1,\n              strokeColor: fillColor,\n              strokeOpacity: 0.4,\n              strokeWeight: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1265,\n            columnNumber: 15\n          }, this);\n        }\n      } else if (isMediumDetail) {\n        // Simplified visualization for medium zoom levels\n        // Just use a circle with a simplified radius calculation\n        let radius;\n        if (windFarm.area) {\n          // Use the known area but with simplified calculation\n          radius = Math.sqrt(windFarm.area) * 1000; // Simplified conversion to meters\n        } else if (windFarm.capacity > 500) {\n          radius = 15000; // Large wind farm\n        } else if (windFarm.capacity > 100) {\n          radius = 10000; // Medium wind farm\n        } else {\n          radius = 5000; // Small wind farm\n        }\n        areaVisualization = /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radius,\n          options: {\n            fillColor: fillColor,\n            fillOpacity: 0.08,\n            strokeColor: fillColor,\n            strokeOpacity: 0.3,\n            strokeWeight: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 13\n        }, this);\n      } else {\n        // No area visualization at low zoom levels - just markers\n        areaVisualization = null;\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MemoizedMarker, {\n          position: position,\n          icon: windFarmIcon,\n          onClick: () => {\n            // Calculate estimated area if not provided\n            let displayArea = windFarm.area;\n            if (!displayArea) {\n              if (windFarm.turbines) {\n                displayArea = Math.round(windFarm.turbines * 1.0);\n              } else {\n                displayArea = Math.round(windFarm.capacity / 6.5);\n              }\n            }\n            setSelectedVessel({\n              id: `wind-farm-${windFarm.name}`,\n              name: windFarm.name,\n              type: 'wind-farm',\n              flag: windFarm.country,\n              operator: windFarm.country,\n              capacity: windFarm.capacity,\n              status: windFarm.status,\n              area: displayArea,\n              turbines: windFarm.turbines,\n              estimatedArea: !windFarm.area,\n              isWindFarm: true\n            });\n          },\n          zIndex: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1314,\n          columnNumber: 13\n        }, this), areaVisualization]\n      }, `wind-farm-${windFarm.name}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1313,\n        columnNumber: 11\n      }, this);\n    });\n  }, [showWindFarms, isInMapBounds, currentZoom, windFarmsData]);\n\n  // Separate function to render ONLY radar coverage with zoom-based detail\n  const renderRadarCoverage = useCallback(() => {\n    if (!showWindFarms || !showRadarCoverage) return null;\n\n    // Skip rendering radar coverage at low zoom levels for performance\n    if (currentZoom < 6) return null;\n\n    // Filter to only show radar coverage for wind farms in the current bounds\n    const visibleWindFarms = windFarmsData.filter(farm => isInMapBounds(farm.lat, farm.lng));\n    const isHighDetail = currentZoom >= 8;\n    return visibleWindFarms.map(windFarm => {\n      const position = {\n        lat: windFarm.lat,\n        lng: windFarm.lng\n      };\n      const radarCoverageRadius = 77784; // 42 nautical miles in meters\n\n      return /*#__PURE__*/_jsxDEV(MemoizedCircle, {\n        center: position,\n        radius: radarCoverageRadius,\n        options: {\n          fillColor: '#FF0000',\n          fillOpacity: isHighDetail ? 0.05 : 0.03,\n          strokeColor: '#FF0000',\n          strokeOpacity: isHighDetail ? 0.7 : 0.5,\n          strokeWeight: isHighDetail ? 1 : 0.5,\n          strokeDashArray: [5, 5] // Dashed line pattern\n        }\n      }, `radar-${windFarm.name}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 9\n      }, this);\n    });\n  }, [showWindFarms, showRadarCoverage, isInMapBounds, currentZoom, windFarmsData]);\n\n  // Function to render vessel radar coverage based on gross tonnage with zoom-based detail\n  const renderVesselRadarCoverage = useCallback(() => {\n    // Skip rendering vessel radar at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    const result = [];\n\n    // Render medium vessels (GT 300-2999) with 20 NM radar\n    if (showVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT 300-2999\n      const mediumVessels = vessels.filter(v => (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && v.grossTonnage >= 300 && v.grossTonnage < 3000 && isInMapBounds(v.position[1], v.position[0]));\n      const isHighDetail = currentZoom >= 8;\n      mediumVessels.forEach(vessel => {\n        const position = {\n          lat: vessel.position[1],\n          lng: vessel.position[0]\n        };\n\n        // Medium vessels have 20 NM radar range\n        const radarRangeNM = 20;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        result.push(/*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radarRangeMeters,\n          options: {\n            fillColor: '#4285F4',\n            fillOpacity: isHighDetail ? 0.03 : 0.02,\n            strokeColor: '#4285F4',\n            strokeOpacity: isHighDetail ? 0.6 : 0.4,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5] // Dashed line pattern\n          }\n        }, `vessel-radar-${vessel.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1414,\n          columnNumber: 11\n        }, this));\n      });\n    }\n\n    // Render large vessels (GT >= 3000) with 40 NM radar\n    if (showLargeVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT >= 3000\n      const largeVessels = vessels.filter(v => (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && v.grossTonnage >= 3000 && isInMapBounds(v.position[1], v.position[0]));\n      const isHighDetail = currentZoom >= 8;\n      largeVessels.forEach(vessel => {\n        const position = {\n          lat: vessel.position[1],\n          lng: vessel.position[0]\n        };\n\n        // Large vessels have 40 NM radar range\n        const radarRangeNM = 40;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        result.push(/*#__PURE__*/_jsxDEV(MemoizedCircle, {\n          center: position,\n          radius: radarRangeMeters,\n          options: {\n            fillColor: '#4285F4',\n            fillOpacity: isHighDetail ? 0.03 : 0.02,\n            strokeColor: '#4285F4',\n            strokeOpacity: isHighDetail ? 0.6 : 0.4,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5] // Dashed line pattern\n          }\n        }, `large-vessel-radar-${vessel.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 11\n        }, this));\n      });\n    }\n    return result;\n  }, [showVesselRadar, showLargeVesselRadar, vessels, isInMapBounds, currentZoom]);\n\n  // Update the map when display mode changes\n  useEffect(() => {\n    // This effect updates the Google Maps styling when display mode changes\n    mapOptions.styles = getMapStyle(displayMode);\n\n    // If map is loaded, we can update its options\n    if (mapRef.current) {\n      mapRef.current.setOptions(mapOptions);\n    }\n  }, [displayMode, mapOptions]);\n\n  // onMapLoad with error handling \n  const onMapLoad = useCallback(map => {\n    try {\n      console.log(\"Map loaded successfully\");\n      mapRef.current = map;\n\n      // Make sure dragging is enabled\n      map.setOptions({\n        draggable: true,\n        zoomControl: false,\n        scrollwheel: true,\n        disableDoubleClickZoom: false\n      });\n\n      // We can store the map's zoom control functionality\n      zoomRef.current = {\n        zoomIn: () => {\n          const newZoom = map.getZoom() + 1;\n          map.setZoom(newZoom);\n          setCurrentZoom(newZoom);\n        },\n        zoomOut: () => {\n          const newZoom = map.getZoom() - 1;\n          map.setZoom(newZoom);\n          setCurrentZoom(newZoom);\n        }\n      };\n\n      // Get initial bounds\n      if (map.getBounds()) {\n        const bounds = map.getBounds();\n        setMapBounds({\n          north: bounds.getNorthEast().lat(),\n          east: bounds.getNorthEast().lng(),\n          south: bounds.getSouthWest().lat(),\n          west: bounds.getSouthWest().lng()\n        });\n\n        // Initialize current center from the map\n        const center = map.getCenter();\n        setCurrentMapCenter({\n          lat: center.lat(),\n          lng: center.lng()\n        });\n      }\n\n      // Set initial zoom\n      setCurrentZoom(map.getZoom());\n    } catch (error) {\n      console.error(\"Error in onMapLoad:\", error);\n    }\n  }, []);\n\n  // Add a click handler to the map background to deselect the current vessel\n  const handleMapClick = () => {\n    if (selectedVessel) {\n      setSelectedVessel(null);\n    }\n  };\n\n  // Get visible vessel count - memoized for sidebar display\n  const visibleVesselCount = useMemo(() => vessels.filter(v => {\n    const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n    return matchesFilter;\n  }).length, [vessels, filter]);\n\n  // Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\n  const displayedVessels = useMemo(() => vessels.filter(v => {\n    const matchesFilter = filter === 'all' || (filter === 'russian' ? v.isRussian : v.type === filter);\n    const inBounds = isInMapBounds(v.position[1], v.position[0]);\n    return matchesFilter && inBounds;\n  }).slice(0, 50) // Still limit to 50 for performance\n  , [vessels, filter, isInMapBounds]);\n\n  // Memoize UI elements that don't need frequent updates\n  const controlPanels = useMemo(() => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Display Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'radar' ? 'active' : '',\n          onClick: () => setDisplayMode('radar'),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1573,\n            columnNumber: 13\n          }, this), \"Radar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'sonar' ? 'active' : '',\n          onClick: () => setDisplayMode('sonar'),\n          children: [/*#__PURE__*/_jsxDEV(Waves, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1580,\n            columnNumber: 13\n          }, this), \"Sonar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1576,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: displayMode === 'fused' ? 'active' : '',\n          onClick: () => setDisplayMode('fused'),\n          children: [/*#__PURE__*/_jsxDEV(Layers, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1587,\n            columnNumber: 13\n          }, this), \"Fused\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1583,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1568,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1566,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Vessel Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1594,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'all' ? 'active' : '',\n          onClick: () => setFilter('all'),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1596,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'commercial' ? 'active' : '',\n          onClick: () => setFilter('commercial'),\n          children: \"Commercial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1602,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'military' ? 'active' : '',\n          onClick: () => setFilter('military'),\n          children: \"Military\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'submarine' ? 'active' : '',\n          onClick: () => setFilter('submarine'),\n          children: \"Russian Submarines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1614,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: filter === 'russian' ? 'active' : '',\n          onClick: () => setFilter('russian'),\n          children: \"Russian Surface\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1620,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1595,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1593,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Wind Infrastructure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1630,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: showWindFarms ? 'active' : '',\n          onClick: () => {\n            const newShowWindFarms = !showWindFarms;\n            setShowWindFarms(newShowWindFarms);\n            // If turning off wind farms, ensure radar coverage is also off\n            if (!newShowWindFarms) {\n              setShowRadarCoverage(false);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Wind, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1643,\n            columnNumber: 13\n          }, this), \"Wind Farms \", showWindFarms ? '(Shown)' : '(Hidden)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: showRadarCoverage ? 'active' : '',\n          onClick: () => {\n            setShowRadarCoverage(!showRadarCoverage);\n          },\n          disabled: !showWindFarms,\n          style: {\n            opacity: !showWindFarms ? 0.5 : 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1654,\n            columnNumber: 13\n          }, this), \"Radar Coverage (42 NM)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1646,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1631,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1629,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Commercial Vessel Infrastructure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1661,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: showVesselRadar ? 'active' : '',\n          onClick: () => setShowVesselRadar(!showVesselRadar),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1667,\n            columnNumber: 13\n          }, this), \"Vessel Radar (GT 300-2999)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: showLargeVesselRadar ? 'active' : '',\n          onClick: () => setShowLargeVesselRadar(!showLargeVesselRadar),\n          children: [/*#__PURE__*/_jsxDEV(Radar, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1674,\n            columnNumber: 13\n          }, this), \"Vessel Radar (GT > 3000)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1670,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1662,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1660,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-sm font-semibold mb-3 palantir-heading\",\n        children: \"Vessel Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1682,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: simulationEnabled ? 'active' : '',\n          onClick: () => setSimulationEnabled(!simulationEnabled),\n          children: [/*#__PURE__*/_jsxDEV(Ship, {\n            size: 16,\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1688,\n            columnNumber: 13\n          }, this), simulationEnabled ? 'Pause Movement' : 'Start Movement']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1684,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mb-1\",\n            children: [\"Speed: \", simulationSpeed, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1692,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"50\",\n            value: simulationSpeed,\n            onChange: e => setSimulationSpeed(parseInt(e.target.value)),\n            className: \"w-2/5 max-w-[80px]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1693,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1691,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1683,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1681,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), [displayMode, filter, showWindFarms, showRadarCoverage, showVesselRadar, showLargeVesselRadar, simulationEnabled, simulationSpeed]);\n\n  // Update UI to include display mode toggle\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"baltic-tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-screen\",\n      children: [showSidebar && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar w-80\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-xl font-semibold palantir-heading\",\n            children: \"Baltic Sea Tracker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1714,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowSidebar(false),\n            children: /*#__PURE__*/_jsxDEV(Menu, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1716,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1715,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1713,\n          columnNumber: 13\n        }, this), controlPanels]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1712,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 relative\",\n        children: [!showSidebar && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"absolute top-4 left-4 z-10\",\n          onClick: () => setShowSidebar(true),\n          children: /*#__PURE__*/_jsxDEV(Menu, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1730,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1726,\n          columnNumber: 13\n        }, this), loadError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl mb-4\",\n            children: \"Error loading Google Maps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1737,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm max-w-lg text-center\",\n            children: [\"There was an error loading the Google Maps API. This could be due to:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-disc pl-5 mt-2 text-left\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Network connection issues\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1741,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"API key restrictions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1742,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Ad blockers or privacy extensions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1743,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1740,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4\",\n              children: \"Please try refreshing the page or check your network connection.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1745,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => window.location.reload(),\n              className: \"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n              children: \"Reload Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1749,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1738,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1736,\n          columnNumber: 13\n        }, this), !loadError && isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: {\n            width: '100%',\n            height: '100%'\n          },\n          center: currentMapCenter,\n          zoom: mapZoom,\n          options: mapOptions,\n          onLoad: onMapLoad,\n          onClick: handleMapClick,\n          onDragEnd: () => {\n            // Only update bounds when drag is complete\n            if (mapRef.current && mapRef.current.getBounds()) {\n              const bounds = mapRef.current.getBounds();\n              setMapBounds({\n                north: bounds.getNorthEast().lat(),\n                east: bounds.getNorthEast().lng(),\n                south: bounds.getSouthWest().lat(),\n                west: bounds.getSouthWest().lng()\n              });\n\n              // Update the map center after drag\n              const center = mapRef.current.getCenter();\n              setCurrentMapCenter({\n                lat: center.lat(),\n                lng: center.lng()\n              });\n            }\n          },\n          onZoomChanged: () => {\n            if (mapRef.current) {\n              setCurrentZoom(mapRef.current.getZoom());\n\n              // Update bounds after zoom\n              if (mapRef.current.getBounds()) {\n                const bounds = mapRef.current.getBounds();\n                setMapBounds({\n                  north: bounds.getNorthEast().lat(),\n                  east: bounds.getNorthEast().lng(),\n                  south: bounds.getSouthWest().lat(),\n                  west: bounds.getSouthWest().lng()\n                });\n\n                // Update center after zoom change\n                const center = mapRef.current.getCenter();\n                setCurrentMapCenter({\n                  lat: center.lat(),\n                  lng: center.lng()\n                });\n              }\n            }\n          },\n          draggable: true,\n          children: [vessels.length > 0 && renderVessels(), showWindFarms && renderWindFarms(), showRadarCoverage && renderRadarCoverage(), (showVesselRadar || showLargeVesselRadar) && renderVesselRadarCoverage()]\n        }, mapKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1759,\n          columnNumber: 13\n        }, this) : !loadError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-full flex items-center justify-center bg-gray-900 text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl\",\n            children: \"Loading map...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1818,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1817,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-4 right-4 flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => zoomRef.current && zoomRef.current.zoomIn(),\n            children: /*#__PURE__*/_jsxDEV(ZoomIn, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1824,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1823,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => zoomRef.current && zoomRef.current.zoomOut(),\n            children: /*#__PURE__*/_jsxDEV(ZoomOut, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1827,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1826,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1822,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-4 left-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Create a simplified reset function that handles all necessary state\n              const resetMap = () => {\n                // Reset vessel selection and visualization features\n                setSelectedVessel(null);\n                setShowWindFarms(false);\n                setShowRadarCoverage(false);\n                setShowVesselRadar(false);\n                setShowLargeVesselRadar(false);\n                setSimulationEnabled(false);\n\n                // Reset display settings\n                setDisplayMode('radar');\n                setFilter('all');\n                setSimulationSpeed(10);\n\n                // Reset map position and zoom\n                if (mapRef.current) {\n                  mapRef.current.setCenter(mapCenter);\n                  mapRef.current.setZoom(mapZoom);\n                  setCurrentZoom(mapZoom);\n                  setCurrentMapCenter(mapCenter);\n                }\n\n                // Force React to remount map components\n                setMapKey(Date.now());\n              };\n\n              // Execute the reset function\n              resetMap();\n\n              // Small timeout to ensure map refreshes completely\n              setTimeout(() => {\n                if (mapRef.current && mapRef.current.overlayMapTypes) {\n                  mapRef.current.overlayMapTypes.clear();\n                }\n              }, 10);\n            },\n            style: {\n              backgroundColor: '#8B0000',\n              // Dark red color\n              color: '#FFFFFF',\n              padding: '0.5rem 1rem',\n              borderRadius: '0.25rem',\n              border: 'none',\n              fontWeight: '600',\n              cursor: 'pointer',\n              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.3)'\n            },\n            children: \"Reset filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1832,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1831,\n          columnNumber: 11\n        }, this), selectedVessel && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-4 right-4 control-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-sm font-semibold\",\n              children: selectedVessel.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1889,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedVessel(null),\n              className: \"text-gray-400 hover:text-white\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1890,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1888,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-secondary\",\n            children: selectedVessel.isWindFarm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Type: Wind Farm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1900,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Country: \", selectedVessel.flag]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1901,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Capacity: \", selectedVessel.capacity, \" MW\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1902,\n                columnNumber: 21\n              }, this), selectedVessel.turbines && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Turbines: \", selectedVessel.turbines]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1903,\n                columnNumber: 49\n              }, this), selectedVessel.area && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Area: \", selectedVessel.area, \" km\\xB2\", selectedVessel.estimatedArea && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-amber-400\",\n                  children: \" (est.)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1907,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1905,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Status: \", selectedVessel.status.charAt(0).toUpperCase() + selectedVessel.status.slice(1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1910,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Flag: \", selectedVessel.flag]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1914,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Type: \", selectedVessel.type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1915,\n                columnNumber: 21\n              }, this), selectedVessel.class && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Class: \", selectedVessel.class]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1916,\n                columnNumber: 46\n              }, this), selectedVessel.designation && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Designation: \", selectedVessel.designation]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1917,\n                columnNumber: 52\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Operator: \", selectedVessel.operator]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1918,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Length: \", selectedVessel.length, \"m\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1919,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Speed: \", selectedVessel.speed, \" knots\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1920,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Heading: \", selectedVessel.heading, \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1921,\n                columnNumber: 21\n              }, this), selectedVessel.grossTonnage && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Gross Tonnage: \", selectedVessel.grossTonnage, \" GT\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1922,\n                columnNumber: 53\n              }, this), selectedVessel.type === 'submarine' && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Depth: \", selectedVessel.depth, \"m (\", selectedVessel.isSubmerged ? 'Submerged' : 'Surfaced', \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1924,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-2\",\n                children: \"Detection Confidence:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1926,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Radar:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1928,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bg-blue-500 h-full rounded-full\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.radar * 100}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1930,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1929,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.radar * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1932,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1927,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Sonar:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1935,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bg-cyan-500 h-full rounded-full\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.sonar * 100}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1937,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1936,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.sonar * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1939,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1934,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center mt-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-12 text-xs\",\n                  children: \"Fused:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1942,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bg-green-500 h-full rounded-full\",\n                    style: {\n                      width: `${selectedVessel.detectionProbability.fused * 100}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1944,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1943,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-xs\",\n                  children: [Math.round(selectedVessel.detectionProbability.fused * 100), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1946,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1941,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1897,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1887,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1710,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-2 text-center text-sm text-gray-400\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          size: 16,\n          className: \"mr-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1958,\n          columnNumber: 11\n        }, this), \"Baltic Sea Tracker - \", filter === 'all' ? 300 : vessels.filter(v => filter === 'russian' ? v.isRussian : v.type === filter).length, \" vessels in \", displayMode, \" mode | Zoom: \", currentZoom, showWindFarms && ' | Wind Farms Shown', showRadarCoverage && showWindFarms && ' | Radar Coverage (42 NM)', showVesselRadar && ' | Vessel Radar (20/40 NM)', simulationEnabled && ` | Vessel Movement (${simulationSpeed}x)`, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2 text-green-400\",\n          children: \"\\u2022 Optimized rendering with level-of-detail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1964,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1957,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1956,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1709,\n    columnNumber: 5\n  }, this);\n};\n_s(BalticSeaTracker, \"bj/HiO7rcwIJzclS62OP2HSxCbY=\");\n_c4 = BalticSeaTracker;\nexport default BalticSeaTracker;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MemoizedMarker\");\n$RefreshReg$(_c2, \"MemoizedCircle\");\n$RefreshReg$(_c3, \"MemoizedPolygon\");\n$RefreshReg$(_c4, \"BalticSeaTracker\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","memo","Info","Ship","Menu","ZoomIn","ZoomOut","Radar","Waves","Layers","Wind","GoogleMap","Marker","Circle","Polygon","jsxDEV","_jsxDEV","Fragment","_Fragment","MemoizedMarker","_c","MemoizedCircle","_c2","MemoizedPolygon","_c3","BalticSeaTracker","_s","vessels","setVessels","selectedVessel","setSelectedVessel","filter","setFilter","showSidebar","setShowSidebar","displayMode","setDisplayMode","showWindFarms","setShowWindFarms","showRadarCoverage","setShowRadarCoverage","showVesselRadar","setShowVesselRadar","showLargeVesselRadar","setShowLargeVesselRadar","mapBounds","setMapBounds","currentZoom","setCurrentZoom","mapKey","setMapKey","Date","now","simulationEnabled","setSimulationEnabled","simulationSpeed","setSimulationSpeed","animationFrameRef","lastUpdateTimeRef","zoomRef","mapRef","mapCenter","lat","lng","mapZoom","currentMapCenter","setCurrentMapCenter","mapStyle","getMapStyle","mapOptions","disableDefaultUI","zoomControl","styles","draggable","restrictions","latLngBounds","north","south","east","west","isLoaded","loadError","mapsLoadedRef","window","google","maps","current","console","log","error","mode","elementType","stylers","color","featureType","visibility","randomCoordinate","shippingLanes","minLat","maxLat","minLng","maxLng","weight","totalWeight","reduce","sum","lane","randomPoint","Math","random","selectedLane","cumulativeWeight","generateVessels","vesselTypes","flags","russianOperators","commercialOperators","generatedVessels","occupiedPositions","MIN_DISTANCE","maxAttempts","placedVesselCount","i","type","floor","length","flag","isRussian","position","isInBalticSea","isTooClose","existingPos","distance","sqrt","pow","push","heading","speed","grossTonnage","round","operator","prefixes","suffixes","shipNumbers","name","detectionProbability","radar","sonar","fused","id","submarineNames","submarineClasses","submarineDesignations","submarineAreas","randomizedSubmarineAreas","map","pos","depth","isSubmerged","class","designation","simulatedVessels","updateVesselPositions","currentTime","deltaTime","adjustedDeltaTime","prevVessels","vessel","latitudeAdjustment","cos","PI","longitudeChange","latitudeChange","headingRad","newLng","sin","newLat","isInBalticSeaWaters","bestHeading","foundBetterDirection","angleOffset","testHeading","testRad","testLng","testLat","centerLat","centerLng","angleToCenter","atan2","headingDiff","sign","reducedSpeed","max","newHeading","originalSpeed","newSpeed","speedFactor","min","requestAnimationFrame","landAreas","shippingChannels","distanceFromEdge","abs","coastalBuffers","cancelAnimationFrame","isInMapBounds","buffer","renderVessels","isHighDetail","isMediumDetail","isLowDetail","filteredVessels","v","matchesFilter","inBounds","isSelected","iconProps","circleProps","radius","radarOpacity","radarScale","radarColor","path","SymbolPath","CIRCLE","fillColor","fillOpacity","strokeColor","strokeWeight","scale","anchor","Point","arrowSize","rotation","sonarOpacity","sonarColor","waveRadius","options","strokeOpacity","sonarArrowSize","fusedOpacity","radarValue","sonarValue","fusedColor","fusedArrowSize","confidenceRadius","defaultSize","children","icon","onClick","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","center","label","text","fontSize","fontWeight","windFarmsData","country","capacity","status","turbines","area","areaPoints","renderWindFarms","visibleWindFarms","farm","windFarm","windFarmIcon","areaVisualization","paths","areaInSquareMeters","radiusInMeters","estimatedArea","displayArea","isWindFarm","renderRadarCoverage","radarCoverageRadius","strokeDashArray","renderVesselRadarCoverage","result","mediumVessels","forEach","radarRangeNM","radarRangeMeters","largeVessels","setOptions","onMapLoad","scrollwheel","disableDoubleClickZoom","zoomIn","newZoom","getZoom","setZoom","zoomOut","getBounds","bounds","getNorthEast","getSouthWest","getCenter","handleMapClick","visibleVesselCount","displayedVessels","slice","controlPanels","className","size","newShowWindFarms","disabled","style","opacity","value","onChange","e","parseInt","target","location","reload","mapContainerStyle","width","height","zoom","onLoad","onDragEnd","onZoomChanged","resetMap","setCenter","setTimeout","overlayMapTypes","clear","backgroundColor","padding","borderRadius","border","cursor","boxShadow","charAt","toUpperCase","_c4","$RefreshReg$"],"sources":["/Users/esbenvahr/Desktop/NEW FINAL/app/src/components/BalticSeaTracker.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo, memo } from 'react';\nimport { Info, Ship, Menu, ZoomIn, ZoomOut, Radar, Waves, Layers, Wind } from 'lucide-react';\nimport '../styles/palantir-theme.css';\nimport { GoogleMap, Marker, Circle, Polygon } from '@react-google-maps/api';\n\n// Memoized components for better performance\nconst MemoizedMarker = memo(Marker);\nconst MemoizedCircle = memo(Circle);\nconst MemoizedPolygon = memo(Polygon);\n\nconst BalticSeaTracker = () => {\n  const [vessels, setVessels] = useState([]);\n  const [selectedVessel, setSelectedVessel] = useState(null);\n  const [filter, setFilter] = useState('all');\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [displayMode, setDisplayMode] = useState('radar'); // 'radar', 'sonar', or 'fused'\n  const [showWindFarms, setShowWindFarms] = useState(false);\n  const [showRadarCoverage, setShowRadarCoverage] = useState(false); // New state for radar coverage\n  const [showVesselRadar, setShowVesselRadar] = useState(false); // State for vessel radar coverage (300-2999 GT)\n  const [showLargeVesselRadar, setShowLargeVesselRadar] = useState(false); // New state for large vessel radar (>3000 GT)\n  const [mapBounds, setMapBounds] = useState(null); // Track current map bounds\n  const [currentZoom, setCurrentZoom] = useState(6); // Track current zoom level\n  const [mapKey, setMapKey] = useState(Date.now()); // Add key to force remount of map components\n  const [simulationEnabled, setSimulationEnabled] = useState(false); // Track if vessel movement simulation is enabled\n  const [simulationSpeed, setSimulationSpeed] = useState(10); // Simulation speed multiplier (default 10x)\n  const animationFrameRef = useRef(null); // Reference to store animation frame ID\n  const lastUpdateTimeRef = useRef(Date.now()); // Reference to store last update time\n  \n  const zoomRef = useRef(null);\n  const mapRef = useRef(null);\n  \n  // Google Maps settings\n  const mapCenter = { lat: 59, lng: 19 }; // Center on Baltic Sea\n  const mapZoom = 6;\n  \n  // Add state to track current map center\n  const [currentMapCenter, setCurrentMapCenter] = useState(mapCenter);\n  \n  // Memoize map style to prevent recalculations\n  const mapStyle = useMemo(() => getMapStyle(displayMode), [displayMode]);\n  \n  const mapOptions = useMemo(() => ({\n    disableDefaultUI: true,\n    zoomControl: false,\n    styles: mapStyle,\n    draggable: true, // Ensure map is draggable\n    // Hide cities with population under 5000\n    restrictions: {\n      latLngBounds: {\n        north: 66.0,\n        south: 54.0,\n        east: 30.0,\n        west: 9.0,\n      }\n    }\n  }), [mapStyle]);\n  \n  // Instead of using useJsApiLoader, we assume Google Maps is already loaded\n  const isLoaded = true;\n  const loadError = null;\n  \n  // Create a ref to track if Google Maps loaded\n  const mapsLoadedRef = useRef(false);\n  \n  // Log any errors with Google Maps loading\n  useEffect(() => {\n    if (window.google && window.google.maps && !mapsLoadedRef.current) {\n      console.log('Google Maps API loaded successfully');\n      mapsLoadedRef.current = true;\n    } else if (!window.google || !window.google.maps) {\n      console.error('Error loading Google Maps: API not available');\n    }\n  }, []);\n  \n  // Function to get map style based on display mode\n  function getMapStyle(mode) {\n    switch(mode) {\n      case 'radar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#181818\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#3d3d3d\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'sonar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#00C8FF\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#001E29\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#00E5FF\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'fused':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#3D85C6\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#0A1C2A\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#4a90e2\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      default:\n        return [];\n    }\n  }\n    \n  // Function to generate a random coordinate within Baltic Sea\n  const randomCoordinate = () => {\n    // Combine shipping lanes with wider dispersal areas\n    const shippingLanes = [\n      // Main shipping lanes (lower weight than before to reduce clustering)\n      // Danish Straits to St. Petersburg\n      {minLat: 54.5, maxLat: 55.2, minLng: 10.8, maxLng: 13.0, weight: 5}, // Danish Straits entrance\n      {minLat: 55.0, maxLat: 55.8, minLng: 12.8, maxLng: 14.5, weight: 4}, // Route east of Denmark\n      {minLat: 55.3, maxLat: 56.2, minLng: 14.5, maxLng: 16.5, weight: 4}, // Southern Sweden coast\n      {minLat: 55.0, maxLat: 56.0, minLng: 16.5, maxLng: 18.5, weight: 3}, // Midway to Gotland\n      {minLat: 57.0, maxLat: 58.2, minLng: 18.5, maxLng: 20.0, weight: 4}, // North of Gotland\n      {minLat: 58.5, maxLat: 59.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Approach to Gulf of Finland\n      {minLat: 59.2, maxLat: 59.8, minLng: 22.0, maxLng: 24.5, weight: 5}, // Gulf of Finland western part\n      {minLat: 59.7, maxLat: 60.2, minLng: 24.5, maxLng: 28.0, weight: 4}, // Gulf of Finland eastern part\n      \n      // Port approaches - reduced weights to prevent clustering\n      {minLat: 60.0, maxLat: 60.5, minLng: 24.5, maxLng: 25.0, weight: 3}, // Helsinki\n      {minLat: 60.2, maxLat: 60.5, minLng: 22.0, maxLng: 22.5, weight: 3}, // Turku\n      {minLat: 55.3, maxLat: 56.3, minLng: 12.5, maxLng: 13.0, weight: 3}, // Malmö\n      {minLat: 58.5, maxLat: 59.5, minLng: 16.5, maxLng: 18.5, weight: 3}, // Stockholm\n      {minLat: 54.3, maxLat: 54.8, minLng: 18.3, maxLng: 19.0, weight: 3}, // Gdańsk\n      {minLat: 54.0, maxLat: 54.5, minLng: 13.0, maxLng: 14.5, weight: 3}, // Rostock\n      \n      // Wider dispersal areas - these ensure ships are spread throughout the entire sea\n      // Central Baltic - large dispersal areas\n      {minLat: 56.0, maxLat: 58.0, minLng: 17.0, maxLng: 20.0, weight: 5}, // Central Baltic wider area\n      {minLat: 57.5, maxLat: 59.5, minLng: 19.0, maxLng: 22.0, weight: 5}, // Eastern Baltic wider area\n      \n      // Gulf of Bothnia - more dispersed\n      {minLat: 60.0, maxLat: 62.0, minLng: 18.0, maxLng: 21.0, weight: 4}, // Southern Bothnia dispersed\n      {minLat: 62.0, maxLat: 65.0, minLng: 18.0, maxLng: 23.0, weight: 3}, // Northern Bothnia dispersed\n      \n      // Western Baltic - more dispersed\n      {minLat: 54.0, maxLat: 56.0, minLng: 12.0, maxLng: 15.0, weight: 4}, // Western Baltic dispersed\n      {minLat: 54.0, maxLat: 57.0, minLng: 15.0, maxLng: 18.0, weight: 5}, // South-central Baltic dispersed\n      \n      // Other dispersed areas to ensure wider coverage\n      {minLat: 54.0, maxLat: 55.5, minLng: 18.0, maxLng: 20.0, weight: 3}, // Southern Baltic dispersed\n      {minLat: 56.5, maxLat: 58.0, minLng: 15.0, maxLng: 17.0, weight: 3}, // Western Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Eastern Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 22.0, maxLng: 24.0, weight: 3}, // Gulf of Riga dispersed\n    ];\n    \n    // Calculate total weight\n    const totalWeight = shippingLanes.reduce((sum, lane) => sum + lane.weight, 0);\n    \n    // Pick a random lane with weighting\n    let randomPoint = Math.random() * totalWeight;\n    let selectedLane = shippingLanes[0];\n    let cumulativeWeight = 0;\n    \n    for (const lane of shippingLanes) {\n      cumulativeWeight += lane.weight;\n      if (randomPoint <= cumulativeWeight) {\n        selectedLane = lane;\n        break;\n      }\n    }\n    \n    // Increase the spread factor to ensure better dispersal within areas\n    // Create a much more randomized distribution within the selected area\n    // rather than clustering toward the center\n    \n    // Get random point within the selected area with high dispersal\n    // Avoiding the tendency to cluster in the center\n    return [\n      selectedLane.minLng + Math.random() * (selectedLane.maxLng - selectedLane.minLng), // longitude - fully random within area\n      selectedLane.minLat + Math.random() * (selectedLane.maxLat - selectedLane.minLat)  // latitude - fully random within area\n    ];\n  };\n  \n  // Generate 300 simulated vessels with realistic properties (reduced from 1000)\n  const generateVessels = useCallback(() => {\n    const vesselTypes = ['commercial', 'military', 'fishing', 'passenger', 'tanker'];\n    const flags = ['Finland', 'Sweden', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Germany', 'Denmark', 'Russia'];\n    const russianOperators = ['Sovcomflot', 'Gazprom Fleet', 'Rosmorport', 'Russian Navy', 'Rosneft'];\n    const commercialOperators = ['Maersk', 'MSC', 'CMA CGM', 'Hapag-Lloyd', 'ONE', 'Evergreen', 'COSCO', \n                                'Yang Ming', 'HMM', 'Grimaldi', 'DFDS', 'Stena Line', 'Tallink', 'Viking Line'];\n    \n    // Generate vessels with better dispersal throughout the Baltic Sea\n    const generatedVessels = [];\n    const occupiedPositions = []; // Track positions to ensure better dispersal\n    const MIN_DISTANCE = 0.2; // Minimum distance between vessels in degrees (approx 10-20km)\n    \n    // Start with fewer vessels and then disperse them more effectively\n    const maxAttempts = 300; // Limit how many times we try to place each vessel\n    let placedVesselCount = 0;\n    \n    // Try to place vessels with appropriate spacing\n    for (let i = 1; placedVesselCount < 300 && i <= maxAttempts; i++) {\n      const type = vesselTypes[Math.floor(Math.random() * vesselTypes.length)];\n      const flag = flags[Math.floor(Math.random() * flags.length)];\n      const isRussian = flag === 'Russia' || (Math.random() < 0.05); // 5% chance of non-Russian flag but Russian operated\n      \n      // Get a potential position for the vessel\n      const position = randomCoordinate();\n      \n      // Check if position is in a lake and ensure it's in the Baltic Sea\n      // Baltic Sea general bounds\n      const isInBalticSea = (\n        position[1] >= 54.0 && position[1] <= 66.0 && // Latitude bounds\n        position[0] >= 9.0 && position[0] <= 30.0     // Longitude bounds\n      );\n      \n      // If not in Baltic Sea proper, skip this position\n      if (!isInBalticSea) {\n        continue;\n      }\n      \n      // Check if this position is too close to existing vessels\n      let isTooClose = false;\n      for (const existingPos of occupiedPositions) {\n        const distance = Math.sqrt(\n          Math.pow(position[0] - existingPos[0], 2) + \n          Math.pow(position[1] - existingPos[1], 2)\n        );\n        \n        if (distance < MIN_DISTANCE) {\n          isTooClose = true;\n          break;\n        }\n      }\n      \n      // If the position is too close to other vessels, skip this attempt\n      if (isTooClose) {\n        continue;\n      }\n      \n      // If we got here, the position is good, so add it to occupied positions\n      occupiedPositions.push(position);\n      placedVesselCount++;\n      \n      // Calculate a more realistic heading based on position\n      // Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\n      let heading;\n      const lat = position[1];\n      const lng = position[0];\n      \n      // Baltic shipping lane direction tendencies\n      if (lng < 14.0) {\n        // Danish straits and western Baltic - generally east/west traffic\n        heading = Math.random() < 0.7 ? 70 + Math.random() * 40 : 250 + Math.random() * 40;\n      } else if (lng > 23.0 && lat > 59.0) {\n        // Gulf of Finland - generally east/west traffic\n        heading = Math.random() < 0.5 ? 80 + Math.random() * 30 : 260 + Math.random() * 30;\n      } else if (lng > 19.0 && lat > 60.0) {\n        // Gulf of Bothnia - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 30 : 180 + Math.random() * 30;\n      } else if (lng > 22.0 && lat < 58.0 && lat > 56.5) {\n        // Gulf of Riga - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 40 : 180 + Math.random() * 40;\n      } else if (lat < 56.0 && lng > 18.0) {\n        // Southern Baltic to Polish/Lithuanian ports\n        heading = Math.random() < 0.6 ? 140 + Math.random() * 40 : 320 + Math.random() * 40;\n      } else {\n        // Central Baltic - mixed traffic patterns\n        heading = Math.floor(Math.random() * 360);\n      }\n      \n      // Realistic speed based on vessel type and weather (assumed normal conditions)\n      let speed;\n      if (type === 'commercial' || type === 'tanker') {\n        speed = 10 + Math.floor(Math.random() * 8); // 10-18 knots\n      } else if (type === 'passenger') {\n        speed = 15 + Math.floor(Math.random() * 10); // 15-25 knots\n      } else if (type === 'military') {\n        speed = 5 + Math.floor(Math.random() * 25); // 5-30 knots (more variable)\n      } else if (type === 'fishing') {\n        // Fishing vessels move slower or may be stationary when fishing\n        speed = Math.random() < 0.3 ? 0 : 5 + Math.floor(Math.random() * 7); // 0 or 5-12 knots\n      } else {\n        speed = Math.floor(Math.random() * 15) + 5; // 5-20 knots default\n      }\n      \n      // Determine vessel size\n      const length = type === 'tanker' || type === 'commercial' \n        ? 100 + Math.floor(Math.random() * 300) \n        : type === 'military' \n          ? 50 + Math.floor(Math.random() * 200)\n          : 20 + Math.floor(Math.random() * 50);\n      \n      // Calculate gross tonnage (GT) based on vessel length and type\n      // Using simplified formula based on vessel dimensions\n      let grossTonnage;\n      if (type === 'commercial' || type === 'tanker') {\n        // Commercial and tanker vessels have higher GT/length ratios\n        grossTonnage = Math.round(length * length * 0.18); // Approximation\n      } else if (type === 'military') {\n        // Military vessels are typically more dense but smaller\n        grossTonnage = Math.round(length * length * 0.16);\n      } else if (type === 'passenger') {\n        // Passenger vessels have high volume and less dense cargo\n        grossTonnage = Math.round(length * length * 0.2);\n      } else {\n        // Fishing and other vessels\n        grossTonnage = Math.round(length * length * 0.12);\n      }\n      \n      // Determine operator\n      let operator;\n      if (isRussian) {\n        operator = russianOperators[Math.floor(Math.random() * russianOperators.length)];\n      } else {\n        operator = commercialOperators[Math.floor(Math.random() * commercialOperators.length)];\n      }\n      \n      // Generate a realistic vessel name\n      const prefixes = isRussian ? \n        ['Admiral', 'Kapitan', 'Vostok', 'Sibir', 'Moskva', 'Sankt-Peterburg', 'Akademik'] : \n        ['Northern', 'Baltic', 'Sea', 'Atlantic', 'Pacific', 'Star', 'Pioneer'];\n      \n      const suffixes = isRussian ?\n        ['Kuznetsov', 'Nakhimov', 'Gorshkov', 'Lazarev', 'Kasatonov', 'Ustinov'] :\n        ['Adventurer', 'Explorer', 'Navigator', 'Voyager', 'Mariner', 'Trader', 'Express'];\n        \n      const shipNumbers = ['I', 'II', 'III', 'IV', 'V', '1', '2', '3', '4', '5'];\n      \n      let name;\n      if (Math.random() < 0.3) {\n        // 30% chance of having a prefix-suffix name\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${suffixes[Math.floor(Math.random() * suffixes.length)]}`;\n      } else if (Math.random() < 0.5) {\n        // 20% chance of having a name with a number\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${shipNumbers[Math.floor(Math.random() * shipNumbers.length)]}`;\n      } else {\n        // 50% chance of having a simple prefix or suffix name\n        name = Math.random() < 0.5 ? \n          prefixes[Math.floor(Math.random() * prefixes.length)] : \n          suffixes[Math.floor(Math.random() * suffixes.length)];\n      }\n      \n      if (type === 'military' && isRussian) {\n        name = `RFS ${name}`; // Russian Federation Ship\n      }\n      \n      // Calculate a detection probability\n      const detectionProbability = {\n        radar: Math.random(), // 0-1, higher means more visible on radar\n        sonar: Math.random(), // 0-1, higher means more detectable by sonar\n        fused: (Math.random() + Math.random()) / 2 // average of two values for a more normal distribution\n      };\n      \n      // Generate a vessel object with all properties\n      generatedVessels.push({\n        id: placedVesselCount,\n        name,\n        type,\n        flag,\n        isRussian,\n        position,\n        heading,\n        speed,\n        length,\n        operator,\n        detectionProbability,\n        grossTonnage\n      });\n    }\n    \n    // More evenly disperse submarines too\n    // Generate Russian submarines with special characteristics\n    const submarineNames = [\n      'Krasnodar', 'Novorossiysk', 'Rostov-on-Don', 'Stary Oskol', \n      'Velikiy Novgorod', 'Kolpino', 'Sankt Peterburg'\n    ];\n    \n    const submarineClasses = [\n      'Kilo-class', 'Kilo-class', 'Kilo-class', 'Kilo-class',\n      'Improved Kilo-class', 'Improved Kilo-class', 'Lada-class'\n    ];\n    \n    const submarineDesignations = [\n      'B-265', 'B-261', 'B-237', 'B-262', \n      'B-268', 'B-271', 'B-585'\n    ];\n    \n    // Use more strategic submarine positions\n    const submarineAreas = [\n      // Gulf of Finland approach - monitoring traffic to St. Petersburg\n      [26.2, 59.7],\n      // Near NATO naval exercise areas in central Baltic\n      [19.3, 56.8],\n      // Monitoring approach to Stockholm archipelago\n      [18.9, 58.9],\n      // Deep water between Gotland and Latvia (strategic position)\n      [20.1, 57.3],\n      // Patrolling near Kaliningrad naval base\n      [19.6, 55.2],\n      // Monitoring naval traffic near Gdańsk\n      [18.8, 54.8],\n      // Danish straits approaches - key strategic chokepoint\n      [12.8, 55.4]\n    ];\n    \n    // Add some randomness to submarine positions to avoid perfect predictability\n    const randomizedSubmarineAreas = submarineAreas.map(pos => [\n      pos[0] + (Math.random() - 0.5) * 0.5,  // Add up to ±0.25 degrees longitude\n      pos[1] + (Math.random() - 0.5) * 0.3   // Add up to ±0.15 degrees latitude\n    ]);\n    \n    // Add submarines to generated vessels\n    for (let i = 0; i < 7; i++) {\n      const position = randomizedSubmarineAreas[i];\n      const heading = Math.floor(Math.random() * 360);\n      const speed = 5 + Math.floor(Math.random() * 10); // Submarines move slower on average\n      const depth = 20 + Math.floor(Math.random() * 180); // Depth in meters\n      \n      // Submarine detection characteristics\n      // Low radar detection when submerged, high sonar signature\n      const isSubmerged = Math.random() > 0.3; // 70% chance of being submerged\n      \n      const detectionProbability = {\n        radar: isSubmerged ? 0.05 + Math.random() * 0.1 : 0.3 + Math.random() * 0.2, // Low radar when submerged\n        sonar: 0.6 + Math.random() * 0.4, // High sonar signature\n        fused: isSubmerged ? \n          (0.05 + Math.random() * 0.1 + 0.6 + Math.random() * 0.4) / 2 : // Average when submerged\n          (0.3 + Math.random() * 0.2 + 0.6 + Math.random() * 0.4) / 2    // Average when surfaced\n      };\n      \n      generatedVessels.push({\n        id: 1001 + i, // IDs starting from 1001 for submarines\n        name: `RFS ${submarineNames[i]}`,\n        type: 'submarine',\n        class: submarineClasses[i],\n        designation: submarineDesignations[i],\n        flag: 'Russia',\n        isRussian: true,\n        position,\n        heading,\n        speed,\n        depth,\n        length: 70 + Math.floor(Math.random() * 20), // Kilo-class submarines are around 70-74m\n        isSubmerged,\n        operator: 'Russian Navy',\n        detectionProbability\n      });\n    }\n    \n    return generatedVessels;\n  }, []);\n  \n  // Generate vessel data when component mounts\n  useEffect(() => {\n    const simulatedVessels = generateVessels();\n    setVessels(simulatedVessels);\n  }, [generateVessels]);\n  \n  // Update vessel positions based on speed and heading\n  const updateVesselPositions = useCallback(() => {\n    if (!simulationEnabled) return;\n    \n    const currentTime = Date.now();\n    const deltaTime = (currentTime - lastUpdateTimeRef.current) / 1000; // Convert ms to seconds\n    lastUpdateTimeRef.current = currentTime;\n    \n    // Apply speed multiplier to deltaTime\n    const adjustedDeltaTime = deltaTime * simulationSpeed;\n    \n    // Skip if delta time is too large (e.g., browser tab was inactive)\n    if (adjustedDeltaTime > 5) return;\n    \n    setVessels(prevVessels => {\n      return prevVessels.map(vessel => {\n        // Skip stationary vessels\n        if (vessel.speed === 0) return vessel;\n        \n        // Convert knots to degrees per second\n        // 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n        // Adjust for latitude (narrower longitude degrees at higher latitudes)\n        const latitudeAdjustment = Math.cos(vessel.position[1] * Math.PI / 180);\n        const longitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime / latitudeAdjustment;\n        const latitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime;\n        \n        // Calculate new position based on heading\n        const headingRad = vessel.heading * Math.PI / 180;\n        const newLng = vessel.position[0] + (longitudeChange * Math.sin(headingRad));\n        const newLat = vessel.position[1] + (latitudeChange * Math.cos(headingRad));\n        \n        // Enhanced boundary checking to keep vessels within the actual Baltic Sea water\n        if (!isInBalticSeaWaters(newLat, newLng)) {\n          // If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n          // Use a more detailed approach to find the right direction\n          \n          // Try finding a better direction by checking multiple angles\n          let bestHeading = vessel.heading;\n          let foundBetterDirection = false;\n          \n          // Check 8 directions around to find waters\n          for (let angleOffset = 0; angleOffset < 360; angleOffset += 45) {\n            const testHeading = (vessel.heading + angleOffset) % 360;\n            const testRad = testHeading * Math.PI / 180;\n            \n            // Check a position further out in this direction\n            const testLng = vessel.position[0] + (longitudeChange * 5 * Math.sin(testRad));\n            const testLat = vessel.position[1] + (latitudeChange * 5 * Math.cos(testRad));\n            \n            if (isInBalticSeaWaters(testLat, testLng)) {\n              bestHeading = testHeading;\n              foundBetterDirection = true;\n              break;\n            }\n          }\n          \n          // If no good direction found, head toward the Baltic center\n          if (!foundBetterDirection) {\n            const centerLat = 58.5; // More centered in the main Baltic basin\n            const centerLng = 20;   // Adjusted to be in deeper waters\n            const angleToCenter = Math.atan2(centerLng - vessel.position[0], centerLat - vessel.position[1]) * 180 / Math.PI;\n            \n            // Turn gradually toward the center\n            const headingDiff = ((angleToCenter - vessel.heading + 540) % 360) - 180;\n            bestHeading = (vessel.heading + Math.sign(headingDiff) * 45) % 360;\n            if (bestHeading < 0) bestHeading += 360;\n          }\n          \n          // Slow down near boundaries\n          const reducedSpeed = Math.max(1, vessel.speed * 0.5);\n          \n          return {\n            ...vessel,\n            heading: bestHeading,\n            speed: reducedSpeed // Temporarily reduce speed when changing course\n          };\n        }\n        \n        // For military and submarine vessels, randomly change heading occasionally\n        let newHeading = vessel.heading;\n        const originalSpeed = vessel.speed;\n        let newSpeed = originalSpeed;\n        \n        if ((vessel.type === 'military' || vessel.type === 'submarine') && Math.random() < 0.01 * adjustedDeltaTime) {\n          // Change heading by up to +/- 30 degrees\n          newHeading = (vessel.heading + (Math.random() * 60 - 30)) % 360;\n          if (newHeading < 0) newHeading += 360;\n          \n          // Military vessels might change speed during maneuvers\n          if (Math.random() < 0.3) {\n            const speedFactor = 0.7 + Math.random() * 0.6; // 70-130% of current speed\n            newSpeed = Math.max(1, Math.min(30, originalSpeed * speedFactor));\n          }\n        }\n        // Smaller random heading changes for other vessels to simulate realistic movement\n        else if (Math.random() < 0.005 * adjustedDeltaTime) {\n          // Change heading by up to +/- 10 degrees\n          newHeading = (vessel.heading + (Math.random() * 20 - 10)) % 360;\n          if (newHeading < 0) newHeading += 360;\n        }\n        \n        return {\n          ...vessel,\n          position: [newLng, newLat],\n          heading: newHeading,\n          speed: newSpeed\n        };\n      });\n    });\n    \n    // Request next animation frame\n    animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n  }, [simulationEnabled, simulationSpeed]);\n  \n  // Function to check if a point is in Baltic Sea waters\n  // This is a more precise check than just the bounding box\n  const isInBalticSeaWaters = useCallback((lat, lng) => {\n    // First check overall bounds\n    if (lat < 54.0 || lat > 66.0 || lng < 9.0 || lng > 30.0) {\n      return false;\n    }\n    \n    // Define areas that are land (to be avoided)\n    // Format: [south, north, west, east]\n    const landAreas = [\n      // Southern Sweden\n      [55.0, 59.5, 12.5, 15.5],\n      // Finland\n      [59.7, 65.5, 21.0, 30.0],\n      // Estonia\n      [57.5, 59.7, 23.0, 28.5],\n      // Latvia/Lithuania coast\n      [55.5, 57.5, 21.0, 28.0],\n      // Poland inland\n      [54.0, 55.5, 15.0, 19.5],\n      // Germany/Denmark inland\n      [54.0, 56.0, 9.0, 12.0],\n      // Gotland\n      [56.8, 58.0, 18.0, 19.2],\n      // Åland Islands\n      [59.7, 60.5, 19.3, 21.3],\n      // Bornholm\n      [54.9, 55.3, 14.7, 15.2]\n    ];\n    \n    // Define key shipping channels and deep waters (preferred areas)\n    // Format: [south, north, west, east, weight]\n    const shippingChannels = [\n      // Main Baltic basin\n      [55.5, 59.0, 16.5, 22.0, 10],\n      // Gulf of Finland shipping lane\n      [59.3, 60.2, 22.5, 28.0, 8],\n      // Approach to Stockholm\n      [58.7, 59.5, 17.5, 19.5, 6],\n      // Approach to Riga\n      [56.8, 58.0, 22.5, 24.5, 6],\n      // Approach to Helsinki/Tallinn\n      [59.2, 59.9, 24.0, 25.5, 8],\n      // Western Baltic shipping lane\n      [54.5, 56.0, 12.0, 15.0, 8],\n      // Kattegat\n      [56.0, 57.5, 10.5, 12.0, 6],\n      // Gulf of Bothnia\n      [60.5, 63.5, 18.5, 21.5, 5]\n    ];\n    \n    // Check if point is in a land area\n    for (const [south, north, west, east] of landAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // Further check for complex coastlines\n        // This is a very simplified approach - we add some randomness \n        // to prevent vessels from getting stuck at sharp boundary transitions\n        \n        // If near the edge of a land area, there's a small chance to still consider it water\n        // This helps vessels navigate around complex coastlines without getting stuck\n        const distanceFromEdge = Math.min(\n          Math.abs(lat - south),\n          Math.abs(lat - north),\n          Math.abs(lng - west),\n          Math.abs(lng - east)\n        );\n        \n        // Very close to edge - might be a complex coastline\n        if (distanceFromEdge < 0.1) {\n          // 20% chance to consider it water if very close to edge\n          // This randomness helps prevent getting stuck at boundaries\n          return Math.random() < 0.2;\n        }\n        \n        return false; // It's in a land area\n      }\n    }\n\n    // Check if in a preferred shipping channel\n    for (const [south, north, west, east] of shippingChannels) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true; // In a shipping channel - definitely good\n      }\n    }\n    \n    // For areas not explicitly defined, use the following general rules\n    \n    // Avoid shallow coastal waters (simplified approach)\n    // These are general buffer zones around landmasses\n    const coastalBuffers = [\n      // Swedish coast buffer\n      [55.0, 59.5, 15.5, 16.0],\n      // Finnish coast buffer\n      [59.7, 65.5, 20.0, 21.0],\n      // Estonian coast buffer\n      [57.5, 59.7, 22.0, 23.0],\n      // Latvian/Lithuanian coast buffer\n      [55.5, 57.5, 20.0, 21.0],\n      // Polish coast buffer\n      [54.0, 55.5, 14.0, 15.0],\n      // German/Danish coast buffer\n      [54.0, 56.0, 12.0, 12.5]\n    ];\n    \n    // Check coastal buffers with higher probability of rejection\n    for (const [south, north, west, east] of coastalBuffers) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 70% chance to consider coastal buffers as land\n        return Math.random() > 0.7;\n      }\n    }\n    \n    // If we got here, it's probably in open water\n    return true;\n  }, []);\n  \n  // Start/stop vessel position updates when simulation state changes\n  useEffect(() => {\n    if (simulationEnabled) {\n      lastUpdateTimeRef.current = Date.now();\n      animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    // Cleanup when component unmounts\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [simulationEnabled, updateVesselPositions]);\n  \n  // Function to check if an item is in the current map bounds\n  const isInMapBounds = useCallback((lat, lng) => {\n    if (!mapBounds) return true; // If no bounds yet, show everything\n    \n    // Add buffer to avoid popping at edges\n    const buffer = 0.5; // Buffer in degrees\n    \n    return (\n      lat >= mapBounds.south - buffer &&\n      lat <= mapBounds.north + buffer &&\n      lng >= mapBounds.west - buffer &&\n      lng <= mapBounds.east + buffer\n    );\n  }, [mapBounds]);\n  \n  // Function to render vessels based on the display mode and zoom level\n  const renderVessels = useCallback(() => {\n    // Use zoom level to determine detail level\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    const isLowDetail = currentZoom < 6;\n    \n    // Filter vessels based on current filter and map bounds\n    const filteredVessels = vessels.filter(v => {\n      // First apply user filter\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      // Then check if in current map bounds\n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    });\n    \n    // Create vessel markers\n    return filteredVessels.map(vessel => {\n      // Convert vessel position to LatLng\n      const position = { lat: vessel.position[1], lng: vessel.position[0] };\n      const isSelected = selectedVessel?.id === vessel.id;\n      \n      // Define icon and visualization based on display mode and zoom level\n      let iconProps = {};\n      let circleProps = { radius: 0 };\n    \n      switch(displayMode) {\n        case 'radar':\n          // Radar mode - shows vessels as dots with direction indicators\n          const radarOpacity = vessel.type === 'submarine' && vessel.isSubmerged ? \n            0.1 + vessel.detectionProbability.radar * 0.2 : \n            0.3 + vessel.detectionProbability.radar * 0.7;\n          \n          const radarScale = vessel.type === 'submarine' ? \n            vessel.isSubmerged ? 0.5 : 0.8 : \n            Math.max(0.6, Math.min(1.2, 0.6 + vessel.length / 300));\n          \n          const radarColor = vessel.type === 'submarine' ? \n            'rgb(255, 0, 0)' : \n            vessel.isRussian ? 'rgb(231, 76, 60)' : 'rgb(52, 152, 219)';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else if (isMediumDetail) {\n            // Simplified arrow for medium detail\n            const arrowSize = radarScale * 4;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L -${arrowSize/2},${arrowSize} Z`, // Simpler arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading, // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Full detail for high zoom levels\n            const arrowSize = radarScale * 5;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L 0,${arrowSize/2} L -${arrowSize/2},${arrowSize} Z`, // Arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading, // Rotate according to vessel heading\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          break;\n          \n        case 'sonar':\n          // Sonar mode - shows vessels as acoustic signatures\n          const sonarOpacity = vessel.type === 'submarine' ? \n            0.5 + vessel.detectionProbability.sonar * 0.5 : \n            0.2 + vessel.detectionProbability.sonar * 0.8;\n          \n          const sonarColor = vessel.type === 'submarine' ? '#FF00FF' : '#00E5FF';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Simplified acoustic wave\n            if (vessel.type === 'submarine') {\n              const waveRadius = vessel.speed * 80;\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          } else {\n            // Use the same arrow shape as radar mode but with sonar colors\n            const sonarArrowSize = vessel.type === 'submarine' ? 5 : 4;\n            iconProps = {\n              path: `M 0,-${sonarArrowSize} L ${sonarArrowSize/2},${sonarArrowSize} L 0,${sonarArrowSize/2} L -${sonarArrowSize/2},${sonarArrowSize} Z`, // Arrow shape\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Add acoustic wave circle - only at higher zoom levels\n            if (isHighDetail) {\n              const waveRadius = vessel.type === 'submarine' ? \n                Math.max(500, vessel.speed * 100) : \n                Math.max(300, vessel.speed * 60);\n                \n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.05,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.2,\n                  strokeWeight: 1,\n                }\n              };\n            } else if (isMediumDetail && vessel.type === 'submarine') {\n              const waveRadius = Math.max(300, vessel.speed * 80);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          }\n          break;\n          \n        case 'fused':\n          // Fused mode - combines radar and sonar data\n          const fusedOpacity = 0.4 + vessel.detectionProbability.fused * 0.6;\n          \n          // Create color gradient based on radar/sonar detection probabilities\n          const radarValue = Math.floor(vessel.detectionProbability.radar * 255);\n          const sonarValue = Math.floor(vessel.detectionProbability.sonar * 255);\n          const fusedColor = vessel.isRussian ? \n            `rgb(255, 100, 100)` : \n            `rgb(100, ${radarValue}, ${sonarValue})`;\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Use the same arrow shape as other modes but with fused colors\n            const fusedArrowSize = 5;\n            iconProps = {\n              path: `M 0,-${fusedArrowSize} L ${fusedArrowSize/2},${fusedArrowSize} L 0,${fusedArrowSize/2} L -${fusedArrowSize/2},${fusedArrowSize} Z`, // Arrow shape\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.heading,\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          \n          // Add confidence circle - only at higher zoom levels\n          if (isHighDetail) {\n            const confidenceRadius = 300 + (1 - vessel.detectionProbability.fused) * 1000;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.4,\n                strokeWeight: 0.5,\n              }\n            };\n          } else if (isMediumDetail && (vessel.type === 'military' || vessel.type === 'submarine')) {\n            // Only show confidence circles for important vessels at medium zoom\n            const confidenceRadius = 200 + (1 - vessel.detectionProbability.fused) * 800;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.3,\n                strokeWeight: 0.5,\n              }\n            };\n          }\n          break;\n          \n        default:\n          // Default to radar mode with arrow icon\n          const defaultSize = 5;\n          iconProps = {\n            path: `M 0,-${defaultSize} L ${defaultSize/2},${defaultSize} L 0,${defaultSize/2} L -${defaultSize/2},${defaultSize} Z`, // Arrow shape\n            fillColor: '#FFFFFF',\n            fillOpacity: 0.8,\n            strokeColor: '#000000',\n            strokeWeight: 1,\n            rotation: vessel.heading,\n            scale: 1,\n            anchor: new window.google.maps.Point(0, 0),\n          };\n          break;\n      }\n\n      return (\n        <React.Fragment key={vessel.id}>\n          <MemoizedMarker\n            position={position}\n            icon={iconProps}\n            onClick={() => setSelectedVessel(vessel)}\n            zIndex={isSelected ? 1000 : vessel.type === 'submarine' ? 500 : 100}\n          />\n          \n          {circleProps.radius > 0 && (\n            <MemoizedCircle\n              center={position}\n              radius={circleProps.radius}\n              options={circleProps.options}\n            />\n          )}\n          \n          {vessel.type === 'submarine' && vessel.isSubmerged && displayMode !== 'fused' && isHighDetail && (\n            <MemoizedMarker\n              position={{\n                lat: position.lat + 0.03,\n                lng: position.lng + 0.03\n              }}\n              label={{\n                text: `${vessel.depth}m`,\n                color: '#FFFFFF',\n                fontSize: '8px',\n                fontWeight: 'bold'\n              }}\n              icon={{\n                path: 0, // CIRCLE\n                scale: 0,\n                fillOpacity: 0,\n                strokeOpacity: 0\n              }}\n            />\n          )}\n        </React.Fragment>\n      );\n    });\n  }, [vessels, filter, isInMapBounds, selectedVessel, displayMode, currentZoom]); // Added dependencies for memoization\n  \n  // Baltic Sea wind farm data - expanded with EMODnet data\n  const windFarmsData = [\n    // Denmark\n    { \n      name: \"Kriegers Flak\", \n      country: \"Denmark\", \n      capacity: 604, \n      lat: 54.9833, \n      lng: 13.0333, \n      status: \"operational\",\n      turbines: 72,\n      area: 132, // km²\n      areaPoints: [\n        {lat: 54.9633, lng: 13.0133},\n        {lat: 54.9733, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0133},\n        {lat: 54.9833, lng: 12.9933},\n        {lat: 54.9633, lng: 13.0133}\n      ]\n    },\n    { \n      name: \"Middelgrunden\", \n      country: \"Denmark\", \n      capacity: 40, \n      lat: 55.6853, \n      lng: 12.6913, \n      status: \"operational\",\n      turbines: 20,\n      area: 4, // km²\n      areaPoints: [\n        {lat: 55.6903, lng: 12.6813},\n        {lat: 55.6903, lng: 12.7013},\n        {lat: 55.6803, lng: 12.7013},\n        {lat: 55.6803, lng: 12.6813},\n        {lat: 55.6903, lng: 12.6813}\n      ]\n    },\n    { \n      name: \"Rødsand I\", \n      country: \"Denmark\", \n      capacity: 166, \n      lat: 54.5508, \n      lng: 11.7083, \n      status: \"operational\",\n      turbines: 72,\n      area: 35, // km²\n      areaPoints: [\n        {lat: 54.5408, lng: 11.6883},\n        {lat: 54.5408, lng: 11.7283},\n        {lat: 54.5608, lng: 11.7283},\n        {lat: 54.5608, lng: 11.6883},\n        {lat: 54.5408, lng: 11.6883}\n      ]\n    },\n    { name: \"Rødsand II\", country: \"Denmark\", capacity: 207, lat: 54.5580, lng: 11.6170, status: \"operational\", turbines: 90, area: 40 },\n    { name: \"Anholt\", country: \"Denmark\", capacity: 400, lat: 56.6000, lng: 11.2097, status: \"operational\", turbines: 111, area: 88 },\n    { name: \"Sprogø\", country: \"Denmark\", capacity: 21, lat: 55.3414, lng: 10.9767, status: \"operational\", turbines: 7, area: 6 },\n    { name: \"Samsø\", country: \"Denmark\", capacity: 23, lat: 55.7194, lng: 10.5639, status: \"operational\", turbines: 10, area: 5 },\n    \n    // Sweden\n    { name: \"Karehamn\", country: \"Sweden\", capacity: 48, lat: 56.9750, lng: 17.0000, status: \"operational\", turbines: 16, area: 8 },\n    { name: \"Lillgrund\", country: \"Sweden\", capacity: 110, lat: 55.5000, lng: 12.7667, status: \"operational\", turbines: 48, area: 6 },\n    { name: \"Södra Midsjöbanken\", country: \"Sweden\", capacity: 1500, lat: 55.7500, lng: 17.4000, status: \"planned\", turbines: 170, area: 265 },\n    { name: \"Storgrundet\", country: \"Sweden\", capacity: 265, lat: 61.1532, lng: 17.4376, status: \"planned\", turbines: 70, area: 57 },\n    { name: \"Utgrunden\", country: \"Sweden\", capacity: 10.5, lat: 56.3350, lng: 16.2860, status: \"operational\", turbines: 7, area: 2 },\n    { name: \"Bockstigen\", country: \"Sweden\", capacity: 2.5, lat: 57.0389, lng: 18.1378, status: \"operational\", turbines: 5, area: 1 },\n    \n    // Germany\n    { name: \"EnBW Baltic 1\", country: \"Germany\", capacity: 48, lat: 54.6080, lng: 12.6520, status: \"operational\", turbines: 21, area: 7 },\n    { name: \"EnBW Baltic 2\", country: \"Germany\", capacity: 288, lat: 54.9900, lng: 13.1666, status: \"operational\", turbines: 80, area: 27 },\n    { name: \"Arkona\", country: \"Germany\", capacity: 385, lat: 54.7833, lng: 14.1000, status: \"operational\", turbines: 60, area: 39 },\n    { name: \"Wikinger\", country: \"Germany\", capacity: 350, lat: 54.8333, lng: 14.0750, status: \"operational\", turbines: 70, area: 34 },\n    { name: \"Arcadis Ost 1\", country: \"Germany\", capacity: 257, lat: 54.8333, lng: 13.7500, status: \"under construction\", turbines: 27, area: 30 },\n    { name: \"Gennaker\", country: \"Germany\", capacity: 927, lat: 54.5500, lng: 12.2500, status: \"planned\", turbines: 103, area: 176 },\n    { name: \"Nordlicher Grund\", country: \"Germany\", capacity: 630, lat: 54.9831, lng: 6.3582, status: \"planned\", turbines: 64, area: 57 },\n    { name: \"Ostseeschatz\", country: \"Germany\", capacity: 372, lat: 54.3660, lng: 11.9165, status: \"planned\", turbines: 62, area: 40 },\n    { name: \"Baltic Eagle\", country: \"Germany\", capacity: 476, lat: 54.7778, lng: 13.9239, status: \"under construction\", turbines: 50, area: 40 },\n    \n    // Finland\n    { name: \"Tahkoluoto\", country: \"Finland\", capacity: 42, lat: 61.6330, lng: 21.3830, status: \"operational\", turbines: 10, area: 15 },\n    { name: \"Ajos\", country: \"Finland\", capacity: 42, lat: 65.7166, lng: 24.5166, status: \"operational\", turbines: 13, area: 10 },\n    { name: \"Kemi Ajos I\", country: \"Finland\", capacity: 15, lat: 65.6405, lng: 24.5267, status: \"operational\", turbines: 5, area: 6 },\n    { name: \"Kemi Ajos II\", country: \"Finland\", capacity: 16, lat: 65.6563, lng: 24.5402, status: \"operational\", turbines: 3, area: 4 },\n    { name: \"Raahe\", country: \"Finland\", capacity: 44, lat: 64.6500, lng: 24.3500, status: \"planned\", turbines: 8, area: 15 },\n    { name: \"Korsnäs\", country: \"Finland\", capacity: 1300, lat: 62.7500, lng: 21.0500, status: \"planned\", turbines: 70, area: 175 },\n    { name: \"Siikajoki\", country: \"Finland\", capacity: 100, lat: 64.8167, lng: 24.6167, status: \"planned\", turbines: 20, area: 25 },\n    \n    // Poland\n    { name: \"Baltic Power\", country: \"Poland\", capacity: 1200, lat: 55.0000, lng: 18.3330, status: \"under construction\", turbines: 76, area: 131 },\n    { name: \"FEW Baltic II\", country: \"Poland\", capacity: 350, lat: 54.8000, lng: 16.5000, status: \"planned\", turbines: 37, area: 41 },\n    { name: \"Baltica 1\", country: \"Poland\", capacity: 896, lat: 55.2060, lng: 17.1633, status: \"planned\", turbines: 64, area: 108 },\n    { name: \"Baltica 2\", country: \"Poland\", capacity: 1498, lat: 55.3340, lng: 16.8630, status: \"planned\", turbines: 107, area: 190 },\n    { name: \"Baltica 3\", country: \"Poland\", capacity: 1045, lat: 55.3340, lng: 16.7000, status: \"planned\", turbines: 95, area: 131 },\n    { name: \"MFW Bałtyk I\", country: \"Poland\", capacity: 1560, lat: 55.2383, lng: 17.4633, status: \"planned\", turbines: 100, area: 128 },\n    { name: \"MFW Bałtyk II\", country: \"Poland\", capacity: 720, lat: 55.1233, lng: 17.2467, status: \"planned\", turbines: 60, area: 65 },\n    { name: \"MFW Bałtyk III\", country: \"Poland\", capacity: 720, lat: 55.0817, lng: 17.0667, status: \"planned\", turbines: 60, area: 80 },\n    \n    // Estonia\n    { \n      name: \"Estonia Offshore 1\", \n      country: \"Estonia\", \n      capacity: 1000, \n      lat: 58.8000, \n      lng: 22.0000, \n      status: \"planned\",\n      turbines: 115,\n      area: 230, // km²\n      areaPoints: [\n        {lat: 58.7800, lng: 21.9600},\n        {lat: 58.7800, lng: 22.0400},\n        {lat: 58.8200, lng: 22.0400},\n        {lat: 58.8200, lng: 21.9600},\n        {lat: 58.7800, lng: 21.9600}\n      ]\n    },\n    { name: \"Liivi\", country: \"Estonia\", capacity: 1000, lat: 57.8333, lng: 23.5000, status: \"planned\", turbines: 100, area: 160 },\n    { name: \"Hiiumaa\", country: \"Estonia\", capacity: 700, lat: 59.0833, lng: 22.3833, status: \"planned\", turbines: 70, area: 100 },\n    { name: \"Saare-Liivi\", country: \"Estonia\", capacity: 600, lat: 57.9500, lng: 22.6833, status: \"planned\", turbines: 60, area: 90 },\n    \n    // Latvia\n    { name: \"ELWIND\", country: \"Latvia\", capacity: 1000, lat: 57.0830, lng: 20.7500, status: \"planned\", turbines: 100, area: 200 },\n    \n    // Lithuania\n    { name: \"Lithuanian OWF I\", country: \"Lithuania\", capacity: 700, lat: 55.8330, lng: 20.5000, status: \"planned\", turbines: 70, area: 120 },\n    \n    // Special projects\n    { \n      name: \"Bornholm Energy Island\", \n      country: \"Denmark\", \n      capacity: 3000, \n      lat: 55.1000, \n      lng: 14.9000, \n      status: \"planned\",\n      turbines: 200,\n      area: 400, // km²\n      areaPoints: [\n        {lat: 55.0500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.8500}\n      ]\n    },\n    { name: \"Hywind Tampen\", country: \"Norway\", capacity: 88, lat: 61.2500, lng: 20.4000, status: \"operational\", turbines: 11, area: 22 }\n  ];\n  \n  // Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\n  const renderWindFarms = useCallback(() => {\n    if (!showWindFarms) return null;\n    \n    // Filter wind farms to only show those in current map bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    \n    return visibleWindFarms\n      .map(windFarm => {\n        const position = { lat: windFarm.lat, lng: windFarm.lng };\n        \n        // Use different colors based on wind farm status\n        const fillColor = windFarm.status === \"operational\" \n          ? '#FFC107' // amber color for operational wind farms\n          : '#4CAF50'; // green color for planned and under construction\n        \n        // Icon for wind farms\n        const windFarmIcon = {\n          path: \"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\", // Square shape\n          scale: 1.5,\n          fillColor: fillColor,\n          fillOpacity: 0.8,\n          strokeColor: '#FFFFFF',\n          strokeWeight: 1,\n          rotation: 45, // Diamond shape\n        };\n        \n        // Determine how to visualize the area based on zoom level\n        let areaVisualization;\n        \n        if (isHighDetail) {\n          // Full detail at high zoom\n          if (windFarm.areaPoints) {\n            // Use specific polygon points if available\n            areaVisualization = (\n              <MemoizedPolygon\n                paths={windFarm.areaPoints}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else if (windFarm.area) {\n            // If we only have the area in km², create a sized circle\n            // Convert km² to meters radius using area = π*r²\n            const areaInSquareMeters = windFarm.area * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else {\n            // Calculate estimated area based on capacity and turbines\n            let estimatedArea;\n            if (windFarm.turbines) {\n              estimatedArea = windFarm.turbines * 1.0;\n            } else {\n              estimatedArea = windFarm.capacity / 6.5;\n            }\n            \n            const areaInSquareMeters = estimatedArea * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          }\n        } else if (isMediumDetail) {\n          // Simplified visualization for medium zoom levels\n          // Just use a circle with a simplified radius calculation\n          let radius;\n          \n          if (windFarm.area) {\n            // Use the known area but with simplified calculation\n            radius = Math.sqrt(windFarm.area) * 1000; // Simplified conversion to meters\n          } else if (windFarm.capacity > 500) {\n            radius = 15000; // Large wind farm\n          } else if (windFarm.capacity > 100) {\n            radius = 10000; // Medium wind farm\n          } else {\n            radius = 5000; // Small wind farm\n          }\n          \n          areaVisualization = (\n            <MemoizedCircle\n              center={position}\n              radius={radius}\n              options={{\n                fillColor: fillColor,\n                fillOpacity: 0.08,\n                strokeColor: fillColor,\n                strokeOpacity: 0.3,\n                strokeWeight: 1\n              }}\n            />\n          );\n        } else {\n          // No area visualization at low zoom levels - just markers\n          areaVisualization = null;\n        }\n        \n        return (\n          <React.Fragment key={`wind-farm-${windFarm.name}`}>\n            <MemoizedMarker\n              position={position}\n              icon={windFarmIcon}\n              onClick={() => {\n                // Calculate estimated area if not provided\n                let displayArea = windFarm.area;\n                if (!displayArea) {\n                  if (windFarm.turbines) {\n                    displayArea = Math.round(windFarm.turbines * 1.0);\n                  } else {\n                    displayArea = Math.round(windFarm.capacity / 6.5);\n                  }\n                }\n                \n                setSelectedVessel({\n                  id: `wind-farm-${windFarm.name}`,\n                  name: windFarm.name,\n                  type: 'wind-farm',\n                  flag: windFarm.country,\n                  operator: windFarm.country,\n                  capacity: windFarm.capacity,\n                  status: windFarm.status,\n                  area: displayArea,\n                  turbines: windFarm.turbines,\n                  estimatedArea: !windFarm.area,\n                  isWindFarm: true\n                });\n              }}\n              zIndex={50}\n            />\n            \n            {areaVisualization}\n          </React.Fragment>\n        );\n      });\n  }, [showWindFarms, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Separate function to render ONLY radar coverage with zoom-based detail\n  const renderRadarCoverage = useCallback(() => {\n    if (!showWindFarms || !showRadarCoverage) return null;\n    \n    // Skip rendering radar coverage at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    // Filter to only show radar coverage for wind farms in the current bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    \n    return visibleWindFarms.map(windFarm => {\n      const position = { lat: windFarm.lat, lng: windFarm.lng };\n      const radarCoverageRadius = 77784; // 42 nautical miles in meters\n      \n      return (\n        <MemoizedCircle\n          key={`radar-${windFarm.name}`}\n          center={position}\n          radius={radarCoverageRadius}\n          options={{\n            fillColor: '#FF0000',\n            fillOpacity: isHighDetail ? 0.05 : 0.03,\n            strokeColor: '#FF0000',\n            strokeOpacity: isHighDetail ? 0.7 : 0.5,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5], // Dashed line pattern\n          }}\n        />\n      );\n    });\n  }, [showWindFarms, showRadarCoverage, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Function to render vessel radar coverage based on gross tonnage with zoom-based detail\n  const renderVesselRadarCoverage = useCallback(() => {\n    // Skip rendering vessel radar at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    const result = [];\n    \n    // Render medium vessels (GT 300-2999) with 20 NM radar\n    if (showVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT 300-2999\n      const mediumVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 300 && v.grossTonnage < 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      mediumVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Medium vessels have 20 NM radar range\n        const radarRangeNM = 20;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    // Render large vessels (GT >= 3000) with 40 NM radar\n    if (showLargeVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT >= 3000\n      const largeVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      largeVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Large vessels have 40 NM radar range\n        const radarRangeNM = 40;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`large-vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    return result;\n  }, [showVesselRadar, showLargeVesselRadar, vessels, isInMapBounds, currentZoom]);\n  \n  // Update the map when display mode changes\n  useEffect(() => {\n    // This effect updates the Google Maps styling when display mode changes\n    mapOptions.styles = getMapStyle(displayMode);\n    \n    // If map is loaded, we can update its options\n    if (mapRef.current) {\n      mapRef.current.setOptions(mapOptions);\n    }\n  }, [displayMode, mapOptions]);\n  \n  // onMapLoad with error handling \n  const onMapLoad = useCallback((map) => {\n    try {\n      console.log(\"Map loaded successfully\");\n      mapRef.current = map;\n      \n      // Make sure dragging is enabled\n      map.setOptions({\n        draggable: true,\n        zoomControl: false,\n        scrollwheel: true,\n        disableDoubleClickZoom: false\n      });\n      \n      // We can store the map's zoom control functionality\n      zoomRef.current = {\n        zoomIn: () => {\n          const newZoom = map.getZoom() + 1;\n          map.setZoom(newZoom);\n          setCurrentZoom(newZoom);\n        },\n        zoomOut: () => {\n          const newZoom = map.getZoom() - 1;\n          map.setZoom(newZoom);\n          setCurrentZoom(newZoom);\n        }\n      };\n      \n      // Get initial bounds\n      if (map.getBounds()) {\n        const bounds = map.getBounds();\n        setMapBounds({\n          north: bounds.getNorthEast().lat(),\n          east: bounds.getNorthEast().lng(),\n          south: bounds.getSouthWest().lat(),\n          west: bounds.getSouthWest().lng()\n        });\n        \n        // Initialize current center from the map\n        const center = map.getCenter();\n        setCurrentMapCenter({\n          lat: center.lat(),\n          lng: center.lng()\n        });\n      }\n      \n      // Set initial zoom\n      setCurrentZoom(map.getZoom());\n    } catch (error) {\n      console.error(\"Error in onMapLoad:\", error);\n    }\n  }, []);\n  \n  // Add a click handler to the map background to deselect the current vessel\n  const handleMapClick = () => {\n    if (selectedVessel) {\n      setSelectedVessel(null);\n    }\n  };\n  \n  // Get visible vessel count - memoized for sidebar display\n  const visibleVesselCount = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                         (filter === 'russian' ? v.isRussian : v.type === filter);\n      return matchesFilter;\n    }).length\n  , [vessels, filter]);\n  \n  // Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\n  const displayedVessels = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    }).slice(0, 50) // Still limit to 50 for performance\n  , [vessels, filter, isInMapBounds]);\n  \n  // Memoize UI elements that don't need frequent updates\n  const controlPanels = useMemo(() => (\n    <>\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Display Mode</h2>\n        <div className=\"flex gap-2\">\n          <button \n            className={displayMode === 'radar' ? 'active' : ''} \n            onClick={() => setDisplayMode('radar')}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Radar\n          </button>\n          <button \n            className={displayMode === 'sonar' ? 'active' : ''} \n            onClick={() => setDisplayMode('sonar')}\n          >\n            <Waves size={16} className=\"mr-1\" />\n            Sonar\n          </button>\n          <button \n            className={displayMode === 'fused' ? 'active' : ''} \n            onClick={() => setDisplayMode('fused')}\n          >\n            <Layers size={16} className=\"mr-1\" />\n            Fused\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Vessel Filter</h2>\n        <div className=\"flex flex-wrap gap-2\">\n          <button \n            className={filter === 'all' ? 'active' : ''} \n            onClick={() => setFilter('all')}\n          >\n            All\n          </button>\n          <button \n            className={filter === 'commercial' ? 'active' : ''} \n            onClick={() => setFilter('commercial')}\n          >\n            Commercial\n          </button>\n          <button \n            className={filter === 'military' ? 'active' : ''} \n            onClick={() => setFilter('military')}\n          >\n            Military\n          </button>\n          <button \n            className={filter === 'submarine' ? 'active' : ''} \n            onClick={() => setFilter('submarine')}\n          >\n            Russian Submarines\n          </button>\n          <button \n            className={filter === 'russian' ? 'active' : ''} \n            onClick={() => setFilter('russian')}\n          >\n            Russian Surface\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Wind Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showWindFarms ? 'active' : ''}\n            onClick={() => {\n              const newShowWindFarms = !showWindFarms;\n              setShowWindFarms(newShowWindFarms);\n              // If turning off wind farms, ensure radar coverage is also off\n              if (!newShowWindFarms) {\n                setShowRadarCoverage(false);\n              }\n            }}\n          >\n            <Wind size={16} className=\"mr-1\" />\n            Wind Farms {showWindFarms ? '(Shown)' : '(Hidden)'}\n          </button>\n          <button \n            className={showRadarCoverage ? 'active' : ''}\n            onClick={() => {\n              setShowRadarCoverage(!showRadarCoverage);\n            }}\n            disabled={!showWindFarms}\n            style={{ opacity: !showWindFarms ? 0.5 : 1 }}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Radar Coverage (42 NM)\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Commercial Vessel Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showVesselRadar ? 'active' : ''}\n            onClick={() => setShowVesselRadar(!showVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT 300-2999)\n          </button>\n          <button \n            className={showLargeVesselRadar ? 'active' : ''}\n            onClick={() => setShowLargeVesselRadar(!showLargeVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT &gt; 3000)\n          </button>\n        </div>\n      </div>\n      \n      {/* Add simulation controls panel */}\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Vessel Simulation</h2>\n        <div className=\"flex flex-col gap-3\">\n          <button \n            className={simulationEnabled ? 'active' : ''}\n            onClick={() => setSimulationEnabled(!simulationEnabled)}\n          >\n            <Ship size={16} className=\"mr-1\" />\n            {simulationEnabled ? 'Pause Movement' : 'Start Movement'}\n          </button>\n          <div className=\"flex flex-col\">\n            <span className=\"text-xs mb-1\">Speed: {simulationSpeed}x</span>\n            <input \n              type=\"range\" \n              min=\"1\" \n              max=\"50\" \n              value={simulationSpeed}\n              onChange={(e) => setSimulationSpeed(parseInt(e.target.value))}\n              className=\"w-2/5 max-w-[80px]\"\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  ), [displayMode, filter, showWindFarms, showRadarCoverage, showVesselRadar, showLargeVesselRadar, simulationEnabled, simulationSpeed]);\n  \n  // Update UI to include display mode toggle\n  return (\n    <div className=\"baltic-tracker-container\">\n      <div className=\"flex h-screen\">\n        {showSidebar && (\n          <div className=\"sidebar w-80\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h1 className=\"text-xl font-semibold palantir-heading\">Baltic Sea Tracker</h1>\n              <button onClick={() => setShowSidebar(false)}>\n                <Menu size={20} />\n              </button>\n            </div>\n            \n            {controlPanels}\n          </div>\n        )}\n\n        <div className=\"flex-1 relative\">\n          {!showSidebar && (\n            <button\n              className=\"absolute top-4 left-4 z-10\"\n              onClick={() => setShowSidebar(true)}\n            >\n              <Menu size={20} />\n            </button>\n          )}\n          \n          {/* Google Maps component replaces D3 map */}\n          {loadError && (\n            <div className=\"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\">\n              <div className=\"text-xl mb-4\">Error loading Google Maps</div>\n              <div className=\"text-sm max-w-lg text-center\">\n                There was an error loading the Google Maps API. This could be due to:\n                <ul className=\"list-disc pl-5 mt-2 text-left\">\n                  <li>Network connection issues</li>\n                  <li>API key restrictions</li>\n                  <li>Ad blockers or privacy extensions</li>\n                </ul>\n                <div className=\"mt-4\">\n                  Please try refreshing the page or check your network connection.\n                </div>\n                \n                <button \n                  onClick={() => window.location.reload()}\n                  className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                >\n                  Reload Page\n                </button>\n              </div>\n            </div>\n          )}\n          {!loadError && isLoaded ? (\n            <GoogleMap\n              key={mapKey}\n              mapContainerStyle={{ width: '100%', height: '100%' }}\n              center={currentMapCenter}\n              zoom={mapZoom}\n              options={mapOptions}\n              onLoad={onMapLoad}\n              onClick={handleMapClick}\n              onDragEnd={() => {\n                // Only update bounds when drag is complete\n                if (mapRef.current && mapRef.current.getBounds()) {\n                  const bounds = mapRef.current.getBounds();\n                  setMapBounds({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng()\n                  });\n                  \n                  // Update the map center after drag\n                  const center = mapRef.current.getCenter();\n                  setCurrentMapCenter({\n                    lat: center.lat(),\n                    lng: center.lng()\n                  });\n                }\n              }}\n              onZoomChanged={() => {\n                if (mapRef.current) {\n                  setCurrentZoom(mapRef.current.getZoom());\n                  \n                  // Update bounds after zoom\n                  if (mapRef.current.getBounds()) {\n                    const bounds = mapRef.current.getBounds();\n                    setMapBounds({\n                      north: bounds.getNorthEast().lat(),\n                      east: bounds.getNorthEast().lng(),\n                      south: bounds.getSouthWest().lat(),\n                      west: bounds.getSouthWest().lng()\n                    });\n                    \n                    // Update center after zoom change\n                    const center = mapRef.current.getCenter();\n                    setCurrentMapCenter({\n                      lat: center.lat(),\n                      lng: center.lng()\n                    });\n                  }\n                }\n              }}\n              draggable={true}\n            >\n              {vessels.length > 0 && renderVessels()}\n              {showWindFarms && renderWindFarms()}\n              {showRadarCoverage && renderRadarCoverage()}\n              {(showVesselRadar || showLargeVesselRadar) && renderVesselRadarCoverage()}\n            </GoogleMap>\n          ) : !loadError ? (\n            <div className=\"w-full h-full flex items-center justify-center bg-gray-900 text-white\">\n              <div className=\"text-xl\">Loading map...</div>\n            </div>\n          ) : null}\n          \n          <div className=\"absolute bottom-4 right-4 flex gap-2\">\n            <button onClick={() => zoomRef.current && zoomRef.current.zoomIn()}>\n              <ZoomIn size={20} />\n            </button>\n            <button onClick={() => zoomRef.current && zoomRef.current.zoomOut()}>\n              <ZoomOut size={20} />\n            </button>\n          </div>\n          \n          <div className=\"absolute bottom-4 left-4\">\n            <button \n              onClick={() => {\n                // Create a simplified reset function that handles all necessary state\n                const resetMap = () => {\n                  // Reset vessel selection and visualization features\n                  setSelectedVessel(null);\n                  setShowWindFarms(false);\n                  setShowRadarCoverage(false);\n                  setShowVesselRadar(false);\n                  setShowLargeVesselRadar(false);\n                  setSimulationEnabled(false);\n                  \n                  // Reset display settings\n                  setDisplayMode('radar');\n                  setFilter('all');\n                  setSimulationSpeed(10);\n                  \n                  // Reset map position and zoom\n                  if (mapRef.current) {\n                    mapRef.current.setCenter(mapCenter);\n                    mapRef.current.setZoom(mapZoom);\n                    setCurrentZoom(mapZoom);\n                    setCurrentMapCenter(mapCenter);\n                  }\n                  \n                  // Force React to remount map components\n                  setMapKey(Date.now());\n                };\n                \n                // Execute the reset function\n                resetMap();\n                \n                // Small timeout to ensure map refreshes completely\n                setTimeout(() => {\n                  if (mapRef.current && mapRef.current.overlayMapTypes) {\n                    mapRef.current.overlayMapTypes.clear();\n                  }\n                }, 10);\n              }}\n              style={{\n                backgroundColor: '#8B0000',  // Dark red color\n                color: '#FFFFFF',\n                padding: '0.5rem 1rem',\n                borderRadius: '0.25rem',\n                border: 'none',\n                fontWeight: '600',\n                cursor: 'pointer',\n                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.3)'\n              }}\n            >\n              Reset filters\n            </button>\n          </div>\n          \n          {selectedVessel && (\n            <div className=\"absolute top-4 right-4 control-panel\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-sm font-semibold\">{selectedVessel.name}</h3>\n                <button \n                  onClick={() => setSelectedVessel(null)} \n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  ×\n                </button>\n              </div>\n              <div className=\"text-sm text-secondary\">\n                {selectedVessel.isWindFarm ? (\n                  <>\n                    <div>Type: Wind Farm</div>\n                    <div>Country: {selectedVessel.flag}</div>\n                    <div>Capacity: {selectedVessel.capacity} MW</div>\n                    {selectedVessel.turbines && <div>Turbines: {selectedVessel.turbines}</div>}\n                    {selectedVessel.area && (\n                      <div>\n                        Area: {selectedVessel.area} km² \n                        {selectedVessel.estimatedArea && <span className=\"text-amber-400\"> (est.)</span>}\n                      </div>\n                    )}\n                    <div>Status: {selectedVessel.status.charAt(0).toUpperCase() + selectedVessel.status.slice(1)}</div>\n                  </>\n                ) : (\n                  <>\n                    <div>Flag: {selectedVessel.flag}</div>\n                    <div>Type: {selectedVessel.type}</div>\n                    {selectedVessel.class && <div>Class: {selectedVessel.class}</div>}\n                    {selectedVessel.designation && <div>Designation: {selectedVessel.designation}</div>}\n                    <div>Operator: {selectedVessel.operator}</div>\n                    <div>Length: {selectedVessel.length}m</div>\n                    <div>Speed: {selectedVessel.speed} knots</div>\n                    <div>Heading: {selectedVessel.heading}°</div>\n                    {selectedVessel.grossTonnage && <div>Gross Tonnage: {selectedVessel.grossTonnage} GT</div>}\n                    {selectedVessel.type === 'submarine' && (\n                      <div>Depth: {selectedVessel.depth}m ({selectedVessel.isSubmerged ? 'Submerged' : 'Surfaced'})</div>\n                    )}\n                    <div className=\"mt-2\">Detection Confidence:</div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Radar:</span>\n                      <div className=\"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\">\n                        <div className=\"bg-blue-500 h-full rounded-full\" style={{width: `${selectedVessel.detectionProbability.radar * 100}%`}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.radar * 100)}%</span>\n                    </div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Sonar:</span>\n                      <div className=\"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\">\n                        <div className=\"bg-cyan-500 h-full rounded-full\" style={{width: `${selectedVessel.detectionProbability.sonar * 100}%`}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.sonar * 100)}%</span>\n                    </div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-12 text-xs\">Fused:</span>\n                      <div className=\"bg-gray-700 h-2 flex-1 rounded-full overflow-hidden\">\n                        <div className=\"bg-green-500 h-full rounded-full\" style={{width: `${selectedVessel.detectionProbability.fused * 100}%`}}></div>\n                      </div>\n                      <span className=\"ml-2 text-xs\">{Math.round(selectedVessel.detectionProbability.fused * 100)}%</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-800 p-2 text-center text-sm text-gray-400\">\n        <div className=\"flex justify-center items-center\">\n          <Info size={16} className=\"mr-1\" />\n          Baltic Sea Tracker - {filter === 'all' ? 300 : vessels.filter(v => filter === 'russian' ? v.isRussian : v.type === filter).length} vessels in {displayMode} mode | Zoom: {currentZoom}\n          {showWindFarms && ' | Wind Farms Shown'}\n          {showRadarCoverage && showWindFarms && ' | Radar Coverage (42 NM)'}\n          {showVesselRadar && ' | Vessel Radar (20/40 NM)'}\n          {simulationEnabled && ` | Vessel Movement (${simulationSpeed}x)`}\n          <span className=\"ml-2 text-green-400\">• Optimized rendering with level-of-detail</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BalticSeaTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}