{"ast":null,"code":"import React,{useEffect,useState,useRef,useCallback,useMemo,memo}from'react';import{Info,Ship,Menu,ZoomIn,ZoomOut,Radar,Waves,Layers,Wind}from'lucide-react';import'../styles/palantir-theme.css';import{GoogleMap,useJsApiLoader,Marker,Circle,Polyline,Polygon}from'@react-google-maps/api';// Memoized components for better performance\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const MemoizedMarker=/*#__PURE__*/memo(Marker);const MemoizedCircle=/*#__PURE__*/memo(Circle);const MemoizedPolygon=/*#__PURE__*/memo(Polygon);const MemoizedPolyline=/*#__PURE__*/memo(Polyline);// Define container style\nconst mapContainerStyle={width:'100%',height:'100vh'};// Define center for the Baltic Sea\nconst defaultCenter={lat:59,lng:19};const BalticSeaTracker=()=>{// Use the same API key and configuration that worked in SimpleMap\nconst{isLoaded,loadError}=useJsApiLoader({id:'google-map-script',googleMapsApiKey:'AIzaSyAl-iGmFThUduVpLpE7sQTmniBSUPtzJjA',libraries:['geometry','drawing']});console.log(\"Map loading status:\",{isLoaded,loadError});const[vessels,setVessels]=useState([]);const[selectedVessel,setSelectedVessel]=useState(null);const[filter,setFilter]=useState('all');const[showSidebar,setShowSidebar]=useState(true);const[displayMode,setDisplayMode]=useState('radar');// 'radar', 'sonar', or 'fused'\nconst[showWindFarms,setShowWindFarms]=useState(false);const[showRadarCoverage,setShowRadarCoverage]=useState(false);// New state for radar coverage\nconst[showVesselRadar,setShowVesselRadar]=useState(false);// State for vessel radar coverage (300-2999 GT)\nconst[showLargeVesselRadar,setShowLargeVesselRadar]=useState(false);// New state for large vessel radar (>3000 GT)\nconst[mapBounds,setMapBounds]=useState(null);// Track current map bounds\nconst[currentZoom,setCurrentZoom]=useState(6);// Track current zoom level\nconst[mapKey,setMapKey]=useState(Date.now());// Add key to force remount of map components\nconst[simulationEnabled,setSimulationEnabled]=useState(false);// Track if vessel movement simulation is enabled\nconst[simulationSpeed,setSimulationSpeed]=useState(10);// Simulation speed multiplier (default 10x)\nconst[seaMeshSimulationEnabled,setSeaMeshSimulationEnabled]=useState(false);// Track if SeaMesh simulation is enabled\nconst[simulationStep,setSimulationStep]=useState(0);// Track the current step of the SeaMesh simulation\nconst[warships,setWarships]=useState([]);// Russian warships for the simulation\nconst[detectionRings,setDetectionRings]=useState([]);// Detection events for visualization\nconst animationFrameRef=useRef(null);// Reference to store animation frame ID\nconst lastUpdateTimeRef=useRef(Date.now());// Reference to store last update time\nconst seaMeshAnimationRef=useRef(null);// Reference for the SeaMesh animation timer\nconst zoomRef=useRef(null);const mapRef=useRef(null);// Google Maps settings\nconst mapCenter=defaultCenter;// Use the default center\nconst mapZoom=6;// Add state to track current map center\nconst[currentMapCenter,setCurrentMapCenter]=useState(defaultCenter);// Memoize map style to prevent recalculations\nconst mapStyle=useMemo(()=>getMapStyle(displayMode),[displayMode]);const mapOptions=useMemo(()=>({disableDefaultUI:true,zoomControl:false,styles:mapStyle,draggable:true,// Ensure map is draggable\n// Hide cities with population under 5000\nrestrictions:{latLngBounds:{north:66.0,south:54.0,east:30.0,west:9.0}}}),[mapStyle]);// Create a ref to track if Google Maps loaded\nconst mapsLoadedRef=useRef(false);// Log any errors with Google Maps loading\nuseEffect(()=>{if(loadError){console.error('Error loading Google Maps:',loadError);}if(isLoaded&&!mapsLoadedRef.current){console.log('Google Maps API loaded successfully');mapsLoadedRef.current=true;}},[isLoaded,loadError]);// Function to get map style based on display mode\nfunction getMapStyle(mode){switch(mode){case'radar':return[{elementType:\"geometry\",stylers:[{color:\"#212121\"}]},{elementType:\"labels.text.stroke\",stylers:[{color:\"#212121\"}]},{elementType:\"labels.text.fill\",stylers:[{color:\"#746855\"}]},{featureType:\"water\",elementType:\"geometry\",stylers:[{color:\"#181818\"}]},{featureType:\"water\",elementType:\"labels.text.fill\",stylers:[{color:\"#3d3d3d\"}]},{featureType:\"poi\",stylers:[{visibility:\"off\"}]},{featureType:\"transit\",stylers:[{visibility:\"off\"}]},{featureType:\"road\",stylers:[{visibility:\"off\"}]},// Hide smaller cities/towns\n{featureType:\"administrative.locality\",elementType:\"labels\",stylers:[{visibility:\"off\"}]},// Only show major cities\n{featureType:\"administrative.locality\",elementType:\"labels\",filter:[\">=\",[\"get\",\"population\"],10000],stylers:[{visibility:\"on\"}]}];case'sonar':return[{elementType:\"geometry\",stylers:[{color:\"#003545\"}]},{elementType:\"labels.text.stroke\",stylers:[{color:\"#003545\"}]},{elementType:\"labels.text.fill\",stylers:[{color:\"#00C8FF\"}]},{featureType:\"water\",elementType:\"geometry\",stylers:[{color:\"#001E29\"}]},{featureType:\"water\",elementType:\"labels.text.fill\",stylers:[{color:\"#00E5FF\"}]},{featureType:\"poi\",stylers:[{visibility:\"off\"}]},{featureType:\"transit\",stylers:[{visibility:\"off\"}]},{featureType:\"road\",stylers:[{visibility:\"off\"}]},// Hide smaller cities/towns\n{featureType:\"administrative.locality\",elementType:\"labels\",stylers:[{visibility:\"off\"}]},// Only show major cities\n{featureType:\"administrative.locality\",elementType:\"labels\",filter:[\">=\",[\"get\",\"population\"],10000],stylers:[{visibility:\"on\"}]}];case'fused':return[{elementType:\"geometry\",stylers:[{color:\"#142639\"}]},{elementType:\"labels.text.stroke\",stylers:[{color:\"#142639\"}]},{elementType:\"labels.text.fill\",stylers:[{color:\"#3D85C6\"}]},{featureType:\"water\",elementType:\"geometry\",stylers:[{color:\"#0A1C2A\"}]},{featureType:\"water\",elementType:\"labels.text.fill\",stylers:[{color:\"#4a90e2\"}]},{featureType:\"poi\",stylers:[{visibility:\"off\"}]},{featureType:\"transit\",stylers:[{visibility:\"off\"}]},{featureType:\"road\",stylers:[{visibility:\"off\"}]},// Hide smaller cities/towns\n{featureType:\"administrative.locality\",elementType:\"labels\",stylers:[{visibility:\"off\"}]},// Only show major cities\n{featureType:\"administrative.locality\",elementType:\"labels\",filter:[\">=\",[\"get\",\"population\"],10000],stylers:[{visibility:\"on\"}]}];default:return[];}}// Function to generate a random coordinate within Baltic Sea\nconst randomCoordinate=()=>{// Areas to avoid - major inland lakes and problematic areas\nconst avoidAreas=[// Swedish lakes\n{minLat:58.0,maxLat:59.3,minLng:12.3,maxLng:14.0},// Vänern\n{minLat:57.7,maxLat:58.7,minLng:14.0,maxLng:14.8},// Vättern\n{minLat:59.1,maxLat:59.7,minLng:15.8,maxLng:18.0},// Mälaren\n// Finnish lakes\n{minLat:61.0,maxLat:62.3,minLng:24.5,maxLng:26.4},// Päijänne\n{minLat:61.3,maxLat:63.1,minLng:26.5,maxLng:29.0},// Saimaa\n// Other inland waters to avoid\n{minLat:60.0,maxLat:61.8,minLng:29.2,maxLng:32.0},// Ladoga\n{minLat:57.8,maxLat:59.0,minLng:26.5,maxLng:28.5},// Peipus\n// Problematic shore areas - Northern Sweden west coast\n{minLat:60.0,maxLat:65.0,minLng:17.0,maxLng:19.5},// Problematic shore areas - Northern Finland west coast\n{minLat:63.0,maxLat:65.5,minLng:22.5,maxLng:25.0}];// Combine shipping lanes with wider dispersal areas\nconst shippingLanes=[// Main shipping lanes (lower weight than before to reduce clustering)\n// Danish Straits to St. Petersburg\n{minLat:54.5,maxLat:55.2,minLng:10.8,maxLng:13.0,weight:5},// Danish Straits entrance\n{minLat:55.0,maxLat:55.8,minLng:12.8,maxLng:14.5,weight:4},// Route east of Denmark\n{minLat:55.3,maxLat:56.2,minLng:14.5,maxLng:16.5,weight:4},// Southern Sweden coast\n{minLat:55.0,maxLat:56.0,minLng:16.5,maxLng:18.5,weight:3},// Midway to Gotland\n{minLat:57.0,maxLat:58.2,minLng:18.5,maxLng:20.0,weight:4},// North of Gotland\n{minLat:58.5,maxLat:59.5,minLng:20.0,maxLng:22.0,weight:3},// Approach to Gulf of Finland\n{minLat:59.2,maxLat:59.8,minLng:22.0,maxLng:24.5,weight:5},// Gulf of Finland western part\n{minLat:59.7,maxLat:60.2,minLng:24.5,maxLng:28.0,weight:4},// Gulf of Finland eastern part\n// Port approaches - reduced weights to prevent clustering\n{minLat:60.0,maxLat:60.5,minLng:24.5,maxLng:25.0,weight:3},// Helsinki\n{minLat:60.2,maxLat:60.5,minLng:22.0,maxLng:22.5,weight:3},// Turku\n{minLat:55.3,maxLat:56.3,minLng:12.5,maxLng:13.0,weight:3},// Malmö\n{minLat:58.5,maxLat:59.5,minLng:16.5,maxLng:18.5,weight:3},// Stockholm\n{minLat:54.3,maxLat:54.8,minLng:18.3,maxLng:19.0,weight:3},// Gdańsk\n{minLat:54.0,maxLat:54.5,minLng:13.0,maxLng:14.5,weight:3},// Rostock\n// Wider dispersal areas - these ensure ships are spread throughout the entire sea\n// Central Baltic - large dispersal areas\n{minLat:56.0,maxLat:58.0,minLng:17.0,maxLng:20.0,weight:5},// Central Baltic wider area\n{minLat:57.5,maxLat:59.5,minLng:19.0,maxLng:22.0,weight:5},// Eastern Baltic wider area\n// Gulf of Bothnia - more dispersed\n{minLat:60.0,maxLat:62.0,minLng:18.0,maxLng:21.0,weight:4},// Southern Bothnia dispersed\n{minLat:62.0,maxLat:65.0,minLng:18.0,maxLng:23.0,weight:3},// Northern Bothnia dispersed\n// Western Baltic - more dispersed\n{minLat:54.0,maxLat:56.0,minLng:12.0,maxLng:15.0,weight:4},// Western Baltic dispersed\n{minLat:54.0,maxLat:57.0,minLng:15.0,maxLng:18.0,weight:5},// South-central Baltic dispersed\n// Other dispersed areas to ensure wider coverage\n{minLat:54.0,maxLat:55.5,minLng:18.0,maxLng:20.0,weight:3},// Southern Baltic dispersed\n{minLat:56.5,maxLat:58.0,minLng:15.0,maxLng:17.0,weight:3},// Western Gotland dispersed\n{minLat:57.0,maxLat:58.5,minLng:20.0,maxLng:22.0,weight:3},// Eastern Gotland dispersed\n{minLat:57.0,maxLat:58.5,minLng:22.0,maxLng:24.0,weight:3}// Gulf of Riga dispersed\n];// Calculate total weight\nconst totalWeight=shippingLanes.reduce((sum,lane)=>sum+lane.weight,0);// Pick a random lane with weighting\nlet randomPoint=Math.random()*totalWeight;let selectedLane=shippingLanes[0];let cumulativeWeight=0;for(const lane of shippingLanes){cumulativeWeight+=lane.weight;if(randomPoint<=cumulativeWeight){selectedLane=lane;break;}}// Generate random point\nconst lng=selectedLane.minLng+Math.random()*(selectedLane.maxLng-selectedLane.minLng);const lat=selectedLane.minLat+Math.random()*(selectedLane.maxLat-selectedLane.minLat);// Check if the generated point is in an area to avoid\nfor(const area of avoidAreas){if(lat>=area.minLat&&lat<=area.maxLat&&lng>=area.minLng&&lng<=area.maxLng){// If in an avoid area, recursively try again (with a maximum call stack check)\n// This ensures we don't get stuck in an infinite loop\nif(randomCoordinate.callCount===undefined){randomCoordinate.callCount=0;}if(randomCoordinate.callCount<10){randomCoordinate.callCount++;const result=randomCoordinate();randomCoordinate.callCount--;return result;}else{// If we've tried too many times, just use a safe zone in the central Baltic\nrandomCoordinate.callCount=0;return[18.5+Math.random()*2,56.5+Math.random()*2];// Safe zone in central Baltic\n}}}// Reset call count\nif(randomCoordinate.callCount!==undefined){randomCoordinate.callCount=0;}// Return the coordinates\nreturn[lng,lat];};// Generate 300 simulated vessels with realistic properties (reduced from 1000)\nconst generateVessels=useCallback(()=>{const vesselTypes=['commercial','military','fishing','passenger','tanker'];const flags=['Finland','Sweden','Estonia','Latvia','Lithuania','Poland','Germany','Denmark','Russia'];const russianOperators=['Sovcomflot','Gazprom Fleet','Rosmorport','Russian Navy','Rosneft'];const commercialOperators=['Maersk','MSC','CMA CGM','Hapag-Lloyd','ONE','Evergreen','COSCO','Yang Ming','HMM','Grimaldi','DFDS','Stena Line','Tallink','Viking Line'];// Generate vessels with better dispersal throughout the Baltic Sea\nconst generatedVessels=[];const occupiedPositions=[];// Track positions to ensure better dispersal\nconst MIN_DISTANCE=0.2;// Minimum distance between vessels in degrees (approx 10-20km)\n// Start with fewer vessels and then disperse them more effectively\nconst maxAttempts=600;// Increase attempts to find valid positions\nlet placedVesselCount=0;// Try to place vessels with appropriate spacing\nfor(let i=1;placedVesselCount<300&&i<=maxAttempts;i++){const type=vesselTypes[Math.floor(Math.random()*vesselTypes.length)];const flag=flags[Math.floor(Math.random()*flags.length)];const isRussian=flag==='Russia'||Math.random()<0.05;// 5% chance of non-Russian flag but Russian operated\n// Get a potential position for the vessel\nconst position=randomCoordinate();// Skip positions that are not in Baltic Sea water\nif(!isInBalticSeaWaters(position[1],position[0])){continue;}// Check if this position is too close to existing vessels\nlet isTooClose=false;for(const existingPos of occupiedPositions){const distance=Math.sqrt(Math.pow(position[0]-existingPos[0],2)+Math.pow(position[1]-existingPos[1],2));if(distance<MIN_DISTANCE){isTooClose=true;break;}}// If the position is too close to other vessels, skip this attempt\nif(isTooClose){continue;}// If we got here, the position is good, so add it to occupied positions\noccupiedPositions.push(position);placedVesselCount++;// Calculate a more realistic heading based on position\n// Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\nlet heading;const vesselLat=position[1];const vesselLng=position[0];// Baltic shipping lane direction tendencies\nif(vesselLng<14.0){// Danish straits and western Baltic - generally east/west traffic\nheading=Math.random()<0.7?70+Math.random()*40:250+Math.random()*40;}else if(vesselLng>23.0&&vesselLat>59.0){// Gulf of Finland - generally east/west traffic\nheading=Math.random()<0.5?80+Math.random()*30:260+Math.random()*30;}else if(vesselLng>19.0&&vesselLat>60.0){// Gulf of Bothnia - generally north/south traffic\nheading=Math.random()<0.5?0+Math.random()*30:180+Math.random()*30;}else if(vesselLng>22.0&&vesselLat<58.0&&vesselLat>56.5){// Gulf of Riga - generally north/south traffic\nheading=Math.random()<0.5?0+Math.random()*40:180+Math.random()*40;}else if(vesselLat<56.0&&vesselLng>18.0){// Southern Baltic to Polish/Lithuanian ports\nheading=Math.random()<0.6?140+Math.random()*40:320+Math.random()*40;}else{// Central Baltic - mixed traffic patterns\nheading=Math.floor(Math.random()*360);}// Realistic speed based on vessel type and weather (assumed normal conditions)\nlet speed;if(type==='commercial'||type==='tanker'){speed=10+Math.floor(Math.random()*8);// 10-18 knots\n}else if(type==='passenger'){speed=15+Math.floor(Math.random()*10);// 15-25 knots\n}else if(type==='military'){speed=5+Math.floor(Math.random()*25);// 5-30 knots (more variable)\n}else if(type==='fishing'){// Fishing vessels move slower or may be stationary when fishing\nspeed=Math.random()<0.3?0:5+Math.floor(Math.random()*7);// 0 or 5-12 knots\n}else{speed=Math.floor(Math.random()*15)+5;// 5-20 knots default\n}// Determine vessel size\nconst length=type==='tanker'||type==='commercial'?100+Math.floor(Math.random()*300):type==='military'?50+Math.floor(Math.random()*200):20+Math.floor(Math.random()*50);// Calculate gross tonnage (GT) based on vessel length and type\n// Using simplified formula based on vessel dimensions\nlet grossTonnage;if(type==='commercial'||type==='tanker'){// Commercial and tanker vessels have higher GT/length ratios\ngrossTonnage=Math.round(length*length*0.18);// Approximation\n}else if(type==='military'){// Military vessels are typically more dense but smaller\ngrossTonnage=Math.round(length*length*0.16);}else if(type==='passenger'){// Passenger vessels have high volume and less dense cargo\ngrossTonnage=Math.round(length*length*0.2);}else{// Fishing and other vessels\ngrossTonnage=Math.round(length*length*0.12);}// Determine operator\nlet operator;if(isRussian){operator=russianOperators[Math.floor(Math.random()*russianOperators.length)];}else{operator=commercialOperators[Math.floor(Math.random()*commercialOperators.length)];}// Generate a realistic vessel name\nconst prefixes=isRussian?['Admiral','Kapitan','Vostok','Sibir','Moskva','Sankt-Peterburg','Akademik']:['Northern','Baltic','Sea','Atlantic','Pacific','Star','Pioneer'];const suffixes=isRussian?['Kuznetsov','Nakhimov','Gorshkov','Lazarev','Kasatonov','Ustinov']:['Adventurer','Explorer','Navigator','Voyager','Mariner','Trader','Express'];const shipNumbers=['I','II','III','IV','V','1','2','3','4','5'];let name;if(Math.random()<0.3){// 30% chance of having a prefix-suffix name\nname=`${prefixes[Math.floor(Math.random()*prefixes.length)]} ${suffixes[Math.floor(Math.random()*suffixes.length)]}`;}else if(Math.random()<0.5){// 20% chance of having a name with a number\nname=`${prefixes[Math.floor(Math.random()*prefixes.length)]} ${shipNumbers[Math.floor(Math.random()*shipNumbers.length)]}`;}else{// 50% chance of having a simple prefix or suffix name\nname=Math.random()<0.5?prefixes[Math.floor(Math.random()*prefixes.length)]:suffixes[Math.floor(Math.random()*suffixes.length)];}if(type==='military'&&isRussian){name=`RFS ${name}`;// Russian Federation Ship\n}// Calculate a detection probability\nconst detectionProbability={radar:Math.random(),// 0-1, higher means more visible on radar\nsonar:Math.random(),// 0-1, higher means more detectable by sonar\nfused:(Math.random()+Math.random())/2// average of two values for a more normal distribution\n};// Generate a vessel object with all properties\ngeneratedVessels.push({id:placedVesselCount,name,type,flag,isRussian,position,heading,speed,length,operator,detectionProbability,grossTonnage});}// More evenly disperse submarines too\n// Generate Russian submarines with special characteristics\nconst submarineNames=['Krasnodar','Novorossiysk','Rostov-on-Don','Stary Oskol','Velikiy Novgorod','Kolpino','Sankt Peterburg'];const submarineClasses=['Kilo-class','Kilo-class','Kilo-class','Kilo-class','Improved Kilo-class','Improved Kilo-class','Lada-class'];const submarineDesignations=['B-265','B-261','B-237','B-262','B-268','B-271','B-585'];// Use more strategic submarine positions\nconst submarineAreas=[// Gulf of Finland approach - monitoring traffic to St. Petersburg\n[26.2,59.7],// Near NATO naval exercise areas in central Baltic\n[19.3,56.8],// Monitoring approach to Stockholm archipelago\n[18.9,58.9],// Deep water between Gotland and Latvia (strategic position)\n[20.1,57.3],// Patrolling near Kaliningrad naval base\n[19.6,55.2],// Monitoring naval traffic near Gdańsk\n[18.8,54.8],// Danish straits approaches - key strategic chokepoint\n[12.8,55.4]];// Add some randomness to submarine positions to avoid perfect predictability\nconst randomizedSubmarineAreas=submarineAreas.map(pos=>[pos[0]+(Math.random()-0.5)*0.5,// Add up to ±0.25 degrees longitude\npos[1]+(Math.random()-0.5)*0.3// Add up to ±0.15 degrees latitude\n]);// Add submarines to generated vessels\nfor(let i=0;i<7;i++){const position=randomizedSubmarineAreas[i];// Skip submarine positions that aren't in Baltic Sea water\nif(!isInBalticSeaWaters(position[1],position[0])){// Try to find a better position by adjusting slightly\nfor(let attempt=0;attempt<5;attempt++){// Try adjusting position slightly to find water\nconst adjustedPosition=[position[0]+(Math.random()-0.5)*0.5,position[1]+(Math.random()-0.5)*0.5];if(isInBalticSeaWaters(adjustedPosition[1],adjustedPosition[0])){// Found a valid position\nposition[0]=adjustedPosition[0];position[1]=adjustedPosition[1];break;}}// If still not in water after adjustments, skip this submarine\nif(!isInBalticSeaWaters(position[1],position[0])){continue;}}const heading=Math.floor(Math.random()*360);const speed=5+Math.floor(Math.random()*10);// Submarines move slower on average\nconst depth=20+Math.floor(Math.random()*180);// Depth in meters\n// Submarine detection characteristics\n// Low radar detection when submerged, high sonar signature\nconst isSubmerged=Math.random()>0.3;// 70% chance of being submerged\nconst detectionProbability={radar:isSubmerged?0.05+Math.random()*0.1:0.3+Math.random()*0.2,// Low radar when submerged\nsonar:0.6+Math.random()*0.4,// High sonar signature\nfused:isSubmerged?(0.05+Math.random()*0.1+0.6+Math.random()*0.4)/2:// Average when submerged\n(0.3+Math.random()*0.2+0.6+Math.random()*0.4)/2// Average when surfaced\n};generatedVessels.push({id:1001+i,// IDs starting from 1001 for submarines\nname:`RFS ${submarineNames[i]}`,type:'submarine',class:submarineClasses[i],designation:submarineDesignations[i],flag:'Russia',isRussian:true,position,heading,speed,depth,length:70+Math.floor(Math.random()*20),// Kilo-class submarines are around 70-74m\nisSubmerged,operator:'Russian Navy',detectionProbability});}return generatedVessels;},[]);// Generate vessel data when component mounts\nuseEffect(()=>{const simulatedVessels=generateVessels();setVessels(simulatedVessels);},[generateVessels]);// Update vessel positions based on speed and heading\nconst updateVesselPositions=useCallback(()=>{if(!simulationEnabled)return;const currentTime=Date.now();const deltaTime=(currentTime-lastUpdateTimeRef.current)/1000;// Convert ms to seconds\nlastUpdateTimeRef.current=currentTime;// Apply speed multiplier to deltaTime\nconst adjustedDeltaTime=deltaTime*simulationSpeed;// Skip if delta time is too large (e.g., browser tab was inactive)\nif(adjustedDeltaTime>5)return;setVessels(prevVessels=>{return prevVessels.map(vessel=>{// Skip stationary vessels\nif(vessel.speed===0)return vessel;// Convert knots to degrees per second\n// 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n// Adjust for latitude (narrower longitude degrees at higher latitudes)\nconst latitudeAdjustment=Math.cos(vessel.position[1]*Math.PI/180);const longitudeChange=vessel.speed*0.0003*adjustedDeltaTime/latitudeAdjustment;const latitudeChange=vessel.speed*0.0003*adjustedDeltaTime;// Calculate new position based on heading\nconst headingRad=vessel.heading*Math.PI/180;const newLng=vessel.position[0]+longitudeChange*Math.sin(headingRad);const newLat=vessel.position[1]+latitudeChange*Math.cos(headingRad);// Enhanced boundary checking to keep vessels within the actual Baltic Sea water\nif(!isInBalticSeaWaters(newLat,newLng)){// If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n// Use a more detailed approach to find the right direction\n// Try finding a better direction by checking multiple angles\nlet bestHeading=vessel.heading;let foundBetterDirection=false;// Check 8 directions around to find waters\nfor(let angleOffset=0;angleOffset<360;angleOffset+=45){const testHeading=(vessel.heading+angleOffset)%360;const testRad=testHeading*Math.PI/180;// Check a position further out in this direction\nconst testLng=vessel.position[0]+longitudeChange*5*Math.sin(testRad);const testLat=vessel.position[1]+latitudeChange*5*Math.cos(testRad);if(isInBalticSeaWaters(testLat,testLng)){bestHeading=testHeading;foundBetterDirection=true;break;}}// If no good direction found, head toward the Baltic center\nif(!foundBetterDirection){const centerLat=58.5;// More centered in the main Baltic basin\nconst centerLng=20;// Adjusted to be in deeper waters\nconst angleToCenter=Math.atan2(centerLng-vessel.position[0],centerLat-vessel.position[1])*180/Math.PI;// Turn gradually toward the center\nconst headingDiff=(angleToCenter-vessel.heading+540)%360-180;bestHeading=(vessel.heading+Math.sign(headingDiff)*45)%360;if(bestHeading<0)bestHeading+=360;}// Slow down near boundaries\nconst reducedSpeed=Math.max(1,vessel.speed*0.5);return{...vessel,heading:bestHeading,speed:reducedSpeed// Temporarily reduce speed when changing course\n};}// For military and submarine vessels, randomly change heading occasionally\nlet newHeading=vessel.heading;const originalSpeed=vessel.speed;let newSpeed=originalSpeed;if((vessel.type==='military'||vessel.type==='submarine')&&Math.random()<0.01*adjustedDeltaTime){// Change heading by up to +/- 30 degrees\nnewHeading=(vessel.heading+(Math.random()*60-30))%360;if(newHeading<0)newHeading+=360;// Military vessels might change speed during maneuvers\nif(Math.random()<0.3){const speedFactor=0.7+Math.random()*0.6;// 70-130% of current speed\nnewSpeed=Math.max(1,Math.min(30,originalSpeed*speedFactor));}}// Smaller random heading changes for other vessels to simulate realistic movement\nelse if(Math.random()<0.005*adjustedDeltaTime){// Change heading by up to +/- 10 degrees\nnewHeading=(vessel.heading+(Math.random()*20-10))%360;if(newHeading<0)newHeading+=360;}// Final position check - ensure vessel doesn't go on land even after all other checks\nconst finalLng=newLng;const finalLat=newLat;// If vessel would end up on land, don't update position but keep the heading change\nif(!isInBalticSeaWaters(finalLat,finalLng)){return{...vessel,heading:newHeading,speed:newSpeed};}// Special check for Swedish coastline (which seems particularly problematic)\n// These bounds roughly define the Swedish coastline area\nconst isNearSwedishCoast=finalLat>=55.0&&finalLat<=60.0&&finalLng>=12.0&&finalLng<=19.0&&(// Distance to coast is small\nfinalLng>=12.0&&finalLng<=14.0||// Western coast\nfinalLat>=58.0&&finalLat<=60.0&&finalLng>=16.5&&finalLng<=19.0||// Stockholm area\nfinalLat>=56.0&&finalLat<=58.0&&finalLng>=15.5&&finalLng<=17.0)// Eastern coast\n;// For vessels near Swedish coast, make extra check by testing multiple points\nif(isNearSwedishCoast&&Math.random()<0.7){// 70% extra caution near Swedish coast\nconst currentPos=vessel.position;const distance=Math.sqrt(Math.pow(finalLng-currentPos[0],2)+Math.pow(finalLat-currentPos[1],2));// If making a significant move near Swedish coast, stay put instead of risking land\nif(distance>0.02){return{...vessel,heading:newHeading,speed:Math.max(1,newSpeed*0.5)// Reduce speed near coast\n};}}return{...vessel,position:[finalLng,finalLat],heading:newHeading,speed:newSpeed};});});// Request next animation frame\nanimationFrameRef.current=requestAnimationFrame(updateVesselPositions);},[simulationEnabled,simulationSpeed]);// Function to check if a point is in Baltic Sea waters\n// This is a more precise check than just the bounding box\nconst isInBalticSeaWaters=useCallback((lat,lng)=>{// First check overall bounds\nif(lat<54.0||lat>66.0||lng<9.0||lng>30.0){return false;}// Define areas that are land (to be avoided)\n// Format: [south, north, west, east]\nconst landAreas=[// Southern Sweden - expanded and more precise with additional coverage\n[55.0,59.5,12.5,16.0],// Southern Sweden - additional western coast coverage\n[56.0,58.8,11.5,13.0],// Stockholm archipelago area - more precise\n[59.0,60.0,17.0,19.2],// Sweden central eastern coast - additional coverage\n[58.0,59.5,16.0,17.8],// Northern Sweden - Gulf of Bothnia coastline\n[60.0,63.0,17.0,19.5],// Northern Sweden - upper Gulf of Bothnia\n[63.0,65.5,17.0,22.0],// Northern Sweden - northwestern area\n[64.0,66.0,15.0,17.0],// Finland - expanded\n[59.7,65.5,21.0,30.0],// Estonia - expanded\n[57.5,59.7,22.8,28.5],// Latvia/Lithuania coast - expanded\n[55.5,57.5,20.8,28.0],// Poland inland - expanded\n[54.0,55.5,14.8,19.8],// Germany/Denmark inland - expanded\n[54.0,56.5,9.0,12.0],// Gotland - more precise\n[56.8,58.0,18.0,19.2],// Åland Islands - expanded\n[59.7,60.5,19.3,21.3],// Bornholm - more precise\n[54.9,55.3,14.7,15.2],// Öland\n[56.1,57.5,16.3,17.1],// Rügen\n[54.2,54.7,13.0,13.6],// Saaremaa\n[57.8,58.7,21.7,23.0],// Hiiumaa\n[58.7,59.1,22.0,23.0],// Inland lakes in Finland\n[61.0,63.0,25.0,30.0],// Kaliningrad and surrounding area\n[54.3,55.3,19.6,22.5]];// Define key shipping channels and deep waters (preferred areas)\n// Format: [south, north, west, east, weight]\nconst shippingChannels=[// Main Baltic basin\n[55.5,59.0,16.5,22.0,10],// Gulf of Finland shipping lane\n[59.3,60.2,22.5,28.0,8],// Approach to Stockholm\n[58.7,59.5,17.5,19.5,6],// Approach to Riga\n[56.8,58.0,22.5,24.5,6],// Approach to Helsinki/Tallinn\n[59.2,59.9,24.0,25.5,8],// Western Baltic shipping lane\n[54.5,56.0,12.0,15.0,8],// Kattegat\n[56.0,57.5,10.5,12.0,6],// Gulf of Bothnia\n[60.5,63.5,18.5,21.5,5],// Central Baltic - expanded to cover more water\n[56.0,59.0,17.5,21.0,10],// Southern Baltic - expanded\n[54.5,56.5,15.0,19.0,8]];// Check if point is in a land area - more strict checking\nfor(const[south,north,west,east]of landAreas){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){// Further check for complex coastlines\n// This is a very simplified approach - we add some randomness \n// to prevent vessels from getting stuck at sharp boundary transitions\n// If near the edge of a land area, there's a small chance to still consider it water\n// This helps vessels navigate around complex coastlines without getting stuck\nconst distanceFromEdge=Math.min(Math.abs(lat-south),Math.abs(lat-north),Math.abs(lng-west),Math.abs(lng-east));// Very close to edge - might be a complex coastline\nif(distanceFromEdge<0.1){// 15% chance to consider it water if very close to edge (reduced from 20%)\n// This randomness helps prevent getting stuck at boundaries\nreturn Math.random()<0.15;}return false;// It's in a land area\n}}// Check if in a preferred shipping channel\nfor(const[south,north,west,east]of shippingChannels){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){return true;// In a shipping channel - definitely good\n}}// For areas not explicitly defined, use the following general rules\n// Avoid shallow coastal waters (simplified approach)\n// These are general buffer zones around landmasses\nconst coastalBuffers=[// Swedish coast buffer - expanded\n[55.0,59.5,14.8,16.5],// Swedish west coast buffer\n[56.0,58.8,11.0,12.2],// Swedish eastern coastline\n[58.0,59.5,16.0,17.0],// Northern Sweden - Gulf of Bothnia western coast\n[60.0,63.0,19.0,20.0],// Northern Sweden - upper coast\n[63.0,65.5,19.5,22.5],// Finnish coast buffer\n[59.7,65.5,20.0,21.5],// Estonian coast buffer\n[57.5,59.7,22.0,23.0],// Latvian/Lithuanian coast buffer\n[55.5,57.5,19.5,21.5],// Polish coast buffer\n[54.0,55.5,14.0,15.5],// German/Danish coast buffer\n[54.0,56.0,12.0,13.0]];// Check coastal buffers with higher probability of rejection\nfor(const[south,north,west,east]of coastalBuffers){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){// 80% chance to consider coastal buffers as land (increased from 70%)\nreturn Math.random()>0.8;}}// Special check for Swedish coastal waters - these are problematic\nconst swedishProblemAreas=[// Stockholm archipelago approaches\n[58.8,59.5,17.5,19.0],// Swedish eastern coastline near Öland\n[56.5,57.5,16.0,16.8],// Swedish western approaches\n[57.0,58.5,11.2,12.5],// Northern Sweden Gulf of Bothnia western coast\n[60.0,63.0,18.5,20.0],// Northern Sweden - northeastern area\n[63.0,65.0,19.0,22.0]];// Higher rejection rate specifically for Swedish coastal waters\nfor(const[south,north,west,east]of swedishProblemAreas){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){// 90% chance to reject - very strict for Swedish waters\nreturn Math.random()>0.9;}}// Additional check for enclosed bays and lakes\n// Define problematic enclosed areas (small bays, inlets, etc.)\nconst problematicAreas=[// Finnish inland lake areas \n[60.7,62.5,23.0,29.0],// Swedish lake areas\n[58.5,59.5,14.0,16.0],// Various small bays and inlets\n[57.2,57.6,16.8,17.2],// Near Öland\n[60.0,60.2,24.8,25.2],// Helsinki area\n[58.8,59.0,17.5,18.0],// Stockholm archipelago\n[58.1,58.5,11.5,12.0]// Skagerrak entrance\n];// Higher chance to reject problematic areas\nfor(const[south,north,west,east]of problematicAreas){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){// 60% chance to reject\nreturn Math.random()>0.6;}}// Explicitly define major lakes to avoid them completely\nconst majorLakes=[// Swedish lakes\n[58.0,59.3,12.3,14.0],// Vänern\n[57.7,58.7,14.0,14.8],// Vättern\n[59.1,59.7,15.8,18.0],// Mälaren\n[56.9,57.5,13.4,14.8],// Southern Swedish lakes\n[56.8,57.2,14.4,15.2],// Åsnen and nearby lakes\n// Finnish lakes\n[61.0,62.3,24.5,26.4],// Päijänne and nearby\n[61.3,63.1,26.5,29.0],// Saimaa system\n[62.0,63.7,23.0,24.5],// Western Finnish lakes\n[61.5,62.2,28.5,29.8],// Eastern Finnish lakes\n[60.3,60.8,23.5,25.0],// Southern Finnish lakes\n// Russian lakes\n[60.0,61.8,29.2,32.0],// Ladoga\n[60.0,60.8,27.4,29.0],// Eastern Gulf of Finland lakes\n[57.8,59.0,26.5,28.5],// Peipus\n// Other inland waters\n[54.1,54.7,17.8,18.7],// Polish lakes\n[53.5,54.3,12.0,14.0],// German lakes\n[53.8,55.0,10.2,11.0],// Danish inland waters\n[55.5,56.5,9.5,10.2]// Limfjord area\n];// Strict rejection of major lakes - almost never allow vessels here\nfor(const[south,north,west,east]of majorLakes){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){// 99.5% chance to consider these as land - essentially never allow vessels in lakes\nreturn Math.random()>0.995;}}// Known safe water zones - replaced with enhanced version\nconst safeWaterZones=[// Central Baltic open water\n[56.5,58.5,18.0,21.0],// Eastern Baltic open water\n[57.0,59.0,20.0,22.0],// Western Baltic open water\n[55.0,56.5,13.0,15.0],// Southern Baltic deep water\n[54.5,55.5,16.0,18.5],// Gulf of Finland central channel\n[59.4,60.0,23.0,27.0],// Gulf of Bothnia southern part - central channel\n[60.5,62.5,20.0,21.0],// Gulf of Bothnia central part - central channel\n[62.5,64.0,20.2,21.2],// Gulf of Bothnia northern part - central channel\n[64.0,65.0,21.5,22.5]];// If in a known safe water zone, it's definitely water\nfor(const[south,north,west,east]of safeWaterZones){if(lat>=south&&lat<=north&&lng>=west&&lng<=east){return true;}}// Special check for northern Gulf of Bothnia - narrower channel\nif(lat>=63.0&&lat<=65.5&&lng>=20.0&&lng<=22.0){// In the narrower northern part of Gulf of Bothnia, be more restrictive\n// Only consider central waters as safe (within 0.3° from center line)\nconst centerLng=21.0;const distanceFromCenter=Math.abs(lng-centerLng);if(distanceFromCenter<0.3){return true;// Central channel\n}else if(distanceFromCenter<0.5){// In the transition zone, random chance to allow\nreturn Math.random()>0.7;}else{// Too close to shore\nreturn Math.random()>0.95;// Very small chance to consider as water\n}}// If we got here, it's probably in open water\nreturn true;},[]);// Start/stop vessel position updates when simulation state changes\nuseEffect(()=>{if(simulationEnabled){lastUpdateTimeRef.current=Date.now();animationFrameRef.current=requestAnimationFrame(updateVesselPositions);}else if(animationFrameRef.current){cancelAnimationFrame(animationFrameRef.current);}// Cleanup when component unmounts\nreturn()=>{if(animationFrameRef.current){cancelAnimationFrame(animationFrameRef.current);}};},[simulationEnabled,updateVesselPositions]);// Function to check if an item is in the current map bounds\nconst isInMapBounds=useCallback((lat,lng)=>{if(!mapBounds)return true;// If no bounds yet, show everything\n// Add buffer to avoid popping at edges\nconst buffer=0.5;// Buffer in degrees\nreturn lat>=mapBounds.south-buffer&&lat<=mapBounds.north+buffer&&lng>=mapBounds.west-buffer&&lng<=mapBounds.east+buffer;},[mapBounds]);// Function to render vessels based on the display mode and zoom level\nconst renderVessels=useCallback(()=>{// Use zoom level to determine detail level\nconst isHighDetail=currentZoom>=8;const isMediumDetail=currentZoom>=6&&currentZoom<8;const isLowDetail=currentZoom<6;// Filter vessels based on current filter and map bounds\nconst filteredVessels=vessels.filter(v=>{// First apply user filter\nconst matchesFilter=filter==='all'||(filter==='russian'?v.isRussian:v.type===filter);// Then check if in current map bounds\nconst inBounds=isInMapBounds(v.position[1],v.position[0]);return matchesFilter&&inBounds;});// Create vessel markers\nreturn filteredVessels.map(vessel=>{// Convert vessel position to LatLng\nconst position={lat:vessel.position[1],lng:vessel.position[0]};const isSelected=(selectedVessel===null||selectedVessel===void 0?void 0:selectedVessel.id)===vessel.id;// Define icon and visualization based on display mode and zoom level\nlet iconProps={};let circleProps={radius:0};switch(displayMode){case'radar':// Radar mode - shows vessels as dots with direction indicators\nconst radarOpacity=vessel.type==='submarine'&&vessel.isSubmerged?0.1+vessel.detectionProbability.radar*0.2:0.3+vessel.detectionProbability.radar*0.7;const radarScale=vessel.type==='submarine'?vessel.isSubmerged?0.5:0.8:Math.max(0.6,Math.min(1.2,0.6+vessel.length/300));const radarColor=vessel.type==='submarine'?'rgb(255, 0, 0)':vessel.isRussian?'rgb(231, 76, 60)':'rgb(52, 152, 219)';if(isLowDetail){// Simple dots for low detail level\niconProps={path:window.google.maps.SymbolPath.CIRCLE,fillColor:radarColor,fillOpacity:radarOpacity,strokeColor:'#FFFFFF',strokeWeight:1,scale:vessel.type==='submarine'?3:2,anchor:new window.google.maps.Point(0,0)};}else if(isMediumDetail){// Simplified arrow for medium detail\nconst arrowSize=radarScale*4;iconProps={path:`M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L -${arrowSize/2},${arrowSize} Z`,// Simpler arrow shape\nfillColor:radarColor,fillOpacity:radarOpacity,strokeColor:'#FFFFFF',strokeWeight:1,rotation:vessel.speed>1?vessel.heading:0,// Only rotate if speed > 1 knot\nscale:1,anchor:new window.google.maps.Point(0,0)};}else{// Full detail for high zoom levels\nconst arrowSize=radarScale*5;iconProps={path:`M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L 0,${arrowSize/2} L -${arrowSize/2},${arrowSize} Z`,// Arrow shape\nfillColor:radarColor,fillOpacity:radarOpacity,strokeColor:'#FFFFFF',strokeWeight:1,rotation:vessel.speed>1?vessel.heading:0,// Only rotate if speed > 1 knot\nscale:1,anchor:new window.google.maps.Point(0,0)};}break;case'sonar':// Sonar mode - shows vessels as acoustic signatures\nconst sonarOpacity=vessel.type==='submarine'?0.5+vessel.detectionProbability.sonar*0.5:0.2+vessel.detectionProbability.sonar*0.8;const sonarColor=vessel.type==='submarine'?'#FF00FF':'#00E5FF';if(isLowDetail){// Simple dots for low detail level\niconProps={path:window.google.maps.SymbolPath.CIRCLE,fillColor:sonarColor,fillOpacity:sonarOpacity,strokeColor:'#FFFFFF',strokeWeight:1,scale:vessel.type==='submarine'?3:2,anchor:new window.google.maps.Point(0,0)};// Simplified acoustic wave\nif(vessel.type==='submarine'){const waveRadius=vessel.speed*80;circleProps={radius:waveRadius,options:{fillColor:sonarColor,fillOpacity:0.03,strokeColor:sonarColor,strokeOpacity:0.1,strokeWeight:1}};}}else{// Use the same arrow shape as radar mode but with sonar colors\nconst sonarArrowSize=vessel.type==='submarine'?5:4;iconProps={path:`M 0,-${sonarArrowSize} L ${sonarArrowSize/2},${sonarArrowSize} L 0,${sonarArrowSize/2} L -${sonarArrowSize/2},${sonarArrowSize} Z`,// Arrow shape\nfillColor:sonarColor,fillOpacity:sonarOpacity,strokeColor:'#FFFFFF',strokeWeight:1,rotation:vessel.speed>1?vessel.heading:0,// Only rotate if speed > 1 knot\nscale:1,anchor:new window.google.maps.Point(0,0)};// Add acoustic wave circle - only at higher zoom levels\nif(isHighDetail){const waveRadius=vessel.type==='submarine'?Math.max(500,vessel.speed*100):Math.max(300,vessel.speed*60);circleProps={radius:waveRadius,options:{fillColor:sonarColor,fillOpacity:0.05,strokeColor:sonarColor,strokeOpacity:0.2,strokeWeight:1}};}else if(isMediumDetail&&vessel.type==='submarine'){const waveRadius=Math.max(300,vessel.speed*80);circleProps={radius:waveRadius,options:{fillColor:sonarColor,fillOpacity:0.03,strokeColor:sonarColor,strokeOpacity:0.1,strokeWeight:1}};}}break;case'fused':// Fused mode - combines radar and sonar data\nconst fusedOpacity=0.4+vessel.detectionProbability.fused*0.6;// Create color gradient based on radar/sonar detection probabilities\nconst radarValue=Math.floor(vessel.detectionProbability.radar*255);const sonarValue=Math.floor(vessel.detectionProbability.sonar*255);const fusedColor=vessel.isRussian?`rgb(255, 100, 100)`:`rgb(100, ${radarValue}, ${sonarValue})`;if(isLowDetail){// Simple dots for low detail level\niconProps={path:window.google.maps.SymbolPath.CIRCLE,fillColor:fusedColor,fillOpacity:fusedOpacity,strokeColor:'#FFFFFF',strokeWeight:1,scale:vessel.type==='submarine'?3:2,anchor:new window.google.maps.Point(0,0)};}else{// Use the same arrow shape as other modes but with fused colors\nconst fusedArrowSize=5;iconProps={path:`M 0,-${fusedArrowSize} L ${fusedArrowSize/2},${fusedArrowSize} L 0,${fusedArrowSize/2} L -${fusedArrowSize/2},${fusedArrowSize} Z`,// Arrow shape\nfillColor:fusedColor,fillOpacity:fusedOpacity,strokeColor:'#FFFFFF',strokeWeight:1,rotation:vessel.speed>1?vessel.heading:0,// Only rotate if speed > 1 knot\nscale:1,anchor:new window.google.maps.Point(0,0)};}// Add confidence circle - only at higher zoom levels\nif(isHighDetail){const confidenceRadius=300+(1-vessel.detectionProbability.fused)*1000;circleProps={radius:confidenceRadius,options:{fillColor:'transparent',fillOpacity:0,strokeColor:vessel.isRussian?\"#FF6B6B\":\"#4285F4\",strokeOpacity:0.4,strokeWeight:0.5}};}else if(isMediumDetail&&(vessel.type==='military'||vessel.type==='submarine')){// Only show confidence circles for important vessels at medium zoom\nconst confidenceRadius=200+(1-vessel.detectionProbability.fused)*800;circleProps={radius:confidenceRadius,options:{fillColor:'transparent',fillOpacity:0,strokeColor:vessel.isRussian?\"#FF6B6B\":\"#4285F4\",strokeOpacity:0.3,strokeWeight:0.5}};}break;default:// Default to radar mode with arrow icon\nconst defaultSize=5;iconProps={path:`M 0,-${defaultSize} L ${defaultSize/2},${defaultSize} L 0,${defaultSize/2} L -${defaultSize/2},${defaultSize} Z`,// Arrow shape\nfillColor:'#FFFFFF',fillOpacity:0.8,strokeColor:'#000000',strokeWeight:1,rotation:vessel.speed>1?vessel.heading:0,// Only rotate if speed > 1 knot\nscale:1,anchor:new window.google.maps.Point(0,0)};break;}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(MemoizedMarker,{position:position,icon:iconProps,onClick:e=>{// Prevent event propagation to the map\nif(e&&e.domEvent){e.domEvent.stopPropagation();}// Don't immediately close the tooltip if we're clicking on a vessel\ne&&e.stop&&e.stop();// Log complete vessel data for debugging\nconsole.log(\"Vessel clicked - Raw data:\",JSON.stringify(vessel));// Create a complete copy of the vessel to ensure React detects the state change\nconst vesselCopy=JSON.parse(JSON.stringify(vessel));// Immediately set selected vessel without delay\nsetSelectedVessel(vesselCopy);},zIndex:isSelected?1000:vessel.type==='submarine'?500:100}),circleProps.radius>0&&/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:circleProps.radius,options:circleProps.options}),vessel.type==='submarine'&&vessel.isSubmerged&&displayMode!=='fused'&&isHighDetail&&/*#__PURE__*/_jsx(MemoizedMarker,{position:{lat:position.lat+0.03,lng:position.lng+0.03},label:{text:`${vessel.depth}m`,color:'#FFFFFF',fontSize:'8px',fontWeight:'bold'},icon:{path:0,// CIRCLE\nscale:0,fillOpacity:0,strokeOpacity:0}})]},vessel.id);});},[vessels,filter,isInMapBounds,displayMode,currentZoom,selectedVessel]);// Baltic Sea wind farm data - expanded with EMODnet data\nconst windFarmsData=[// Denmark\n{name:\"Kriegers Flak\",country:\"Denmark\",capacity:604,lat:54.9833,lng:13.0333,status:\"operational\",turbines:72,area:132,// km²\nareaPoints:[{lat:54.9633,lng:13.0133},{lat:54.9733,lng:13.0533},{lat:55.0033,lng:13.0533},{lat:55.0033,lng:13.0133},{lat:54.9833,lng:12.9933},{lat:54.9633,lng:13.0133}]},{name:\"Middelgrunden\",country:\"Denmark\",capacity:40,lat:55.6853,lng:12.6913,status:\"operational\",turbines:20,area:4,// km²\nareaPoints:[{lat:55.6903,lng:12.6813},{lat:55.6903,lng:12.7013},{lat:55.6803,lng:12.7013},{lat:55.6803,lng:12.6813},{lat:55.6903,lng:12.6813}]},{name:\"Rødsand I\",country:\"Denmark\",capacity:166,lat:54.5508,lng:11.7083,status:\"operational\",turbines:72,area:35,// km²\nareaPoints:[{lat:54.5408,lng:11.6883},{lat:54.5408,lng:11.7283},{lat:54.5608,lng:11.7283},{lat:54.5608,lng:11.6883},{lat:54.5408,lng:11.6883}]},{name:\"Rødsand II\",country:\"Denmark\",capacity:207,lat:54.5580,lng:11.6170,status:\"operational\",turbines:90,area:40},{name:\"Anholt\",country:\"Denmark\",capacity:400,lat:56.6000,lng:11.2097,status:\"operational\",turbines:111,area:88},{name:\"Sprogø\",country:\"Denmark\",capacity:21,lat:55.3414,lng:10.9767,status:\"operational\",turbines:7,area:6},{name:\"Samsø\",country:\"Denmark\",capacity:23,lat:55.7194,lng:10.5639,status:\"operational\",turbines:10,area:5},// Sweden\n{name:\"Karehamn\",country:\"Sweden\",capacity:48,lat:56.9750,lng:17.0000,status:\"operational\",turbines:16,area:8},{name:\"Lillgrund\",country:\"Sweden\",capacity:110,lat:55.5000,lng:12.7667,status:\"operational\",turbines:48,area:6},{name:\"Södra Midsjöbanken\",country:\"Sweden\",capacity:1500,lat:55.7500,lng:17.4000,status:\"planned\",turbines:170,area:265},{name:\"Storgrundet\",country:\"Sweden\",capacity:265,lat:61.1532,lng:17.4376,status:\"planned\",turbines:70,area:57},{name:\"Utgrunden\",country:\"Sweden\",capacity:10.5,lat:56.3350,lng:16.2860,status:\"operational\",turbines:7,area:2},{name:\"Bockstigen\",country:\"Sweden\",capacity:2.5,lat:57.0389,lng:18.1378,status:\"operational\",turbines:5,area:1},// Germany\n{name:\"EnBW Baltic 1\",country:\"Germany\",capacity:48,lat:54.6080,lng:12.6520,status:\"operational\",turbines:21,area:7},{name:\"EnBW Baltic 2\",country:\"Germany\",capacity:288,lat:54.9900,lng:13.1666,status:\"operational\",turbines:80,area:27},{name:\"Arkona\",country:\"Germany\",capacity:385,lat:54.7833,lng:14.1000,status:\"operational\",turbines:60,area:39},{name:\"Wikinger\",country:\"Germany\",capacity:350,lat:54.8333,lng:14.0750,status:\"operational\",turbines:70,area:34},{name:\"Arcadis Ost 1\",country:\"Germany\",capacity:257,lat:54.8333,lng:13.7500,status:\"under construction\",turbines:27,area:30},{name:\"Gennaker\",country:\"Germany\",capacity:927,lat:54.5500,lng:12.2500,status:\"planned\",turbines:103,area:176},{name:\"Nordlicher Grund\",country:\"Germany\",capacity:630,lat:54.9831,lng:6.3582,status:\"planned\",turbines:64,area:57},{name:\"Ostseeschatz\",country:\"Germany\",capacity:372,lat:54.3660,lng:11.9165,status:\"planned\",turbines:62,area:40},{name:\"Baltic Eagle\",country:\"Germany\",capacity:476,lat:54.7778,lng:13.9239,status:\"under construction\",turbines:50,area:40},// Finland\n{name:\"Tahkoluoto\",country:\"Finland\",capacity:42,lat:61.6330,lng:21.3830,status:\"operational\",turbines:10,area:15},{name:\"Ajos\",country:\"Finland\",capacity:42,lat:65.7166,lng:24.5166,status:\"operational\",turbines:13,area:10},{name:\"Kemi Ajos I\",country:\"Finland\",capacity:15,lat:65.6405,lng:24.5267,status:\"operational\",turbines:5,area:6},{name:\"Kemi Ajos II\",country:\"Finland\",capacity:16,lat:65.6563,lng:24.5402,status:\"operational\",turbines:3,area:4},{name:\"Raahe\",country:\"Finland\",capacity:44,lat:64.6500,lng:24.3500,status:\"planned\",turbines:8,area:15},{name:\"Korsnäs\",country:\"Finland\",capacity:1300,lat:62.7500,lng:21.0500,status:\"planned\",turbines:70,area:175},{name:\"Siikajoki\",country:\"Finland\",capacity:100,lat:64.8167,lng:24.6167,status:\"planned\",turbines:20,area:25},// Poland\n{name:\"Baltic Power\",country:\"Poland\",capacity:1200,lat:55.0000,lng:18.3330,status:\"under construction\",turbines:76,area:131},{name:\"FEW Baltic II\",country:\"Poland\",capacity:350,lat:54.8000,lng:16.5000,status:\"planned\",turbines:37,area:41},{name:\"Baltica 1\",country:\"Poland\",capacity:896,lat:55.2060,lng:17.1633,status:\"planned\",turbines:64,area:108},{name:\"Baltica 2\",country:\"Poland\",capacity:1498,lat:55.3340,lng:16.8630,status:\"planned\",turbines:107,area:190},{name:\"Baltica 3\",country:\"Poland\",capacity:1045,lat:55.3340,lng:16.7000,status:\"planned\",turbines:95,area:131},{name:\"MFW Bałtyk I\",country:\"Poland\",capacity:1560,lat:55.2383,lng:17.4633,status:\"planned\",turbines:100,area:128},{name:\"MFW Bałtyk II\",country:\"Poland\",capacity:720,lat:55.1233,lng:17.2467,status:\"planned\",turbines:60,area:65},{name:\"MFW Bałtyk III\",country:\"Poland\",capacity:720,lat:55.0817,lng:17.0667,status:\"planned\",turbines:60,area:80},// Estonia\n{name:\"Estonia Offshore 1\",country:\"Estonia\",capacity:1000,lat:58.8000,lng:22.0000,status:\"planned\",turbines:115,area:230,// km²\nareaPoints:[{lat:58.7800,lng:21.9600},{lat:58.7800,lng:22.0400},{lat:58.8200,lng:22.0400},{lat:58.8200,lng:21.9600},{lat:58.7800,lng:21.9600}]},{name:\"Liivi\",country:\"Estonia\",capacity:1000,lat:57.8333,lng:23.5000,status:\"planned\",turbines:100,area:160},{name:\"Hiiumaa\",country:\"Estonia\",capacity:700,lat:59.0833,lng:22.3833,status:\"planned\",turbines:70,area:100},{name:\"Saare-Liivi\",country:\"Estonia\",capacity:600,lat:57.9500,lng:22.6833,status:\"planned\",turbines:60,area:90},// Latvia\n{name:\"ELWIND\",country:\"Latvia\",capacity:1000,lat:57.0830,lng:20.7500,status:\"planned\",turbines:100,area:200},// Lithuania\n{name:\"Lithuanian OWF I\",country:\"Lithuania\",capacity:700,lat:55.8330,lng:20.5000,status:\"planned\",turbines:70,area:120},// Special projects\n{name:\"Bornholm Energy Island\",country:\"Denmark\",capacity:3000,lat:55.1000,lng:14.9000,status:\"planned\",turbines:200,area:400,// km²\nareaPoints:[{lat:55.0500,lng:14.8500},{lat:55.0500,lng:14.9500},{lat:55.1500,lng:14.9500},{lat:55.1500,lng:14.8500},{lat:55.0500,lng:14.8500}]},{name:\"Hywind Tampen\",country:\"Norway\",capacity:88,lat:61.2500,lng:20.4000,status:\"operational\",turbines:11,area:22}];// Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\nconst renderWindFarms=useCallback(()=>{if(!showWindFarms)return null;// Filter wind farms to only show those in current map bounds\nconst visibleWindFarms=windFarmsData.filter(farm=>isInMapBounds(farm.lat,farm.lng));const isHighDetail=currentZoom>=8;const isMediumDetail=currentZoom>=6&&currentZoom<8;return visibleWindFarms.map(windFarm=>{const position={lat:windFarm.lat,lng:windFarm.lng};// Use different colors based on wind farm status\nconst fillColor=windFarm.status===\"operational\"?'#FFC107'// amber color for operational wind farms\n:'#4CAF50';// green color for planned and under construction\n// Icon for wind farms\nconst windFarmIcon={path:\"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\",// Square shape\nscale:1.5,fillColor:fillColor,fillOpacity:0.8,strokeColor:'#FFFFFF',strokeWeight:1,rotation:45// Diamond shape\n};// Determine how to visualize the area based on zoom level\nlet areaVisualization;if(isHighDetail){// Full detail at high zoom\nif(windFarm.areaPoints){// Use specific polygon points if available\nareaVisualization=/*#__PURE__*/_jsx(MemoizedPolygon,{paths:windFarm.areaPoints,options:{fillColor:fillColor,fillOpacity:0.1,strokeColor:fillColor,strokeOpacity:0.4,strokeWeight:1}});}else if(windFarm.area){// If we only have the area in km², create a sized circle\n// Convert km² to meters radius using area = π*r²\nconst areaInSquareMeters=windFarm.area*1000000;const radiusInMeters=Math.sqrt(areaInSquareMeters/Math.PI);areaVisualization=/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radiusInMeters,options:{fillColor:fillColor,fillOpacity:0.1,strokeColor:fillColor,strokeOpacity:0.4,strokeWeight:1}});}else{// Calculate estimated area based on capacity and turbines\nlet estimatedArea;if(windFarm.turbines){estimatedArea=windFarm.turbines*1.0;}else{estimatedArea=windFarm.capacity/6.5;}const areaInSquareMeters=estimatedArea*1000000;const radiusInMeters=Math.sqrt(areaInSquareMeters/Math.PI);areaVisualization=/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radiusInMeters,options:{fillColor:fillColor,fillOpacity:0.1,strokeColor:fillColor,strokeOpacity:0.4,strokeWeight:1}});}}else if(isMediumDetail){// Simplified visualization for medium zoom levels\n// Just use a circle with a simplified radius calculation\nlet radius;if(windFarm.area){// Use the known area but with simplified calculation\nradius=Math.sqrt(windFarm.area)*1000;// Simplified conversion to meters\n}else if(windFarm.capacity>500){radius=15000;// Large wind farm\n}else if(windFarm.capacity>100){radius=10000;// Medium wind farm\n}else{radius=5000;// Small wind farm\n}areaVisualization=/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radius,options:{fillColor:fillColor,fillOpacity:0.08,strokeColor:fillColor,strokeOpacity:0.3,strokeWeight:1}});}else{// No area visualization at low zoom levels - just markers\nareaVisualization=null;}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(MemoizedMarker,{position:position,icon:windFarmIcon,onClick:e=>{// Prevent event propagation to the map\nif(e&&e.domEvent){e.domEvent.stopPropagation();}// Don't immediately close the tooltip if we're clicking on a wind farm\ne&&e.stop&&e.stop();// Calculate estimated area if not provided\nlet displayArea=windFarm.area;if(!displayArea){if(windFarm.turbines){displayArea=Math.round(windFarm.turbines*1.0);}else{displayArea=Math.round(windFarm.capacity/6.5);}}console.log(\"Wind farm clicked:\",windFarm.name);// Create a wind farm object with all necessary properties\nconst windFarmObj={id:`wind-farm-${windFarm.name}`,name:windFarm.name,type:'wind-farm',flag:windFarm.country,operator:windFarm.country,capacity:windFarm.capacity,status:windFarm.status,area:displayArea,turbines:windFarm.turbines,estimatedArea:!windFarm.area,isWindFarm:true};// Set immediately without delay\nsetSelectedVessel(windFarmObj);},zIndex:50}),areaVisualization]},`wind-farm-${windFarm.name}`);});},[showWindFarms,isInMapBounds,currentZoom,windFarmsData]);// Separate function to render ONLY radar coverage with zoom-based detail\nconst renderRadarCoverage=useCallback(()=>{if(!showWindFarms||!showRadarCoverage)return null;// Skip rendering radar coverage at low zoom levels for performance\nif(currentZoom<6)return null;// Filter to only show radar coverage for wind farms in the current bounds\nconst visibleWindFarms=windFarmsData.filter(farm=>isInMapBounds(farm.lat,farm.lng));const isHighDetail=currentZoom>=8;return visibleWindFarms.map(windFarm=>{const position={lat:windFarm.lat,lng:windFarm.lng};const radarCoverageRadius=77784;// 42 nautical miles in meters\nreturn/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radarCoverageRadius,options:{fillColor:'#FF0000',fillOpacity:isHighDetail?0.05:0.03,strokeColor:'#FF0000',strokeOpacity:isHighDetail?0.7:0.5,strokeWeight:isHighDetail?1:0.5,strokeDashArray:[5,5]// Dashed line pattern\n}},`radar-${windFarm.name}`);});},[showWindFarms,showRadarCoverage,isInMapBounds,currentZoom,windFarmsData]);// Function to render vessel radar coverage based on gross tonnage with zoom-based detail\nconst renderVesselRadarCoverage=useCallback(()=>{// Skip rendering vessel radar at low zoom levels for performance\nif(currentZoom<6)return null;const result=[];// Render medium vessels (GT 300-2999) with 20 NM radar\nif(showVesselRadar){// Filter vessels to show radar only for commercial vessels with GT 300-2999\nconst mediumVessels=vessels.filter(v=>(v.type==='commercial'||v.type==='tanker'||v.type==='passenger')&&v.grossTonnage>=300&&v.grossTonnage<3000&&isInMapBounds(v.position[1],v.position[0]));const isHighDetail=currentZoom>=8;mediumVessels.forEach(vessel=>{const position={lat:vessel.position[1],lng:vessel.position[0]};// Medium vessels have 20 NM radar range\nconst radarRangeNM=20;// Convert NM to meters (1 NM = 1852 meters)\nconst radarRangeMeters=radarRangeNM*1852;result.push(/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radarRangeMeters,options:{fillColor:'#4285F4',fillOpacity:isHighDetail?0.03:0.02,strokeColor:'#4285F4',strokeOpacity:isHighDetail?0.6:0.4,strokeWeight:isHighDetail?1:0.5,strokeDashArray:[5,5]// Dashed line pattern\n}},`vessel-radar-${vessel.id}`));});}// Render large vessels (GT >= 3000) with 40 NM radar\nif(showLargeVesselRadar){// Filter vessels to show radar only for commercial vessels with GT >= 3000\nconst largeVessels=vessels.filter(v=>(v.type==='commercial'||v.type==='tanker'||v.type==='passenger')&&v.grossTonnage>=3000&&isInMapBounds(v.position[1],v.position[0]));const isHighDetail=currentZoom>=8;largeVessels.forEach(vessel=>{const position={lat:vessel.position[1],lng:vessel.position[0]};// Large vessels have 40 NM radar range\nconst radarRangeNM=40;// Convert NM to meters (1 NM = 1852 meters)\nconst radarRangeMeters=radarRangeNM*1852;result.push(/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:radarRangeMeters,options:{fillColor:'#4285F4',fillOpacity:isHighDetail?0.03:0.02,strokeColor:'#4285F4',strokeOpacity:isHighDetail?0.6:0.4,strokeWeight:isHighDetail?1:0.5,strokeDashArray:[5,5]// Dashed line pattern\n}},`large-vessel-radar-${vessel.id}`));});}return result;},[showVesselRadar,showLargeVesselRadar,vessels,isInMapBounds,currentZoom]);// Update the map when display mode changes\nuseEffect(()=>{// This effect updates the Google Maps styling when display mode changes\nmapOptions.styles=getMapStyle(displayMode);// If map is loaded, we can update its options\nif(mapRef.current){mapRef.current.setOptions(mapOptions);}},[displayMode,mapOptions]);// onMapLoad with error handling \nconst onMapLoad=useCallback(map=>{console.log(\"Map loaded successfully\");mapRef.current=map;// Make sure dragging is enabled\nmap.setOptions({draggable:true,zoomControl:false,scrollwheel:true,disableDoubleClickZoom:false});// We can store the map's zoom control functionality\nzoomRef.current={zoomIn:()=>{const newZoom=map.getZoom()+1;map.setZoom(newZoom);setCurrentZoom(newZoom);},zoomOut:()=>{const newZoom=map.getZoom()-1;map.setZoom(newZoom);setCurrentZoom(newZoom);}};// Get initial bounds\nif(map.getBounds()){const bounds=map.getBounds();setMapBounds({north:bounds.getNorthEast().lat(),east:bounds.getNorthEast().lng(),south:bounds.getSouthWest().lat(),west:bounds.getSouthWest().lng()});// Initialize current center from the map\nconst center=map.getCenter();setCurrentMapCenter({lat:center.lat(),lng:center.lng()});}// Set initial zoom\nsetCurrentZoom(map.getZoom());},[]);// Add a click handler to the map background to deselect the current vessel\nconst handleMapClick=()=>{// Simply close the vessel display when map is clicked\n// Using the simplest possible approach to avoid any errors\nsetSelectedVessel(null);};// Get visible vessel count - memoized for sidebar display\nconst visibleVesselCount=useMemo(()=>vessels.filter(v=>{const matchesFilter=filter==='all'||(filter==='russian'?v.isRussian:v.type===filter);return matchesFilter;}).length,[vessels,filter]);// Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\nconst displayedVessels=useMemo(()=>vessels.filter(v=>{const matchesFilter=filter==='all'||(filter==='russian'?v.isRussian:v.type===filter);const inBounds=isInMapBounds(v.position[1],v.position[0]);return matchesFilter&&inBounds;}).slice(0,50)// Still limit to 50 for performance\n,[vessels,filter,isInMapBounds]);// Memoize UI elements that don't need frequent updates\nconst controlPanels=useMemo(()=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-sm font-semibold mb-2 palantir-heading\",children:\"Display Mode\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row flex-nowrap\",children:[/*#__PURE__*/_jsxs(\"button\",{className:displayMode==='radar'?'active':'',onClick:()=>setDisplayMode('radar'),children:[/*#__PURE__*/_jsx(Radar,{size:14,className:\"mr-1\"}),\"Radar\"]}),/*#__PURE__*/_jsxs(\"button\",{className:displayMode==='sonar'?'active':'',onClick:()=>setDisplayMode('sonar'),children:[/*#__PURE__*/_jsx(Waves,{size:14,className:\"mr-1\"}),\"Sonar\"]}),/*#__PURE__*/_jsxs(\"button\",{className:displayMode==='fused'?'active':'',onClick:()=>setDisplayMode('fused'),children:[/*#__PURE__*/_jsx(Layers,{size:14,className:\"mr-1\"}),\"Fused\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-sm font-semibold mb-2 palantir-heading\",children:\"Vessel Filter\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row flex-wrap\",children:[/*#__PURE__*/_jsx(\"button\",{className:filter==='all'?'active':'',onClick:()=>setFilter('all'),children:\"All\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='commercial'?'active':'',onClick:()=>setFilter('commercial'),children:\"Commercial\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='military'?'active':'',onClick:()=>setFilter('military'),children:\"Military\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='submarine'?'active':'',onClick:()=>setFilter('submarine'),children:\"Submarines\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='russian'?'active':'',onClick:()=>setFilter('russian'),children:\"Russian\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-sm font-semibold mb-3 palantir-heading\",children:\"Wind Infrastructure\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col gap-2\",children:[/*#__PURE__*/_jsxs(\"button\",{className:showWindFarms?'active':'',onClick:()=>{const newShowWindFarms=!showWindFarms;setShowWindFarms(newShowWindFarms);// If turning off wind farms, ensure radar coverage is also off\nif(!newShowWindFarms){setShowRadarCoverage(false);}},children:[/*#__PURE__*/_jsx(Wind,{size:16,className:\"mr-1\"}),\"Wind Farms \",showWindFarms?'(Shown)':'(Hidden)']}),/*#__PURE__*/_jsxs(\"button\",{className:showRadarCoverage?'active':'',onClick:()=>{setShowRadarCoverage(!showRadarCoverage);},disabled:!showWindFarms,style:{opacity:!showWindFarms?0.5:1},children:[/*#__PURE__*/_jsx(Radar,{size:16,className:\"mr-1\"}),\"Radar Coverage (42 NM)\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-sm font-semibold mb-3 palantir-heading\",children:\"Commercial Vessel Infrastructure\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col gap-2\",children:[/*#__PURE__*/_jsxs(\"button\",{className:showVesselRadar?'active':'',onClick:()=>setShowVesselRadar(!showVesselRadar),children:[/*#__PURE__*/_jsx(Radar,{size:16,className:\"mr-1\"}),\"Vessel Radar (GT 300-2999)\"]}),/*#__PURE__*/_jsxs(\"button\",{className:showLargeVesselRadar?'active':'',onClick:()=>setShowLargeVesselRadar(!showLargeVesselRadar),children:[/*#__PURE__*/_jsx(Radar,{size:16,className:\"mr-1\"}),\"Vessel Radar (GT > 3000)\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-sm font-semibold mb-3 palantir-heading\",children:\"Vessel Simulation\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col gap-3\",children:[/*#__PURE__*/_jsxs(\"button\",{className:simulationEnabled?'active':'',onClick:()=>setSimulationEnabled(!simulationEnabled),children:[/*#__PURE__*/_jsx(Ship,{size:16,className:\"mr-1\"}),simulationEnabled?'Pause Movement':'Start Movement']}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-xs mb-1\",children:[\"Speed: \",simulationSpeed,\"x\"]}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"50\",value:simulationSpeed,onChange:e=>setSimulationSpeed(parseInt(e.target.value)),className:\"w-2/5 max-w-[80px] accent-blue-500\"})]}),/*#__PURE__*/_jsxs(\"button\",{className:`${seaMeshSimulationEnabled?'active':''} bg-amber-700 hover:bg-amber-600`,onClick:toggleSeaMeshSimulation,children:[/*#__PURE__*/_jsx(Radar,{size:16,className:\"mr-1\"}),seaMeshSimulationEnabled?'Stop SeaMesh':'Simulate SeaMesh']})]})]})]}),[displayMode,filter,showWindFarms,showRadarCoverage,showVesselRadar,showLargeVesselRadar,simulationEnabled,simulationSpeed,seaMeshSimulationEnabled]);// Add debugging for selectedVessel state changes\nuseEffect(()=>{console.log(\"selectedVessel updated:\",selectedVessel);// Add debugging to check if selectedVessel is correctly set\nif(selectedVessel){console.log(\"Selected vessel details:\",{id:selectedVessel.id,name:selectedVessel.name,type:selectedVessel.type,isWindFarm:selectedVessel.isWindFarm});// Force a small UI update to trigger re-renders\nconst refreshTimer=setTimeout(()=>{// This just forces a small UI update\nconst dummyEvent=new Event('resize');window.dispatchEvent(dummyEvent);},100);return()=>clearTimeout(refreshTimer);}},[selectedVessel]);// Function to stop all active simulations\nconst stopAllSimulations=useCallback(()=>{// Stop vessel movement simulation\nif(simulationEnabled){setSimulationEnabled(false);if(animationFrameRef.current){cancelAnimationFrame(animationFrameRef.current);animationFrameRef.current=null;}}// Stop SeaMesh simulation\nif(seaMeshSimulationEnabled){setSeaMeshSimulationEnabled(false);if(seaMeshAnimationRef.current){clearInterval(seaMeshAnimationRef.current);seaMeshAnimationRef.current=null;}}},[simulationEnabled,seaMeshSimulationEnabled]);// Initialize warships for SeaMesh simulation\nconst initializeSeaMeshSimulation=useCallback(()=>{// Define locations\nconst kaliningrad={lat:54.7,lng:20.5};const stPetersburg={lat:59.9,lng:30.3};const stockholm={lat:59.3,lng:18.1};// Create Russian warships - one from Kaliningrad, one from St. Petersburg\nconst newWarships=[{id:'warship-kaliningrad',name:'RFS Admiral Gorshkov',type:'military',position:[kaliningrad.lng,kaliningrad.lat],heading:315,// Heading toward Stockholm\nspeed:0,targetSpeed:20,isRussian:true,flag:'Russia',isWarship:true,detected:false,path:[kaliningrad,{lat:55.3,lng:19.2},// Baltic Sea route point 1\n{lat:56.5,lng:18.4},// Baltic Sea route point 2\n{lat:57.9,lng:18.2},// South of Gotland\n{lat:58.6,lng:18.3},// North of Gotland\nstockholm],currentPathIndex:0,radar:false},{id:'warship-stpetersburg',name:'RFS Steregushchiy',type:'military',position:[stPetersburg.lng,stPetersburg.lat],heading:270,// Heading west toward Stockholm\nspeed:0,targetSpeed:25,isRussian:true,flag:'Russia',isWarship:true,detected:false,path:[stPetersburg,{lat:59.8,lng:27.0},// Gulf of Finland route point 1\n{lat:59.7,lng:24.5},// Gulf of Finland route point 2\n{lat:59.5,lng:22.0},// Gulf of Finland exit\n{lat:59.4,lng:20.0},// Baltic Sea approach\nstockholm],currentPathIndex:0,radar:false}];setWarships(newWarships);setDetectionRings([]);setSimulationStep(0);// Center map on Gulf of Finland\nif(mapRef.current){mapRef.current.panTo({lat:58.5,lng:21.0});mapRef.current.setZoom(7);}return newWarships;},[]);// Run SeaMesh simulation steps - simplified version\nconst runSeaMeshSimulation=useCallback(()=>{if(!seaMeshSimulationEnabled)return;setSimulationStep(prevStep=>{const nextStep=prevStep+1;// Move warships along their paths - simplified movement logic\nsetWarships(prevWarships=>{return prevWarships.map(warship=>{// Only start moving after a few steps (staggered start)\nconst shouldMove=warship.id==='warship-kaliningrad'&&nextStep>3||warship.id==='warship-stpetersburg'&&nextStep>8;if(!shouldMove)return warship;// If we reached target, stop moving\nif(warship.currentPathIndex>=warship.path.length-1){return{...warship,speed:0,targetSpeed:0};}// Simple direct movement to next path point\nconst currentPoint=warship.path[warship.currentPathIndex];const nextPoint=warship.path[warship.currentPathIndex+1];// Calculate new heading\nconst dx=nextPoint.lng-currentPoint.lng;const dy=nextPoint.lat-currentPoint.lat;const heading=Math.atan2(dx,dy)*(180/Math.PI);// Simple fixed progress per step (less complex math)\nconst progress=0.2;// Move 20% closer to the next point each step\n// Calculate new position\nconst newLng=currentPoint.lng+dx*progress;const newLat=currentPoint.lat+dy*progress;// Check if we've reached the next point\nconst distanceToNext=Math.sqrt(Math.pow(nextPoint.lng-newLng,2)+Math.pow(nextPoint.lat-newLat,2));// If we're close enough to the next point, move to next segment\nif(distanceToNext<0.01){return{...warship,position:[nextPoint.lng,nextPoint.lat],currentPathIndex:warship.currentPathIndex+1,heading:heading,speed:20};}// Otherwise, continue moving along current segment\nreturn{...warship,position:[newLng,newLat],heading:heading,speed:20};});});// Add detection rings at specific steps - simplified\nif(nextStep===15||nextStep===30||nextStep===45||nextStep===60){console.log(\"Detection step triggered:\",nextStep);// Get current warship positions\nconst kaliningradWarship=warships.find(w=>w.id==='warship-kaliningrad');const stPetersburgWarship=warships.find(w=>w.id==='warship-stpetersburg');// Add detection ring to a random vessel\nif(vessels.length>0&&(kaliningradWarship||stPetersburgWarship)){console.log(\"Found vessels and warships\");// Choose a random commercial vessel\nconst commercialVessels=vessels.filter(v=>(v.type==='commercial'||v.type==='tanker')&&v.grossTonnage>=300);if(commercialVessels.length>0){console.log(\"Found commercial vessels:\",commercialVessels.length);const randomIndex=Math.floor(Math.random()*commercialVessels.length);const vessel=commercialVessels[randomIndex];// Choose which warship to detect (alternate)\nconst targetWarship=nextStep%2===0?kaliningradWarship:stPetersburgWarship;if(targetWarship){console.log(\"Creating detection for warship:\",targetWarship.id);// Create a detection ring\nconst newRing={id:`detection-${Date.now()}`,position:{lat:vessel.position[1],lng:vessel.position[0]},timestamp:Date.now(),range:Math.floor(Math.random()*10)+15// 15-25 NM\n};// Add the ring\nconsole.log(\"Adding new detection ring\");setDetectionRings(prev=>[...prev,newRing]);// Mark warship as detected\nsetWarships(prev=>prev.map(w=>w.id===targetWarship.id?{...w,detected:true,radar:true}:w));}}}}// End simulation after a certain number of steps\nif(nextStep>80){console.log(\"Simulation complete - ending\");if(seaMeshAnimationRef.current){console.log(\"Clearing animation interval\");clearInterval(seaMeshAnimationRef.current);seaMeshAnimationRef.current=null;}// Use a timeout to avoid state update during render\nsetTimeout(()=>{console.log(\"Setting seaMeshSimulationEnabled to false\");setSeaMeshSimulationEnabled(false);},0);}return nextStep;});},[seaMeshSimulationEnabled,vessels,warships,setWarships,setDetectionRings,setSeaMeshSimulationEnabled,seaMeshAnimationRef]);// Function to toggle SeaMesh simulation\nconst toggleSeaMeshSimulation=useCallback(()=>{if(seaMeshSimulationEnabled){// Stop simulation\nconsole.log(\"Stopping SeaMesh simulation\");setSeaMeshSimulationEnabled(false);}else{// Stop other simulations first\nif(simulationEnabled){console.log(\"Stopping vessel movement simulation before starting SeaMesh\");setSimulationEnabled(false);if(animationFrameRef.current){cancelAnimationFrame(animationFrameRef.current);animationFrameRef.current=null;}}// Initialize warships (reset if already exists)\nconsole.log(\"Initializing warships for SeaMesh simulation\");const initialWarships=initializeSeaMeshSimulation();console.log(\"Initial warships created:\",initialWarships);// Start simulation\nconsole.log(\"Starting SeaMesh simulation\");setSeaMeshSimulationEnabled(true);}},[seaMeshSimulationEnabled,simulationEnabled,initializeSeaMeshSimulation,setSeaMeshSimulationEnabled,setSimulationEnabled]);// Start/stop SeaMesh simulation\nuseEffect(()=>{console.log(\"SeaMesh simulation enabled changed:\",seaMeshSimulationEnabled);console.log(\"Current warships:\",warships);if(seaMeshSimulationEnabled){// Initialize warships if not already done\nif(warships.length===0){console.log(\"No warships found, initializing...\");const initialWarships=initializeSeaMeshSimulation();console.log(\"Warships initialized:\",initialWarships);// Ensure warships are set properly before starting the animation\nif(initialWarships&&initialWarships.length>0){console.log(\"Starting animation timer\");// Run simulation every 2 seconds\nseaMeshAnimationRef.current=setInterval(()=>{console.log(\"Animation step triggered\");runSeaMeshSimulation();},2000);}else{console.error(\"Failed to initialize warships\");}}else{console.log(\"Warships already initialized, just starting animation\");// Just start the animation if warships are already initialized\nseaMeshAnimationRef.current=setInterval(()=>{console.log(\"Animation step triggered\");runSeaMeshSimulation();},2000);}// Show vessel radar automatically\nconsole.log(\"Enabling vessel radar for simulation\");setShowVesselRadar(true);}else if(seaMeshAnimationRef.current){console.log(\"Clearing SeaMesh animation interval\");clearInterval(seaMeshAnimationRef.current);seaMeshAnimationRef.current=null;}return()=>{if(seaMeshAnimationRef.current){console.log(\"Cleanup: clearing SeaMesh animation interval\");clearInterval(seaMeshAnimationRef.current);seaMeshAnimationRef.current=null;}};},[seaMeshSimulationEnabled,initializeSeaMeshSimulation,runSeaMeshSimulation,warships.length,setShowVesselRadar]);// Render the SeaMesh simulation warships and detection rings\nconst renderSeaMeshSimulation=useCallback(()=>{if(warships.length===0)return null;return/*#__PURE__*/_jsxs(_Fragment,{children:[warships.map(warship=>{const position={lat:warship.position[1],lng:warship.position[0]};// Create warship marker icon\nconst warshipIcon={path:\"M -1,1 L 1,1 L 1,-1 L -1,-1 Z\",// Simple square\nfillColor:'rgb(231, 76, 60)',// Red color for Russian vessels\nfillOpacity:0.9,strokeColor:'#FFFFFF',strokeWeight:1,scale:5,rotation:warship.heading};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(MemoizedMarker,{position:position,icon:warshipIcon,zIndex:100,onClick:()=>setSelectedVessel(warship)}),warship.radar&&/*#__PURE__*/_jsx(MemoizedCircle,{center:position,radius:40*1852// 40 NM in meters\n,options:{fillColor:'#FF5252',fillOpacity:0.05,strokeColor:'#FF5252',strokeOpacity:0.7,strokeWeight:1,strokeDashArray:[5,5]// Dashed line pattern\n}}),/*#__PURE__*/_jsx(MemoizedPolyline,{path:warship.path.map(point=>({lat:point.lat,lng:point.lng})),options:{strokeColor:'#FF5252',strokeOpacity:0.6,strokeWeight:1,icons:[{icon:{path:'M 0,-1 0,1',strokeColor:'#FF5252',strokeOpacity:1,scale:3},offset:'0',repeat:'15px'}]}})]},warship.id);}),detectionRings.map((ring,index)=>{// Calculate pulse animation - rings should pulse/flash\nconst animationProgress=(Date.now()-ring.timestamp)%3000/3000;const opacity=0.7-animationProgress*0.5;const radius=ring.range*1852;// Convert NM to meters\nreturn/*#__PURE__*/_jsx(MemoizedCircle,{center:ring.position,radius:radius,options:{fillColor:'#4CAF50',fillOpacity:opacity*0.1,strokeColor:'#4CAF50',strokeOpacity:opacity,strokeWeight:2}},ring.id);})]});},[warships,detectionRings,setSelectedVessel]);// Update UI to include display mode toggle\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"baltic-tracker-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex h-screen\",children:[showSidebar&&/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar w-80\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-6\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-xl font-semibold palantir-heading\",children:\"Baltic Sea Tracker\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowSidebar(false),className:\"text-gray-400 hover:text-white\",children:/*#__PURE__*/_jsx(Menu,{size:20})})]}),controlPanels]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 relative\",children:[!showSidebar&&/*#__PURE__*/_jsx(\"button\",{className:\"absolute top-4 left-4 z-10 bg-gray-800 p-2 rounded-md hover:bg-gray-700\",onClick:()=>setShowSidebar(true),children:/*#__PURE__*/_jsx(Menu,{size:20})}),loadError&&/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-xl mb-4\",children:[\"Error loading Google Maps: \",loadError.message]})}),!loadError&&isLoaded?/*#__PURE__*/_jsxs(GoogleMap,{id:\"map\",mapContainerStyle:mapContainerStyle,center:mapCenter,zoom:mapZoom,options:mapOptions,onLoad:onMapLoad,onUnmount:onMapUnmount,onClick:handleMapClick,onZoomChanged:handleZoomChanged,onBoundsChanged:handleBoundsChanged,children:[renderWindFarms(),renderRadarCoverage(),renderVesselRadarCoverage(),renderVessels(),seaMeshSimulationEnabled&&renderSeaMeshSimulation(),selectedVessel&&renderSelectedVesselDetails()]},mapKey):!loadError?/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full flex items-center justify-center bg-gray-900 text-white\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-xl\",children:\"Loading map...\"})}):null,/*#__PURE__*/_jsxs(\"div\",{className:\"absolute bottom-4 right-4 flex gap-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>zoomRef.current&&zoomRef.current.zoomIn(),className:\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\",children:/*#__PURE__*/_jsx(ZoomIn,{size:20,className:\"text-blue-400\"})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>zoomRef.current&&zoomRef.current.zoomOut(),className:\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\",children:/*#__PURE__*/_jsx(ZoomOut,{size:20,className:\"text-blue-400\"})})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{// Reset vessel selection and visualization features\nsetSelectedVessel(null);setShowWindFarms(false);setShowRadarCoverage(false);setShowVesselRadar(false);setShowLargeVesselRadar(false);setSimulationEnabled(false);// Reset display settings\nsetDisplayMode('radar');setFilter('all');setSimulationSpeed(10);// Reset map position and zoom\nif(mapRef.current){mapRef.current.setCenter(defaultCenter);mapRef.current.setZoom(6);setCurrentZoom(6);setCurrentMapCenter(defaultCenter);}// Force React to remount map components\nsetMapKey(Date.now());// Small timeout to ensure map refreshes completely\nsetTimeout(()=>{if(mapRef.current&&mapRef.current.overlayMapTypes){mapRef.current.overlayMapTypes.clear();}},10);},style:{position:'absolute',bottom:'20px',right:'20px',backgroundColor:'#8B0000',color:'#FFFFFF',padding:'8px 16px',borderRadius:'4px',border:'none',fontWeight:'normal',cursor:'pointer',boxShadow:'0 2px 4px rgba(0, 0, 0, 0.5)',zIndex:9999,fontSize:'14px'},children:\"Reset filters\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-800 p-2 text-center text-sm text-gray-400\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center items-center\",children:[/*#__PURE__*/_jsx(Info,{size:16,className:\"mr-1 text-blue-400\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-gray-300\",children:[\"Baltic Sea Tracker - \",filter==='all'?300:vessels.filter(v=>filter==='russian'?v.isRussian:v.type===filter).length,\" vessels in \",displayMode,\" mode | Zoom: \",currentZoom]}),showWindFarms&&/*#__PURE__*/_jsx(\"span\",{className:\"mx-1 text-amber-400\",children:\"| Wind Farms Shown\"}),showRadarCoverage&&showWindFarms&&/*#__PURE__*/_jsx(\"span\",{className:\"mx-1 text-red-400\",children:\"| Radar Coverage (42 NM)\"}),showVesselRadar&&/*#__PURE__*/_jsx(\"span\",{className:\"mx-1 text-blue-400\",children:\"| Vessel Radar (20/40 NM)\"}),simulationEnabled&&/*#__PURE__*/_jsxs(\"span\",{className:\"mx-1 text-green-400\",children:[\"| Vessel Movement (\",simulationSpeed,\"x)\"]}),seaMeshSimulationEnabled&&/*#__PURE__*/_jsx(\"span\",{className:\"mx-1 text-amber-400\",children:\"| SeaMesh Simulation Active\"})]})})]});};export default BalticSeaTracker;","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","memo","Info","Ship","Menu","ZoomIn","ZoomOut","Radar","Waves","Layers","Wind","GoogleMap","useJsApiLoader","Marker","Circle","Polyline","Polygon","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MemoizedMarker","MemoizedCircle","MemoizedPolygon","MemoizedPolyline","mapContainerStyle","width","height","defaultCenter","lat","lng","BalticSeaTracker","isLoaded","loadError","id","googleMapsApiKey","libraries","console","log","vessels","setVessels","selectedVessel","setSelectedVessel","filter","setFilter","showSidebar","setShowSidebar","displayMode","setDisplayMode","showWindFarms","setShowWindFarms","showRadarCoverage","setShowRadarCoverage","showVesselRadar","setShowVesselRadar","showLargeVesselRadar","setShowLargeVesselRadar","mapBounds","setMapBounds","currentZoom","setCurrentZoom","mapKey","setMapKey","Date","now","simulationEnabled","setSimulationEnabled","simulationSpeed","setSimulationSpeed","seaMeshSimulationEnabled","setSeaMeshSimulationEnabled","simulationStep","setSimulationStep","warships","setWarships","detectionRings","setDetectionRings","animationFrameRef","lastUpdateTimeRef","seaMeshAnimationRef","zoomRef","mapRef","mapCenter","mapZoom","currentMapCenter","setCurrentMapCenter","mapStyle","getMapStyle","mapOptions","disableDefaultUI","zoomControl","styles","draggable","restrictions","latLngBounds","north","south","east","west","mapsLoadedRef","error","current","mode","elementType","stylers","color","featureType","visibility","randomCoordinate","avoidAreas","minLat","maxLat","minLng","maxLng","shippingLanes","weight","totalWeight","reduce","sum","lane","randomPoint","Math","random","selectedLane","cumulativeWeight","area","callCount","undefined","result","generateVessels","vesselTypes","flags","russianOperators","commercialOperators","generatedVessels","occupiedPositions","MIN_DISTANCE","maxAttempts","placedVesselCount","i","type","floor","length","flag","isRussian","position","isInBalticSeaWaters","isTooClose","existingPos","distance","sqrt","pow","push","heading","vesselLat","vesselLng","speed","grossTonnage","round","operator","prefixes","suffixes","shipNumbers","name","detectionProbability","radar","sonar","fused","submarineNames","submarineClasses","submarineDesignations","submarineAreas","randomizedSubmarineAreas","map","pos","attempt","adjustedPosition","depth","isSubmerged","class","designation","simulatedVessels","updateVesselPositions","currentTime","deltaTime","adjustedDeltaTime","prevVessels","vessel","latitudeAdjustment","cos","PI","longitudeChange","latitudeChange","headingRad","newLng","sin","newLat","bestHeading","foundBetterDirection","angleOffset","testHeading","testRad","testLng","testLat","centerLat","centerLng","angleToCenter","atan2","headingDiff","sign","reducedSpeed","max","newHeading","originalSpeed","newSpeed","speedFactor","min","finalLng","finalLat","isNearSwedishCoast","currentPos","requestAnimationFrame","landAreas","shippingChannels","distanceFromEdge","abs","coastalBuffers","swedishProblemAreas","problematicAreas","majorLakes","safeWaterZones","distanceFromCenter","cancelAnimationFrame","isInMapBounds","buffer","renderVessels","isHighDetail","isMediumDetail","isLowDetail","filteredVessels","v","matchesFilter","inBounds","isSelected","iconProps","circleProps","radius","radarOpacity","radarScale","radarColor","path","window","google","maps","SymbolPath","CIRCLE","fillColor","fillOpacity","strokeColor","strokeWeight","scale","anchor","Point","arrowSize","rotation","sonarOpacity","sonarColor","waveRadius","options","strokeOpacity","sonarArrowSize","fusedOpacity","radarValue","sonarValue","fusedColor","fusedArrowSize","confidenceRadius","defaultSize","children","icon","onClick","e","domEvent","stopPropagation","stop","JSON","stringify","vesselCopy","parse","zIndex","center","label","text","fontSize","fontWeight","windFarmsData","country","capacity","status","turbines","areaPoints","renderWindFarms","visibleWindFarms","farm","windFarm","windFarmIcon","areaVisualization","paths","areaInSquareMeters","radiusInMeters","estimatedArea","displayArea","windFarmObj","isWindFarm","renderRadarCoverage","radarCoverageRadius","strokeDashArray","renderVesselRadarCoverage","mediumVessels","forEach","radarRangeNM","radarRangeMeters","largeVessels","setOptions","onMapLoad","scrollwheel","disableDoubleClickZoom","zoomIn","newZoom","getZoom","setZoom","zoomOut","getBounds","bounds","getNorthEast","getSouthWest","getCenter","handleMapClick","visibleVesselCount","displayedVessels","slice","controlPanels","className","size","newShowWindFarms","disabled","style","opacity","value","onChange","parseInt","target","toggleSeaMeshSimulation","refreshTimer","setTimeout","dummyEvent","Event","dispatchEvent","clearTimeout","stopAllSimulations","clearInterval","initializeSeaMeshSimulation","kaliningrad","stPetersburg","stockholm","newWarships","targetSpeed","isWarship","detected","currentPathIndex","panTo","runSeaMeshSimulation","prevStep","nextStep","prevWarships","warship","shouldMove","currentPoint","nextPoint","dx","dy","progress","distanceToNext","kaliningradWarship","find","w","stPetersburgWarship","commercialVessels","randomIndex","targetWarship","newRing","timestamp","range","prev","initialWarships","setInterval","renderSeaMeshSimulation","warshipIcon","point","icons","offset","repeat","ring","index","animationProgress","message","zoom","onLoad","onUnmount","onMapUnmount","onZoomChanged","handleZoomChanged","onBoundsChanged","handleBoundsChanged","renderSelectedVesselDetails","setCenter","overlayMapTypes","clear","bottom","right","backgroundColor","padding","borderRadius","border","cursor","boxShadow"],"sources":["/Users/esbenvahr/Desktop/NEW FINAL/app/src/components/BalticSeaTracker.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo, memo } from 'react';\nimport { Info, Ship, Menu, ZoomIn, ZoomOut, Radar, Waves, Layers, Wind } from 'lucide-react';\nimport '../styles/palantir-theme.css';\nimport { GoogleMap, useJsApiLoader, Marker, Circle, Polyline, Polygon } from '@react-google-maps/api';\n\n// Memoized components for better performance\nconst MemoizedMarker = memo(Marker);\nconst MemoizedCircle = memo(Circle);\nconst MemoizedPolygon = memo(Polygon);\nconst MemoizedPolyline = memo(Polyline);\n\n// Define container style\nconst mapContainerStyle = {\n  width: '100%',\n  height: '100vh'\n};\n\n// Define center for the Baltic Sea\nconst defaultCenter = {\n  lat: 59,\n  lng: 19\n};\n\nconst BalticSeaTracker = () => {\n  // Use the same API key and configuration that worked in SimpleMap\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyAl-iGmFThUduVpLpE7sQTmniBSUPtzJjA',\n    libraries: ['geometry', 'drawing']\n  });\n  \n  console.log(\"Map loading status:\", { isLoaded, loadError });\n\n  const [vessels, setVessels] = useState([]);\n  const [selectedVessel, setSelectedVessel] = useState(null);\n  const [filter, setFilter] = useState('all');\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [displayMode, setDisplayMode] = useState('radar'); // 'radar', 'sonar', or 'fused'\n  const [showWindFarms, setShowWindFarms] = useState(false);\n  const [showRadarCoverage, setShowRadarCoverage] = useState(false); // New state for radar coverage\n  const [showVesselRadar, setShowVesselRadar] = useState(false); // State for vessel radar coverage (300-2999 GT)\n  const [showLargeVesselRadar, setShowLargeVesselRadar] = useState(false); // New state for large vessel radar (>3000 GT)\n  const [mapBounds, setMapBounds] = useState(null); // Track current map bounds\n  const [currentZoom, setCurrentZoom] = useState(6); // Track current zoom level\n  const [mapKey, setMapKey] = useState(Date.now()); // Add key to force remount of map components\n  const [simulationEnabled, setSimulationEnabled] = useState(false); // Track if vessel movement simulation is enabled\n  const [simulationSpeed, setSimulationSpeed] = useState(10); // Simulation speed multiplier (default 10x)\n  const [seaMeshSimulationEnabled, setSeaMeshSimulationEnabled] = useState(false); // Track if SeaMesh simulation is enabled\n  const [simulationStep, setSimulationStep] = useState(0); // Track the current step of the SeaMesh simulation\n  const [warships, setWarships] = useState([]); // Russian warships for the simulation\n  const [detectionRings, setDetectionRings] = useState([]); // Detection events for visualization\n  const animationFrameRef = useRef(null); // Reference to store animation frame ID\n  const lastUpdateTimeRef = useRef(Date.now()); // Reference to store last update time\n  const seaMeshAnimationRef = useRef(null); // Reference for the SeaMesh animation timer\n  \n  const zoomRef = useRef(null);\n  const mapRef = useRef(null);\n  \n  // Google Maps settings\n  const mapCenter = defaultCenter; // Use the default center\n  const mapZoom = 6;\n  \n  // Add state to track current map center\n  const [currentMapCenter, setCurrentMapCenter] = useState(defaultCenter);\n  \n  // Memoize map style to prevent recalculations\n  const mapStyle = useMemo(() => getMapStyle(displayMode), [displayMode]);\n  \n  const mapOptions = useMemo(() => ({\n    disableDefaultUI: true,\n    zoomControl: false,\n    styles: mapStyle,\n    draggable: true, // Ensure map is draggable\n    // Hide cities with population under 5000\n    restrictions: {\n      latLngBounds: {\n        north: 66.0,\n        south: 54.0,\n        east: 30.0,\n        west: 9.0,\n      }\n    }\n  }), [mapStyle]);\n  \n  // Create a ref to track if Google Maps loaded\n  const mapsLoadedRef = useRef(false);\n  \n  // Log any errors with Google Maps loading\n  useEffect(() => {\n    if (loadError) {\n      console.error('Error loading Google Maps:', loadError);\n    }\n    if (isLoaded && !mapsLoadedRef.current) {\n      console.log('Google Maps API loaded successfully');\n      mapsLoadedRef.current = true;\n    }\n  }, [isLoaded, loadError]);\n  \n  // Function to get map style based on display mode\n  function getMapStyle(mode) {\n    switch(mode) {\n      case 'radar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#212121\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#181818\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#3d3d3d\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'sonar':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#003545\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#00C8FF\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#001E29\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#00E5FF\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      case 'fused':\n        return [\n          { elementType: \"geometry\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#142639\" }] },\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#3D85C6\" }] },\n          { featureType: \"water\", elementType: \"geometry\", stylers: [{ color: \"#0A1C2A\" }] },\n          { featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{ color: \"#4a90e2\" }] },\n          { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n          { featureType: \"road\", stylers: [{ visibility: \"off\" }] },\n          // Hide smaller cities/towns\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            stylers: [{ visibility: \"off\" }] },\n          // Only show major cities\n          { featureType: \"administrative.locality\", elementType: \"labels\", \n            filter: [\">=\", [\"get\", \"population\"], 10000],\n            stylers: [{ visibility: \"on\" }] }\n        ];\n      default:\n        return [];\n    }\n  }\n    \n  // Function to generate a random coordinate within Baltic Sea\n  const randomCoordinate = () => {\n    // Areas to avoid - major inland lakes and problematic areas\n    const avoidAreas = [\n      // Swedish lakes\n      {minLat: 58.0, maxLat: 59.3, minLng: 12.3, maxLng: 14.0}, // Vänern\n      {minLat: 57.7, maxLat: 58.7, minLng: 14.0, maxLng: 14.8}, // Vättern\n      {minLat: 59.1, maxLat: 59.7, minLng: 15.8, maxLng: 18.0}, // Mälaren\n      \n      // Finnish lakes\n      {minLat: 61.0, maxLat: 62.3, minLng: 24.5, maxLng: 26.4}, // Päijänne\n      {minLat: 61.3, maxLat: 63.1, minLng: 26.5, maxLng: 29.0}, // Saimaa\n      \n      // Other inland waters to avoid\n      {minLat: 60.0, maxLat: 61.8, minLng: 29.2, maxLng: 32.0}, // Ladoga\n      {minLat: 57.8, maxLat: 59.0, minLng: 26.5, maxLng: 28.5},  // Peipus\n      \n      // Problematic shore areas - Northern Sweden west coast\n      {minLat: 60.0, maxLat: 65.0, minLng: 17.0, maxLng: 19.5},\n      \n      // Problematic shore areas - Northern Finland west coast\n      {minLat: 63.0, maxLat: 65.5, minLng: 22.5, maxLng: 25.0}\n    ];\n    \n    // Combine shipping lanes with wider dispersal areas\n    const shippingLanes = [\n      // Main shipping lanes (lower weight than before to reduce clustering)\n      // Danish Straits to St. Petersburg\n      {minLat: 54.5, maxLat: 55.2, minLng: 10.8, maxLng: 13.0, weight: 5}, // Danish Straits entrance\n      {minLat: 55.0, maxLat: 55.8, minLng: 12.8, maxLng: 14.5, weight: 4}, // Route east of Denmark\n      {minLat: 55.3, maxLat: 56.2, minLng: 14.5, maxLng: 16.5, weight: 4}, // Southern Sweden coast\n      {minLat: 55.0, maxLat: 56.0, minLng: 16.5, maxLng: 18.5, weight: 3}, // Midway to Gotland\n      {minLat: 57.0, maxLat: 58.2, minLng: 18.5, maxLng: 20.0, weight: 4}, // North of Gotland\n      {minLat: 58.5, maxLat: 59.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Approach to Gulf of Finland\n      {minLat: 59.2, maxLat: 59.8, minLng: 22.0, maxLng: 24.5, weight: 5}, // Gulf of Finland western part\n      {minLat: 59.7, maxLat: 60.2, minLng: 24.5, maxLng: 28.0, weight: 4}, // Gulf of Finland eastern part\n      \n      // Port approaches - reduced weights to prevent clustering\n      {minLat: 60.0, maxLat: 60.5, minLng: 24.5, maxLng: 25.0, weight: 3}, // Helsinki\n      {minLat: 60.2, maxLat: 60.5, minLng: 22.0, maxLng: 22.5, weight: 3}, // Turku\n      {minLat: 55.3, maxLat: 56.3, minLng: 12.5, maxLng: 13.0, weight: 3}, // Malmö\n      {minLat: 58.5, maxLat: 59.5, minLng: 16.5, maxLng: 18.5, weight: 3}, // Stockholm\n      {minLat: 54.3, maxLat: 54.8, minLng: 18.3, maxLng: 19.0, weight: 3}, // Gdańsk\n      {minLat: 54.0, maxLat: 54.5, minLng: 13.0, maxLng: 14.5, weight: 3}, // Rostock\n      \n      // Wider dispersal areas - these ensure ships are spread throughout the entire sea\n      // Central Baltic - large dispersal areas\n      {minLat: 56.0, maxLat: 58.0, minLng: 17.0, maxLng: 20.0, weight: 5}, // Central Baltic wider area\n      {minLat: 57.5, maxLat: 59.5, minLng: 19.0, maxLng: 22.0, weight: 5}, // Eastern Baltic wider area\n      \n      // Gulf of Bothnia - more dispersed\n      {minLat: 60.0, maxLat: 62.0, minLng: 18.0, maxLng: 21.0, weight: 4}, // Southern Bothnia dispersed\n      {minLat: 62.0, maxLat: 65.0, minLng: 18.0, maxLng: 23.0, weight: 3}, // Northern Bothnia dispersed\n      \n      // Western Baltic - more dispersed\n      {minLat: 54.0, maxLat: 56.0, minLng: 12.0, maxLng: 15.0, weight: 4}, // Western Baltic dispersed\n      {minLat: 54.0, maxLat: 57.0, minLng: 15.0, maxLng: 18.0, weight: 5}, // South-central Baltic dispersed\n      \n      // Other dispersed areas to ensure wider coverage\n      {minLat: 54.0, maxLat: 55.5, minLng: 18.0, maxLng: 20.0, weight: 3}, // Southern Baltic dispersed\n      {minLat: 56.5, maxLat: 58.0, minLng: 15.0, maxLng: 17.0, weight: 3}, // Western Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 20.0, maxLng: 22.0, weight: 3}, // Eastern Gotland dispersed\n      {minLat: 57.0, maxLat: 58.5, minLng: 22.0, maxLng: 24.0, weight: 3}, // Gulf of Riga dispersed\n    ];\n    \n    // Calculate total weight\n    const totalWeight = shippingLanes.reduce((sum, lane) => sum + lane.weight, 0);\n    \n    // Pick a random lane with weighting\n    let randomPoint = Math.random() * totalWeight;\n    let selectedLane = shippingLanes[0];\n    let cumulativeWeight = 0;\n    \n    for (const lane of shippingLanes) {\n      cumulativeWeight += lane.weight;\n      if (randomPoint <= cumulativeWeight) {\n        selectedLane = lane;\n        break;\n      }\n    }\n    \n    // Generate random point\n    const lng = selectedLane.minLng + Math.random() * (selectedLane.maxLng - selectedLane.minLng);\n    const lat = selectedLane.minLat + Math.random() * (selectedLane.maxLat - selectedLane.minLat);\n    \n    // Check if the generated point is in an area to avoid\n    for (const area of avoidAreas) {\n      if (lat >= area.minLat && lat <= area.maxLat && lng >= area.minLng && lng <= area.maxLng) {\n        // If in an avoid area, recursively try again (with a maximum call stack check)\n        // This ensures we don't get stuck in an infinite loop\n        if (randomCoordinate.callCount === undefined) {\n          randomCoordinate.callCount = 0;\n        }\n        \n        if (randomCoordinate.callCount < 10) {\n          randomCoordinate.callCount++;\n          const result = randomCoordinate();\n          randomCoordinate.callCount--;\n          return result;\n        } else {\n          // If we've tried too many times, just use a safe zone in the central Baltic\n          randomCoordinate.callCount = 0;\n          return [18.5 + Math.random() * 2, 56.5 + Math.random() * 2]; // Safe zone in central Baltic\n        }\n      }\n    }\n    \n    // Reset call count\n    if (randomCoordinate.callCount !== undefined) {\n      randomCoordinate.callCount = 0;\n    }\n    \n    // Return the coordinates\n    return [lng, lat];\n  };\n  \n  // Generate 300 simulated vessels with realistic properties (reduced from 1000)\n  const generateVessels = useCallback(() => {\n    const vesselTypes = ['commercial', 'military', 'fishing', 'passenger', 'tanker'];\n    const flags = ['Finland', 'Sweden', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Germany', 'Denmark', 'Russia'];\n    const russianOperators = ['Sovcomflot', 'Gazprom Fleet', 'Rosmorport', 'Russian Navy', 'Rosneft'];\n    const commercialOperators = ['Maersk', 'MSC', 'CMA CGM', 'Hapag-Lloyd', 'ONE', 'Evergreen', 'COSCO', \n                                'Yang Ming', 'HMM', 'Grimaldi', 'DFDS', 'Stena Line', 'Tallink', 'Viking Line'];\n    \n    // Generate vessels with better dispersal throughout the Baltic Sea\n    const generatedVessels = [];\n    const occupiedPositions = []; // Track positions to ensure better dispersal\n    const MIN_DISTANCE = 0.2; // Minimum distance between vessels in degrees (approx 10-20km)\n    \n    // Start with fewer vessels and then disperse them more effectively\n    const maxAttempts = 600; // Increase attempts to find valid positions\n    let placedVesselCount = 0;\n    \n    // Try to place vessels with appropriate spacing\n    for (let i = 1; placedVesselCount < 300 && i <= maxAttempts; i++) {\n      const type = vesselTypes[Math.floor(Math.random() * vesselTypes.length)];\n      const flag = flags[Math.floor(Math.random() * flags.length)];\n      const isRussian = flag === 'Russia' || (Math.random() < 0.05); // 5% chance of non-Russian flag but Russian operated\n      \n      // Get a potential position for the vessel\n      const position = randomCoordinate();\n      \n      // Skip positions that are not in Baltic Sea water\n      if (!isInBalticSeaWaters(position[1], position[0])) {\n        continue;\n      }\n      \n      // Check if this position is too close to existing vessels\n      let isTooClose = false;\n      for (const existingPos of occupiedPositions) {\n        const distance = Math.sqrt(\n          Math.pow(position[0] - existingPos[0], 2) + \n          Math.pow(position[1] - existingPos[1], 2)\n        );\n        \n        if (distance < MIN_DISTANCE) {\n          isTooClose = true;\n          break;\n        }\n      }\n      \n      // If the position is too close to other vessels, skip this attempt\n      if (isTooClose) {\n        continue;\n      }\n      \n      // If we got here, the position is good, so add it to occupied positions\n      occupiedPositions.push(position);\n      placedVesselCount++;\n      \n      // Calculate a more realistic heading based on position\n      // Ships in the Baltic generally move east-west in southern parts, and north-south in gulfs\n      let heading;\n      const vesselLat = position[1];\n      const vesselLng = position[0];\n      \n      // Baltic shipping lane direction tendencies\n      if (vesselLng < 14.0) {\n        // Danish straits and western Baltic - generally east/west traffic\n        heading = Math.random() < 0.7 ? 70 + Math.random() * 40 : 250 + Math.random() * 40;\n      } else if (vesselLng > 23.0 && vesselLat > 59.0) {\n        // Gulf of Finland - generally east/west traffic\n        heading = Math.random() < 0.5 ? 80 + Math.random() * 30 : 260 + Math.random() * 30;\n      } else if (vesselLng > 19.0 && vesselLat > 60.0) {\n        // Gulf of Bothnia - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 30 : 180 + Math.random() * 30;\n      } else if (vesselLng > 22.0 && vesselLat < 58.0 && vesselLat > 56.5) {\n        // Gulf of Riga - generally north/south traffic\n        heading = Math.random() < 0.5 ? 0 + Math.random() * 40 : 180 + Math.random() * 40;\n      } else if (vesselLat < 56.0 && vesselLng > 18.0) {\n        // Southern Baltic to Polish/Lithuanian ports\n        heading = Math.random() < 0.6 ? 140 + Math.random() * 40 : 320 + Math.random() * 40;\n      } else {\n        // Central Baltic - mixed traffic patterns\n        heading = Math.floor(Math.random() * 360);\n      }\n      \n      // Realistic speed based on vessel type and weather (assumed normal conditions)\n      let speed;\n      if (type === 'commercial' || type === 'tanker') {\n        speed = 10 + Math.floor(Math.random() * 8); // 10-18 knots\n      } else if (type === 'passenger') {\n        speed = 15 + Math.floor(Math.random() * 10); // 15-25 knots\n      } else if (type === 'military') {\n        speed = 5 + Math.floor(Math.random() * 25); // 5-30 knots (more variable)\n      } else if (type === 'fishing') {\n        // Fishing vessels move slower or may be stationary when fishing\n        speed = Math.random() < 0.3 ? 0 : 5 + Math.floor(Math.random() * 7); // 0 or 5-12 knots\n      } else {\n        speed = Math.floor(Math.random() * 15) + 5; // 5-20 knots default\n      }\n      \n      // Determine vessel size\n      const length = type === 'tanker' || type === 'commercial' \n        ? 100 + Math.floor(Math.random() * 300) \n        : type === 'military' \n          ? 50 + Math.floor(Math.random() * 200)\n          : 20 + Math.floor(Math.random() * 50);\n      \n      // Calculate gross tonnage (GT) based on vessel length and type\n      // Using simplified formula based on vessel dimensions\n      let grossTonnage;\n      if (type === 'commercial' || type === 'tanker') {\n        // Commercial and tanker vessels have higher GT/length ratios\n        grossTonnage = Math.round(length * length * 0.18); // Approximation\n      } else if (type === 'military') {\n        // Military vessels are typically more dense but smaller\n        grossTonnage = Math.round(length * length * 0.16);\n      } else if (type === 'passenger') {\n        // Passenger vessels have high volume and less dense cargo\n        grossTonnage = Math.round(length * length * 0.2);\n      } else {\n        // Fishing and other vessels\n        grossTonnage = Math.round(length * length * 0.12);\n      }\n      \n      // Determine operator\n      let operator;\n      if (isRussian) {\n        operator = russianOperators[Math.floor(Math.random() * russianOperators.length)];\n      } else {\n        operator = commercialOperators[Math.floor(Math.random() * commercialOperators.length)];\n      }\n      \n      // Generate a realistic vessel name\n      const prefixes = isRussian ? \n        ['Admiral', 'Kapitan', 'Vostok', 'Sibir', 'Moskva', 'Sankt-Peterburg', 'Akademik'] : \n        ['Northern', 'Baltic', 'Sea', 'Atlantic', 'Pacific', 'Star', 'Pioneer'];\n      \n      const suffixes = isRussian ?\n        ['Kuznetsov', 'Nakhimov', 'Gorshkov', 'Lazarev', 'Kasatonov', 'Ustinov'] :\n        ['Adventurer', 'Explorer', 'Navigator', 'Voyager', 'Mariner', 'Trader', 'Express'];\n        \n      const shipNumbers = ['I', 'II', 'III', 'IV', 'V', '1', '2', '3', '4', '5'];\n      \n      let name;\n      if (Math.random() < 0.3) {\n        // 30% chance of having a prefix-suffix name\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${suffixes[Math.floor(Math.random() * suffixes.length)]}`;\n      } else if (Math.random() < 0.5) {\n        // 20% chance of having a name with a number\n        name = `${prefixes[Math.floor(Math.random() * prefixes.length)]} ${shipNumbers[Math.floor(Math.random() * shipNumbers.length)]}`;\n      } else {\n        // 50% chance of having a simple prefix or suffix name\n        name = Math.random() < 0.5 ? \n          prefixes[Math.floor(Math.random() * prefixes.length)] : \n          suffixes[Math.floor(Math.random() * suffixes.length)];\n      }\n      \n      if (type === 'military' && isRussian) {\n        name = `RFS ${name}`; // Russian Federation Ship\n      }\n      \n      // Calculate a detection probability\n      const detectionProbability = {\n        radar: Math.random(), // 0-1, higher means more visible on radar\n        sonar: Math.random(), // 0-1, higher means more detectable by sonar\n        fused: (Math.random() + Math.random()) / 2 // average of two values for a more normal distribution\n      };\n      \n      // Generate a vessel object with all properties\n      generatedVessels.push({\n        id: placedVesselCount,\n        name,\n        type,\n        flag,\n        isRussian,\n        position,\n        heading,\n        speed,\n        length,\n        operator,\n        detectionProbability,\n        grossTonnage\n      });\n    }\n    \n    // More evenly disperse submarines too\n    // Generate Russian submarines with special characteristics\n    const submarineNames = [\n      'Krasnodar', 'Novorossiysk', 'Rostov-on-Don', 'Stary Oskol', \n      'Velikiy Novgorod', 'Kolpino', 'Sankt Peterburg'\n    ];\n    \n    const submarineClasses = [\n      'Kilo-class', 'Kilo-class', 'Kilo-class', 'Kilo-class',\n      'Improved Kilo-class', 'Improved Kilo-class', 'Lada-class'\n    ];\n    \n    const submarineDesignations = [\n      'B-265', 'B-261', 'B-237', 'B-262', \n      'B-268', 'B-271', 'B-585'\n    ];\n    \n    // Use more strategic submarine positions\n    const submarineAreas = [\n      // Gulf of Finland approach - monitoring traffic to St. Petersburg\n      [26.2, 59.7],\n      // Near NATO naval exercise areas in central Baltic\n      [19.3, 56.8],\n      // Monitoring approach to Stockholm archipelago\n      [18.9, 58.9],\n      // Deep water between Gotland and Latvia (strategic position)\n      [20.1, 57.3],\n      // Patrolling near Kaliningrad naval base\n      [19.6, 55.2],\n      // Monitoring naval traffic near Gdańsk\n      [18.8, 54.8],\n      // Danish straits approaches - key strategic chokepoint\n      [12.8, 55.4]\n    ];\n    \n    // Add some randomness to submarine positions to avoid perfect predictability\n    const randomizedSubmarineAreas = submarineAreas.map(pos => [\n      pos[0] + (Math.random() - 0.5) * 0.5,  // Add up to ±0.25 degrees longitude\n      pos[1] + (Math.random() - 0.5) * 0.3   // Add up to ±0.15 degrees latitude\n    ]);\n    \n    // Add submarines to generated vessels\n    for (let i = 0; i < 7; i++) {\n      const position = randomizedSubmarineAreas[i];\n      \n      // Skip submarine positions that aren't in Baltic Sea water\n      if (!isInBalticSeaWaters(position[1], position[0])) {\n        // Try to find a better position by adjusting slightly\n        for (let attempt = 0; attempt < 5; attempt++) {\n          // Try adjusting position slightly to find water\n          const adjustedPosition = [\n            position[0] + (Math.random() - 0.5) * 0.5,\n            position[1] + (Math.random() - 0.5) * 0.5\n          ];\n          \n          if (isInBalticSeaWaters(adjustedPosition[1], adjustedPosition[0])) {\n            // Found a valid position\n            position[0] = adjustedPosition[0];\n            position[1] = adjustedPosition[1];\n            break;\n          }\n        }\n        \n        // If still not in water after adjustments, skip this submarine\n        if (!isInBalticSeaWaters(position[1], position[0])) {\n          continue;\n        }\n      }\n      \n      const heading = Math.floor(Math.random() * 360);\n      const speed = 5 + Math.floor(Math.random() * 10); // Submarines move slower on average\n      const depth = 20 + Math.floor(Math.random() * 180); // Depth in meters\n      \n      // Submarine detection characteristics\n      // Low radar detection when submerged, high sonar signature\n      const isSubmerged = Math.random() > 0.3; // 70% chance of being submerged\n      \n      const detectionProbability = {\n        radar: isSubmerged ? 0.05 + Math.random() * 0.1 : 0.3 + Math.random() * 0.2, // Low radar when submerged\n        sonar: 0.6 + Math.random() * 0.4, // High sonar signature\n        fused: isSubmerged ? \n          (0.05 + Math.random() * 0.1 + 0.6 + Math.random() * 0.4) / 2 : // Average when submerged\n          (0.3 + Math.random() * 0.2 + 0.6 + Math.random() * 0.4) / 2    // Average when surfaced\n      };\n      \n      generatedVessels.push({\n        id: 1001 + i, // IDs starting from 1001 for submarines\n        name: `RFS ${submarineNames[i]}`,\n        type: 'submarine',\n        class: submarineClasses[i],\n        designation: submarineDesignations[i],\n        flag: 'Russia',\n        isRussian: true,\n        position,\n        heading,\n        speed,\n        depth,\n        length: 70 + Math.floor(Math.random() * 20), // Kilo-class submarines are around 70-74m\n        isSubmerged,\n        operator: 'Russian Navy',\n        detectionProbability\n      });\n    }\n    \n    return generatedVessels;\n  }, []);\n  \n  // Generate vessel data when component mounts\n  useEffect(() => {\n    const simulatedVessels = generateVessels();\n    setVessels(simulatedVessels);\n  }, [generateVessels]);\n  \n  // Update vessel positions based on speed and heading\n  const updateVesselPositions = useCallback(() => {\n    if (!simulationEnabled) return;\n    \n    const currentTime = Date.now();\n    const deltaTime = (currentTime - lastUpdateTimeRef.current) / 1000; // Convert ms to seconds\n    lastUpdateTimeRef.current = currentTime;\n    \n    // Apply speed multiplier to deltaTime\n    const adjustedDeltaTime = deltaTime * simulationSpeed;\n    \n    // Skip if delta time is too large (e.g., browser tab was inactive)\n    if (adjustedDeltaTime > 5) return;\n    \n    setVessels(prevVessels => {\n      return prevVessels.map(vessel => {\n        // Skip stationary vessels\n        if (vessel.speed === 0) return vessel;\n        \n        // Convert knots to degrees per second\n        // 1 knot ≈ 0.0003 degrees of longitude at the equator per second\n        // Adjust for latitude (narrower longitude degrees at higher latitudes)\n        const latitudeAdjustment = Math.cos(vessel.position[1] * Math.PI / 180);\n        const longitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime / latitudeAdjustment;\n        const latitudeChange = vessel.speed * 0.0003 * adjustedDeltaTime;\n        \n        // Calculate new position based on heading\n        const headingRad = vessel.heading * Math.PI / 180;\n        const newLng = vessel.position[0] + (longitudeChange * Math.sin(headingRad));\n        const newLat = vessel.position[1] + (latitudeChange * Math.cos(headingRad));\n        \n        // Enhanced boundary checking to keep vessels within the actual Baltic Sea water\n        if (!isInBalticSeaWaters(newLat, newLng)) {\n          // If would move onto land or out of bounds, adjust heading to turn back toward deeper water\n          // Use a more detailed approach to find the right direction\n          \n          // Try finding a better direction by checking multiple angles\n          let bestHeading = vessel.heading;\n          let foundBetterDirection = false;\n          \n          // Check 8 directions around to find waters\n          for (let angleOffset = 0; angleOffset < 360; angleOffset += 45) {\n            const testHeading = (vessel.heading + angleOffset) % 360;\n            const testRad = testHeading * Math.PI / 180;\n            \n            // Check a position further out in this direction\n            const testLng = vessel.position[0] + (longitudeChange * 5 * Math.sin(testRad));\n            const testLat = vessel.position[1] + (latitudeChange * 5 * Math.cos(testRad));\n            \n            if (isInBalticSeaWaters(testLat, testLng)) {\n              bestHeading = testHeading;\n              foundBetterDirection = true;\n              break;\n            }\n          }\n          \n          // If no good direction found, head toward the Baltic center\n          if (!foundBetterDirection) {\n            const centerLat = 58.5; // More centered in the main Baltic basin\n            const centerLng = 20;   // Adjusted to be in deeper waters\n            const angleToCenter = Math.atan2(centerLng - vessel.position[0], centerLat - vessel.position[1]) * 180 / Math.PI;\n            \n            // Turn gradually toward the center\n            const headingDiff = ((angleToCenter - vessel.heading + 540) % 360) - 180;\n            bestHeading = (vessel.heading + Math.sign(headingDiff) * 45) % 360;\n            if (bestHeading < 0) bestHeading += 360;\n          }\n          \n          // Slow down near boundaries\n          const reducedSpeed = Math.max(1, vessel.speed * 0.5);\n          \n          return {\n            ...vessel,\n            heading: bestHeading,\n            speed: reducedSpeed // Temporarily reduce speed when changing course\n          };\n        }\n        \n        // For military and submarine vessels, randomly change heading occasionally\n        let newHeading = vessel.heading;\n        const originalSpeed = vessel.speed;\n        let newSpeed = originalSpeed;\n        \n        if ((vessel.type === 'military' || vessel.type === 'submarine') && Math.random() < 0.01 * adjustedDeltaTime) {\n          // Change heading by up to +/- 30 degrees\n          newHeading = (vessel.heading + (Math.random() * 60 - 30)) % 360;\n          if (newHeading < 0) newHeading += 360;\n          \n          // Military vessels might change speed during maneuvers\n          if (Math.random() < 0.3) {\n            const speedFactor = 0.7 + Math.random() * 0.6; // 70-130% of current speed\n            newSpeed = Math.max(1, Math.min(30, originalSpeed * speedFactor));\n          }\n        }\n        // Smaller random heading changes for other vessels to simulate realistic movement\n        else if (Math.random() < 0.005 * adjustedDeltaTime) {\n          // Change heading by up to +/- 10 degrees\n          newHeading = (vessel.heading + (Math.random() * 20 - 10)) % 360;\n          if (newHeading < 0) newHeading += 360;\n        }\n        \n        // Final position check - ensure vessel doesn't go on land even after all other checks\n        const finalLng = newLng;\n        const finalLat = newLat;\n        \n        // If vessel would end up on land, don't update position but keep the heading change\n        if (!isInBalticSeaWaters(finalLat, finalLng)) {\n          return {\n            ...vessel,\n            heading: newHeading,\n            speed: newSpeed\n          };\n        }\n        \n        // Special check for Swedish coastline (which seems particularly problematic)\n        // These bounds roughly define the Swedish coastline area\n        const isNearSwedishCoast = (\n          (finalLat >= 55.0 && finalLat <= 60.0 && finalLng >= 12.0 && finalLng <= 19.0) &&\n          // Distance to coast is small\n          ((finalLng >= 12.0 && finalLng <= 14.0) || // Western coast\n           (finalLat >= 58.0 && finalLat <= 60.0 && finalLng >= 16.5 && finalLng <= 19.0) || // Stockholm area\n           (finalLat >= 56.0 && finalLat <= 58.0 && finalLng >= 15.5 && finalLng <= 17.0)) // Eastern coast\n        );\n        \n        // For vessels near Swedish coast, make extra check by testing multiple points\n        if (isNearSwedishCoast && Math.random() < 0.7) { // 70% extra caution near Swedish coast\n          const currentPos = vessel.position;\n          const distance = Math.sqrt(\n            Math.pow(finalLng - currentPos[0], 2) + \n            Math.pow(finalLat - currentPos[1], 2)\n          );\n          \n          // If making a significant move near Swedish coast, stay put instead of risking land\n          if (distance > 0.02) {\n            return {\n              ...vessel,\n              heading: newHeading,\n              speed: Math.max(1, newSpeed * 0.5) // Reduce speed near coast\n            };\n          }\n        }\n        \n        return {\n          ...vessel,\n          position: [finalLng, finalLat],\n          heading: newHeading,\n          speed: newSpeed\n        };\n      });\n    });\n    \n    // Request next animation frame\n    animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n  }, [simulationEnabled, simulationSpeed]);\n  \n  // Function to check if a point is in Baltic Sea waters\n  // This is a more precise check than just the bounding box\n  const isInBalticSeaWaters = useCallback((lat, lng) => {\n    // First check overall bounds\n    if (lat < 54.0 || lat > 66.0 || lng < 9.0 || lng > 30.0) {\n      return false;\n    }\n    \n    // Define areas that are land (to be avoided)\n    // Format: [south, north, west, east]\n    const landAreas = [\n      // Southern Sweden - expanded and more precise with additional coverage\n      [55.0, 59.5, 12.5, 16.0],\n      // Southern Sweden - additional western coast coverage\n      [56.0, 58.8, 11.5, 13.0],\n      // Stockholm archipelago area - more precise\n      [59.0, 60.0, 17.0, 19.2],\n      // Sweden central eastern coast - additional coverage\n      [58.0, 59.5, 16.0, 17.8],\n      // Northern Sweden - Gulf of Bothnia coastline\n      [60.0, 63.0, 17.0, 19.5],\n      // Northern Sweden - upper Gulf of Bothnia\n      [63.0, 65.5, 17.0, 22.0],\n      // Northern Sweden - northwestern area\n      [64.0, 66.0, 15.0, 17.0],\n      // Finland - expanded\n      [59.7, 65.5, 21.0, 30.0],\n      // Estonia - expanded\n      [57.5, 59.7, 22.8, 28.5],\n      // Latvia/Lithuania coast - expanded\n      [55.5, 57.5, 20.8, 28.0],\n      // Poland inland - expanded\n      [54.0, 55.5, 14.8, 19.8],\n      // Germany/Denmark inland - expanded\n      [54.0, 56.5, 9.0, 12.0],\n      // Gotland - more precise\n      [56.8, 58.0, 18.0, 19.2],\n      // Åland Islands - expanded\n      [59.7, 60.5, 19.3, 21.3],\n      // Bornholm - more precise\n      [54.9, 55.3, 14.7, 15.2],\n      // Öland\n      [56.1, 57.5, 16.3, 17.1],\n      // Rügen\n      [54.2, 54.7, 13.0, 13.6],\n      // Saaremaa\n      [57.8, 58.7, 21.7, 23.0],\n      // Hiiumaa\n      [58.7, 59.1, 22.0, 23.0],\n      // Inland lakes in Finland\n      [61.0, 63.0, 25.0, 30.0],\n      // Kaliningrad and surrounding area\n      [54.3, 55.3, 19.6, 22.5]\n    ];\n    \n    // Define key shipping channels and deep waters (preferred areas)\n    // Format: [south, north, west, east, weight]\n    const shippingChannels = [\n      // Main Baltic basin\n      [55.5, 59.0, 16.5, 22.0, 10],\n      // Gulf of Finland shipping lane\n      [59.3, 60.2, 22.5, 28.0, 8],\n      // Approach to Stockholm\n      [58.7, 59.5, 17.5, 19.5, 6],\n      // Approach to Riga\n      [56.8, 58.0, 22.5, 24.5, 6],\n      // Approach to Helsinki/Tallinn\n      [59.2, 59.9, 24.0, 25.5, 8],\n      // Western Baltic shipping lane\n      [54.5, 56.0, 12.0, 15.0, 8],\n      // Kattegat\n      [56.0, 57.5, 10.5, 12.0, 6],\n      // Gulf of Bothnia\n      [60.5, 63.5, 18.5, 21.5, 5],\n      // Central Baltic - expanded to cover more water\n      [56.0, 59.0, 17.5, 21.0, 10],\n      // Southern Baltic - expanded\n      [54.5, 56.5, 15.0, 19.0, 8]\n    ];\n    \n    // Check if point is in a land area - more strict checking\n    for (const [south, north, west, east] of landAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // Further check for complex coastlines\n        // This is a very simplified approach - we add some randomness \n        // to prevent vessels from getting stuck at sharp boundary transitions\n        \n        // If near the edge of a land area, there's a small chance to still consider it water\n        // This helps vessels navigate around complex coastlines without getting stuck\n        const distanceFromEdge = Math.min(\n          Math.abs(lat - south),\n          Math.abs(lat - north),\n          Math.abs(lng - west),\n          Math.abs(lng - east)\n        );\n        \n        // Very close to edge - might be a complex coastline\n        if (distanceFromEdge < 0.1) {\n          // 15% chance to consider it water if very close to edge (reduced from 20%)\n          // This randomness helps prevent getting stuck at boundaries\n          return Math.random() < 0.15;\n        }\n        \n        return false; // It's in a land area\n      }\n    }\n\n    // Check if in a preferred shipping channel\n    for (const [south, north, west, east] of shippingChannels) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true; // In a shipping channel - definitely good\n      }\n    }\n    \n    // For areas not explicitly defined, use the following general rules\n    \n    // Avoid shallow coastal waters (simplified approach)\n    // These are general buffer zones around landmasses\n    const coastalBuffers = [\n      // Swedish coast buffer - expanded\n      [55.0, 59.5, 14.8, 16.5],\n      // Swedish west coast buffer\n      [56.0, 58.8, 11.0, 12.2],\n      // Swedish eastern coastline\n      [58.0, 59.5, 16.0, 17.0],\n      // Northern Sweden - Gulf of Bothnia western coast\n      [60.0, 63.0, 19.0, 20.0],\n      // Northern Sweden - upper coast\n      [63.0, 65.5, 19.5, 22.5],\n      // Finnish coast buffer\n      [59.7, 65.5, 20.0, 21.5],\n      // Estonian coast buffer\n      [57.5, 59.7, 22.0, 23.0],\n      // Latvian/Lithuanian coast buffer\n      [55.5, 57.5, 19.5, 21.5],\n      // Polish coast buffer\n      [54.0, 55.5, 14.0, 15.5],\n      // German/Danish coast buffer\n      [54.0, 56.0, 12.0, 13.0]\n    ];\n    \n    // Check coastal buffers with higher probability of rejection\n    for (const [south, north, west, east] of coastalBuffers) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 80% chance to consider coastal buffers as land (increased from 70%)\n        return Math.random() > 0.8;\n      }\n    }\n    \n    // Special check for Swedish coastal waters - these are problematic\n    const swedishProblemAreas = [\n      // Stockholm archipelago approaches\n      [58.8, 59.5, 17.5, 19.0],\n      // Swedish eastern coastline near Öland\n      [56.5, 57.5, 16.0, 16.8],\n      // Swedish western approaches\n      [57.0, 58.5, 11.2, 12.5],\n      // Northern Sweden Gulf of Bothnia western coast\n      [60.0, 63.0, 18.5, 20.0],\n      // Northern Sweden - northeastern area\n      [63.0, 65.0, 19.0, 22.0]\n    ];\n    \n    // Higher rejection rate specifically for Swedish coastal waters\n    for (const [south, north, west, east] of swedishProblemAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 90% chance to reject - very strict for Swedish waters\n        return Math.random() > 0.9;\n      }\n    }\n    \n    // Additional check for enclosed bays and lakes\n    // Define problematic enclosed areas (small bays, inlets, etc.)\n    const problematicAreas = [\n      // Finnish inland lake areas \n      [60.7, 62.5, 23.0, 29.0],\n      // Swedish lake areas\n      [58.5, 59.5, 14.0, 16.0],\n      // Various small bays and inlets\n      [57.2, 57.6, 16.8, 17.2], // Near Öland\n      [60.0, 60.2, 24.8, 25.2], // Helsinki area\n      [58.8, 59.0, 17.5, 18.0], // Stockholm archipelago\n      [58.1, 58.5, 11.5, 12.0]  // Skagerrak entrance\n    ];\n    \n    // Higher chance to reject problematic areas\n    for (const [south, north, west, east] of problematicAreas) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 60% chance to reject\n        return Math.random() > 0.6;\n      }\n    }\n    \n    // Explicitly define major lakes to avoid them completely\n    const majorLakes = [\n      // Swedish lakes\n      [58.0, 59.3, 12.3, 14.0], // Vänern\n      [57.7, 58.7, 14.0, 14.8], // Vättern\n      [59.1, 59.7, 15.8, 18.0], // Mälaren\n      [56.9, 57.5, 13.4, 14.8], // Southern Swedish lakes\n      [56.8, 57.2, 14.4, 15.2], // Åsnen and nearby lakes\n      \n      // Finnish lakes\n      [61.0, 62.3, 24.5, 26.4], // Päijänne and nearby\n      [61.3, 63.1, 26.5, 29.0], // Saimaa system\n      [62.0, 63.7, 23.0, 24.5], // Western Finnish lakes\n      [61.5, 62.2, 28.5, 29.8], // Eastern Finnish lakes\n      [60.3, 60.8, 23.5, 25.0], // Southern Finnish lakes\n      \n      // Russian lakes\n      [60.0, 61.8, 29.2, 32.0], // Ladoga\n      [60.0, 60.8, 27.4, 29.0], // Eastern Gulf of Finland lakes\n      [57.8, 59.0, 26.5, 28.5], // Peipus\n      \n      // Other inland waters\n      [54.1, 54.7, 17.8, 18.7], // Polish lakes\n      [53.5, 54.3, 12.0, 14.0], // German lakes\n      [53.8, 55.0, 10.2, 11.0], // Danish inland waters\n      [55.5, 56.5, 9.5, 10.2]   // Limfjord area\n    ];\n    \n    // Strict rejection of major lakes - almost never allow vessels here\n    for (const [south, north, west, east] of majorLakes) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        // 99.5% chance to consider these as land - essentially never allow vessels in lakes\n        return Math.random() > 0.995;\n      }\n    }\n    \n    // Known safe water zones - replaced with enhanced version\n    const safeWaterZones = [\n      // Central Baltic open water\n      [56.5, 58.5, 18.0, 21.0],\n      // Eastern Baltic open water\n      [57.0, 59.0, 20.0, 22.0],\n      // Western Baltic open water\n      [55.0, 56.5, 13.0, 15.0],\n      // Southern Baltic deep water\n      [54.5, 55.5, 16.0, 18.5],\n      // Gulf of Finland central channel\n      [59.4, 60.0, 23.0, 27.0],\n      // Gulf of Bothnia southern part - central channel\n      [60.5, 62.5, 20.0, 21.0],\n      // Gulf of Bothnia central part - central channel\n      [62.5, 64.0, 20.2, 21.2],\n      // Gulf of Bothnia northern part - central channel\n      [64.0, 65.0, 21.5, 22.5]\n    ];\n    \n    // If in a known safe water zone, it's definitely water\n    for (const [south, north, west, east] of safeWaterZones) {\n      if (lat >= south && lat <= north && lng >= west && lng <= east) {\n        return true;\n      }\n    }\n    \n    // Special check for northern Gulf of Bothnia - narrower channel\n    if (lat >= 63.0 && lat <= 65.5 && lng >= 20.0 && lng <= 22.0) {\n      // In the narrower northern part of Gulf of Bothnia, be more restrictive\n      // Only consider central waters as safe (within 0.3° from center line)\n      const centerLng = 21.0;\n      const distanceFromCenter = Math.abs(lng - centerLng);\n      \n      if (distanceFromCenter < 0.3) {\n        return true; // Central channel\n      } else if (distanceFromCenter < 0.5) {\n        // In the transition zone, random chance to allow\n        return Math.random() > 0.7;\n      } else {\n        // Too close to shore\n        return Math.random() > 0.95; // Very small chance to consider as water\n      }\n    }\n    \n    // If we got here, it's probably in open water\n    return true;\n  }, []);\n  \n  // Start/stop vessel position updates when simulation state changes\n  useEffect(() => {\n    if (simulationEnabled) {\n      lastUpdateTimeRef.current = Date.now();\n      animationFrameRef.current = requestAnimationFrame(updateVesselPositions);\n    } else if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    // Cleanup when component unmounts\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [simulationEnabled, updateVesselPositions]);\n  \n  // Function to check if an item is in the current map bounds\n  const isInMapBounds = useCallback((lat, lng) => {\n    if (!mapBounds) return true; // If no bounds yet, show everything\n    \n    // Add buffer to avoid popping at edges\n    const buffer = 0.5; // Buffer in degrees\n    \n    return (\n      lat >= mapBounds.south - buffer &&\n      lat <= mapBounds.north + buffer &&\n      lng >= mapBounds.west - buffer &&\n      lng <= mapBounds.east + buffer\n    );\n  }, [mapBounds]);\n  \n  // Function to render vessels based on the display mode and zoom level\n  const renderVessels = useCallback(() => {\n    // Use zoom level to determine detail level\n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    const isLowDetail = currentZoom < 6;\n    \n    // Filter vessels based on current filter and map bounds\n    const filteredVessels = vessels.filter(v => {\n      // First apply user filter\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      // Then check if in current map bounds\n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    });\n    \n    // Create vessel markers\n    return filteredVessels.map(vessel => {\n      // Convert vessel position to LatLng\n      const position = { lat: vessel.position[1], lng: vessel.position[0] };\n      const isSelected = selectedVessel?.id === vessel.id;\n      \n      // Define icon and visualization based on display mode and zoom level\n      let iconProps = {};\n      let circleProps = { radius: 0 };\n    \n      switch(displayMode) {\n        case 'radar':\n          // Radar mode - shows vessels as dots with direction indicators\n          const radarOpacity = vessel.type === 'submarine' && vessel.isSubmerged ? \n            0.1 + vessel.detectionProbability.radar * 0.2 : \n            0.3 + vessel.detectionProbability.radar * 0.7;\n          \n          const radarScale = vessel.type === 'submarine' ? \n            vessel.isSubmerged ? 0.5 : 0.8 : \n            Math.max(0.6, Math.min(1.2, 0.6 + vessel.length / 300));\n          \n          const radarColor = vessel.type === 'submarine' ? \n            'rgb(255, 0, 0)' : \n            vessel.isRussian ? 'rgb(231, 76, 60)' : 'rgb(52, 152, 219)';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else if (isMediumDetail) {\n            // Simplified arrow for medium detail\n            const arrowSize = radarScale * 4;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L -${arrowSize/2},${arrowSize} Z`, // Simpler arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.speed > 1 ? vessel.heading : 0, // Only rotate if speed > 1 knot\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Full detail for high zoom levels\n            const arrowSize = radarScale * 5;\n            iconProps = {\n              path: `M 0,-${arrowSize} L ${arrowSize/2},${arrowSize} L 0,${arrowSize/2} L -${arrowSize/2},${arrowSize} Z`, // Arrow shape\n              fillColor: radarColor,\n              fillOpacity: radarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.speed > 1 ? vessel.heading : 0, // Only rotate if speed > 1 knot\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          break;\n          \n        case 'sonar':\n          // Sonar mode - shows vessels as acoustic signatures\n          const sonarOpacity = vessel.type === 'submarine' ? \n            0.5 + vessel.detectionProbability.sonar * 0.5 : \n            0.2 + vessel.detectionProbability.sonar * 0.8;\n          \n          const sonarColor = vessel.type === 'submarine' ? '#FF00FF' : '#00E5FF';\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Simplified acoustic wave\n            if (vessel.type === 'submarine') {\n              const waveRadius = vessel.speed * 80;\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          } else {\n            // Use the same arrow shape as radar mode but with sonar colors\n            const sonarArrowSize = vessel.type === 'submarine' ? 5 : 4;\n            iconProps = {\n              path: `M 0,-${sonarArrowSize} L ${sonarArrowSize/2},${sonarArrowSize} L 0,${sonarArrowSize/2} L -${sonarArrowSize/2},${sonarArrowSize} Z`, // Arrow shape\n              fillColor: sonarColor,\n              fillOpacity: sonarOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.speed > 1 ? vessel.heading : 0, // Only rotate if speed > 1 knot\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n            \n            // Add acoustic wave circle - only at higher zoom levels\n            if (isHighDetail) {\n              const waveRadius = vessel.type === 'submarine' ? \n                Math.max(500, vessel.speed * 100) : \n                Math.max(300, vessel.speed * 60);\n                \n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.05,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.2,\n                  strokeWeight: 1,\n                }\n              };\n            } else if (isMediumDetail && vessel.type === 'submarine') {\n              const waveRadius = Math.max(300, vessel.speed * 80);\n              circleProps = {\n                radius: waveRadius,\n                options: {\n                  fillColor: sonarColor,\n                  fillOpacity: 0.03,\n                  strokeColor: sonarColor,\n                  strokeOpacity: 0.1,\n                  strokeWeight: 1,\n                }\n              };\n            }\n          }\n          break;\n          \n        case 'fused':\n          // Fused mode - combines radar and sonar data\n          const fusedOpacity = 0.4 + vessel.detectionProbability.fused * 0.6;\n          \n          // Create color gradient based on radar/sonar detection probabilities\n          const radarValue = Math.floor(vessel.detectionProbability.radar * 255);\n          const sonarValue = Math.floor(vessel.detectionProbability.sonar * 255);\n          const fusedColor = vessel.isRussian ? \n            `rgb(255, 100, 100)` : \n            `rgb(100, ${radarValue}, ${sonarValue})`;\n          \n          if (isLowDetail) {\n            // Simple dots for low detail level\n            iconProps = {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              scale: vessel.type === 'submarine' ? 3 : 2,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          } else {\n            // Use the same arrow shape as other modes but with fused colors\n            const fusedArrowSize = 5;\n            iconProps = {\n              path: `M 0,-${fusedArrowSize} L ${fusedArrowSize/2},${fusedArrowSize} L 0,${fusedArrowSize/2} L -${fusedArrowSize/2},${fusedArrowSize} Z`, // Arrow shape\n              fillColor: fusedColor,\n              fillOpacity: fusedOpacity,\n              strokeColor: '#FFFFFF',\n              strokeWeight: 1,\n              rotation: vessel.speed > 1 ? vessel.heading : 0, // Only rotate if speed > 1 knot\n              scale: 1,\n              anchor: new window.google.maps.Point(0, 0),\n            };\n          }\n          \n          // Add confidence circle - only at higher zoom levels\n          if (isHighDetail) {\n            const confidenceRadius = 300 + (1 - vessel.detectionProbability.fused) * 1000;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.4,\n                strokeWeight: 0.5,\n              }\n            };\n          } else if (isMediumDetail && (vessel.type === 'military' || vessel.type === 'submarine')) {\n            // Only show confidence circles for important vessels at medium zoom\n            const confidenceRadius = 200 + (1 - vessel.detectionProbability.fused) * 800;\n            circleProps = {\n              radius: confidenceRadius,\n              options: {\n                fillColor: 'transparent',\n                fillOpacity: 0,\n                strokeColor: vessel.isRussian ? \"#FF6B6B\" : \"#4285F4\",\n                strokeOpacity: 0.3,\n                strokeWeight: 0.5,\n              }\n            };\n          }\n          break;\n          \n        default:\n          // Default to radar mode with arrow icon\n          const defaultSize = 5;\n          iconProps = {\n            path: `M 0,-${defaultSize} L ${defaultSize/2},${defaultSize} L 0,${defaultSize/2} L -${defaultSize/2},${defaultSize} Z`, // Arrow shape\n            fillColor: '#FFFFFF',\n            fillOpacity: 0.8,\n            strokeColor: '#000000',\n            strokeWeight: 1,\n            rotation: vessel.speed > 1 ? vessel.heading : 0, // Only rotate if speed > 1 knot\n            scale: 1,\n            anchor: new window.google.maps.Point(0, 0),\n          };\n          break;\n      }\n\n      return (\n        <React.Fragment key={vessel.id}>\n          <MemoizedMarker\n            position={position}\n            icon={iconProps}\n            onClick={(e) => {\n              // Prevent event propagation to the map\n              if (e && e.domEvent) {\n                e.domEvent.stopPropagation();\n              }\n              \n              // Don't immediately close the tooltip if we're clicking on a vessel\n              e && e.stop && e.stop();\n              \n              // Log complete vessel data for debugging\n              console.log(\"Vessel clicked - Raw data:\", JSON.stringify(vessel));\n              \n              // Create a complete copy of the vessel to ensure React detects the state change\n              const vesselCopy = JSON.parse(JSON.stringify(vessel));\n              \n              // Immediately set selected vessel without delay\n              setSelectedVessel(vesselCopy);\n            }}\n            zIndex={isSelected ? 1000 : vessel.type === 'submarine' ? 500 : 100}\n          />\n          \n          \n          {circleProps.radius > 0 && (\n            <MemoizedCircle\n              center={position}\n              radius={circleProps.radius}\n              options={circleProps.options}\n            />\n          )}\n          \n          {vessel.type === 'submarine' && vessel.isSubmerged && displayMode !== 'fused' && isHighDetail && (\n            <MemoizedMarker\n              position={{\n                lat: position.lat + 0.03,\n                lng: position.lng + 0.03\n              }}\n              label={{\n                text: `${vessel.depth}m`,\n                color: '#FFFFFF',\n                fontSize: '8px',\n                fontWeight: 'bold'\n              }}\n              icon={{\n                path: 0, // CIRCLE\n                scale: 0,\n                fillOpacity: 0,\n                strokeOpacity: 0\n              }}\n            />\n          )}\n        </React.Fragment>\n      );\n    });\n  }, [vessels, filter, isInMapBounds, displayMode, currentZoom, selectedVessel]);\n  \n  // Baltic Sea wind farm data - expanded with EMODnet data\n  const windFarmsData = [\n    // Denmark\n    { \n      name: \"Kriegers Flak\", \n      country: \"Denmark\", \n      capacity: 604, \n      lat: 54.9833, \n      lng: 13.0333, \n      status: \"operational\",\n      turbines: 72,\n      area: 132, // km²\n      areaPoints: [\n        {lat: 54.9633, lng: 13.0133},\n        {lat: 54.9733, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0533},\n        {lat: 55.0033, lng: 13.0133},\n        {lat: 54.9833, lng: 12.9933},\n        {lat: 54.9633, lng: 13.0133}\n      ]\n    },\n    { \n      name: \"Middelgrunden\", \n      country: \"Denmark\", \n      capacity: 40, \n      lat: 55.6853, \n      lng: 12.6913, \n      status: \"operational\",\n      turbines: 20,\n      area: 4, // km²\n      areaPoints: [\n        {lat: 55.6903, lng: 12.6813},\n        {lat: 55.6903, lng: 12.7013},\n        {lat: 55.6803, lng: 12.7013},\n        {lat: 55.6803, lng: 12.6813},\n        {lat: 55.6903, lng: 12.6813}\n      ]\n    },\n    { \n      name: \"Rødsand I\", \n      country: \"Denmark\", \n      capacity: 166, \n      lat: 54.5508, \n      lng: 11.7083, \n      status: \"operational\",\n      turbines: 72,\n      area: 35, // km²\n      areaPoints: [\n        {lat: 54.5408, lng: 11.6883},\n        {lat: 54.5408, lng: 11.7283},\n        {lat: 54.5608, lng: 11.7283},\n        {lat: 54.5608, lng: 11.6883},\n        {lat: 54.5408, lng: 11.6883}\n      ]\n    },\n    { name: \"Rødsand II\", country: \"Denmark\", capacity: 207, lat: 54.5580, lng: 11.6170, status: \"operational\", turbines: 90, area: 40 },\n    { name: \"Anholt\", country: \"Denmark\", capacity: 400, lat: 56.6000, lng: 11.2097, status: \"operational\", turbines: 111, area: 88 },\n    { name: \"Sprogø\", country: \"Denmark\", capacity: 21, lat: 55.3414, lng: 10.9767, status: \"operational\", turbines: 7, area: 6 },\n    { name: \"Samsø\", country: \"Denmark\", capacity: 23, lat: 55.7194, lng: 10.5639, status: \"operational\", turbines: 10, area: 5 },\n    \n    // Sweden\n    { name: \"Karehamn\", country: \"Sweden\", capacity: 48, lat: 56.9750, lng: 17.0000, status: \"operational\", turbines: 16, area: 8 },\n    { name: \"Lillgrund\", country: \"Sweden\", capacity: 110, lat: 55.5000, lng: 12.7667, status: \"operational\", turbines: 48, area: 6 },\n    { name: \"Södra Midsjöbanken\", country: \"Sweden\", capacity: 1500, lat: 55.7500, lng: 17.4000, status: \"planned\", turbines: 170, area: 265 },\n    { name: \"Storgrundet\", country: \"Sweden\", capacity: 265, lat: 61.1532, lng: 17.4376, status: \"planned\", turbines: 70, area: 57 },\n    { name: \"Utgrunden\", country: \"Sweden\", capacity: 10.5, lat: 56.3350, lng: 16.2860, status: \"operational\", turbines: 7, area: 2 },\n    { name: \"Bockstigen\", country: \"Sweden\", capacity: 2.5, lat: 57.0389, lng: 18.1378, status: \"operational\", turbines: 5, area: 1 },\n    \n    // Germany\n    { name: \"EnBW Baltic 1\", country: \"Germany\", capacity: 48, lat: 54.6080, lng: 12.6520, status: \"operational\", turbines: 21, area: 7 },\n    { name: \"EnBW Baltic 2\", country: \"Germany\", capacity: 288, lat: 54.9900, lng: 13.1666, status: \"operational\", turbines: 80, area: 27 },\n    { name: \"Arkona\", country: \"Germany\", capacity: 385, lat: 54.7833, lng: 14.1000, status: \"operational\", turbines: 60, area: 39 },\n    { name: \"Wikinger\", country: \"Germany\", capacity: 350, lat: 54.8333, lng: 14.0750, status: \"operational\", turbines: 70, area: 34 },\n    { name: \"Arcadis Ost 1\", country: \"Germany\", capacity: 257, lat: 54.8333, lng: 13.7500, status: \"under construction\", turbines: 27, area: 30 },\n    { name: \"Gennaker\", country: \"Germany\", capacity: 927, lat: 54.5500, lng: 12.2500, status: \"planned\", turbines: 103, area: 176 },\n    { name: \"Nordlicher Grund\", country: \"Germany\", capacity: 630, lat: 54.9831, lng: 6.3582, status: \"planned\", turbines: 64, area: 57 },\n    { name: \"Ostseeschatz\", country: \"Germany\", capacity: 372, lat: 54.3660, lng: 11.9165, status: \"planned\", turbines: 62, area: 40 },\n    { name: \"Baltic Eagle\", country: \"Germany\", capacity: 476, lat: 54.7778, lng: 13.9239, status: \"under construction\", turbines: 50, area: 40 },\n    \n    // Finland\n    { name: \"Tahkoluoto\", country: \"Finland\", capacity: 42, lat: 61.6330, lng: 21.3830, status: \"operational\", turbines: 10, area: 15 },\n    { name: \"Ajos\", country: \"Finland\", capacity: 42, lat: 65.7166, lng: 24.5166, status: \"operational\", turbines: 13, area: 10 },\n    { name: \"Kemi Ajos I\", country: \"Finland\", capacity: 15, lat: 65.6405, lng: 24.5267, status: \"operational\", turbines: 5, area: 6 },\n    { name: \"Kemi Ajos II\", country: \"Finland\", capacity: 16, lat: 65.6563, lng: 24.5402, status: \"operational\", turbines: 3, area: 4 },\n    { name: \"Raahe\", country: \"Finland\", capacity: 44, lat: 64.6500, lng: 24.3500, status: \"planned\", turbines: 8, area: 15 },\n    { name: \"Korsnäs\", country: \"Finland\", capacity: 1300, lat: 62.7500, lng: 21.0500, status: \"planned\", turbines: 70, area: 175 },\n    { name: \"Siikajoki\", country: \"Finland\", capacity: 100, lat: 64.8167, lng: 24.6167, status: \"planned\", turbines: 20, area: 25 },\n    \n    // Poland\n    { name: \"Baltic Power\", country: \"Poland\", capacity: 1200, lat: 55.0000, lng: 18.3330, status: \"under construction\", turbines: 76, area: 131 },\n    { name: \"FEW Baltic II\", country: \"Poland\", capacity: 350, lat: 54.8000, lng: 16.5000, status: \"planned\", turbines: 37, area: 41 },\n    { name: \"Baltica 1\", country: \"Poland\", capacity: 896, lat: 55.2060, lng: 17.1633, status: \"planned\", turbines: 64, area: 108 },\n    { name: \"Baltica 2\", country: \"Poland\", capacity: 1498, lat: 55.3340, lng: 16.8630, status: \"planned\", turbines: 107, area: 190 },\n    { name: \"Baltica 3\", country: \"Poland\", capacity: 1045, lat: 55.3340, lng: 16.7000, status: \"planned\", turbines: 95, area: 131 },\n    { name: \"MFW Bałtyk I\", country: \"Poland\", capacity: 1560, lat: 55.2383, lng: 17.4633, status: \"planned\", turbines: 100, area: 128 },\n    { name: \"MFW Bałtyk II\", country: \"Poland\", capacity: 720, lat: 55.1233, lng: 17.2467, status: \"planned\", turbines: 60, area: 65 },\n    { name: \"MFW Bałtyk III\", country: \"Poland\", capacity: 720, lat: 55.0817, lng: 17.0667, status: \"planned\", turbines: 60, area: 80 },\n    \n    // Estonia\n    { \n      name: \"Estonia Offshore 1\", \n      country: \"Estonia\", \n      capacity: 1000, \n      lat: 58.8000, \n      lng: 22.0000, \n      status: \"planned\",\n      turbines: 115,\n      area: 230, // km²\n      areaPoints: [\n        {lat: 58.7800, lng: 21.9600},\n        {lat: 58.7800, lng: 22.0400},\n        {lat: 58.8200, lng: 22.0400},\n        {lat: 58.8200, lng: 21.9600},\n        {lat: 58.7800, lng: 21.9600}\n      ]\n    },\n    { name: \"Liivi\", country: \"Estonia\", capacity: 1000, lat: 57.8333, lng: 23.5000, status: \"planned\", turbines: 100, area: 160 },\n    { name: \"Hiiumaa\", country: \"Estonia\", capacity: 700, lat: 59.0833, lng: 22.3833, status: \"planned\", turbines: 70, area: 100 },\n    { name: \"Saare-Liivi\", country: \"Estonia\", capacity: 600, lat: 57.9500, lng: 22.6833, status: \"planned\", turbines: 60, area: 90 },\n    \n    // Latvia\n    { name: \"ELWIND\", country: \"Latvia\", capacity: 1000, lat: 57.0830, lng: 20.7500, status: \"planned\", turbines: 100, area: 200 },\n    \n    // Lithuania\n    { name: \"Lithuanian OWF I\", country: \"Lithuania\", capacity: 700, lat: 55.8330, lng: 20.5000, status: \"planned\", turbines: 70, area: 120 },\n    \n    // Special projects\n    { \n      name: \"Bornholm Energy Island\", \n      country: \"Denmark\", \n      capacity: 3000, \n      lat: 55.1000, \n      lng: 14.9000, \n      status: \"planned\",\n      turbines: 200,\n      area: 400, // km²\n      areaPoints: [\n        {lat: 55.0500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.9500},\n        {lat: 55.1500, lng: 14.8500},\n        {lat: 55.0500, lng: 14.8500}\n      ]\n    },\n    { name: \"Hywind Tampen\", country: \"Norway\", capacity: 88, lat: 61.2500, lng: 20.4000, status: \"operational\", turbines: 11, area: 22 }\n  ];\n  \n  // Function to render wind farms on the map - enhanced with polygon areas and zoom-based detail\n  const renderWindFarms = useCallback(() => {\n    if (!showWindFarms) return null;\n    \n    // Filter wind farms to only show those in current map bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    const isMediumDetail = currentZoom >= 6 && currentZoom < 8;\n    \n    return visibleWindFarms\n      .map(windFarm => {\n        const position = { lat: windFarm.lat, lng: windFarm.lng };\n        \n        // Use different colors based on wind farm status\n        const fillColor = windFarm.status === \"operational\" \n          ? '#FFC107' // amber color for operational wind farms\n          : '#4CAF50'; // green color for planned and under construction\n        \n        // Icon for wind farms\n        const windFarmIcon = {\n          path: \"M -2,-2 L 2,-2 L 2,2 L -2,2 Z\", // Square shape\n          scale: 1.5,\n          fillColor: fillColor,\n          fillOpacity: 0.8,\n          strokeColor: '#FFFFFF',\n          strokeWeight: 1,\n          rotation: 45, // Diamond shape\n        };\n        \n        // Determine how to visualize the area based on zoom level\n        let areaVisualization;\n        \n        if (isHighDetail) {\n          // Full detail at high zoom\n          if (windFarm.areaPoints) {\n            // Use specific polygon points if available\n            areaVisualization = (\n              <MemoizedPolygon\n                paths={windFarm.areaPoints}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else if (windFarm.area) {\n            // If we only have the area in km², create a sized circle\n            // Convert km² to meters radius using area = π*r²\n            const areaInSquareMeters = windFarm.area * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          } else {\n            // Calculate estimated area based on capacity and turbines\n            let estimatedArea;\n            if (windFarm.turbines) {\n              estimatedArea = windFarm.turbines * 1.0;\n            } else {\n              estimatedArea = windFarm.capacity / 6.5;\n            }\n            \n            const areaInSquareMeters = estimatedArea * 1000000;\n            const radiusInMeters = Math.sqrt(areaInSquareMeters / Math.PI);\n            \n            areaVisualization = (\n              <MemoizedCircle\n                center={position}\n                radius={radiusInMeters}\n                options={{\n                  fillColor: fillColor,\n                  fillOpacity: 0.1,\n                  strokeColor: fillColor,\n                  strokeOpacity: 0.4,\n                  strokeWeight: 1\n                }}\n              />\n            );\n          }\n        } else if (isMediumDetail) {\n          // Simplified visualization for medium zoom levels\n          // Just use a circle with a simplified radius calculation\n          let radius;\n          \n          if (windFarm.area) {\n            // Use the known area but with simplified calculation\n            radius = Math.sqrt(windFarm.area) * 1000; // Simplified conversion to meters\n          } else if (windFarm.capacity > 500) {\n            radius = 15000; // Large wind farm\n          } else if (windFarm.capacity > 100) {\n            radius = 10000; // Medium wind farm\n          } else {\n            radius = 5000; // Small wind farm\n          }\n          \n          areaVisualization = (\n            <MemoizedCircle\n              center={position}\n              radius={radius}\n              options={{\n                fillColor: fillColor,\n                fillOpacity: 0.08,\n                strokeColor: fillColor,\n                strokeOpacity: 0.3,\n                strokeWeight: 1\n              }}\n            />\n          );\n        } else {\n          // No area visualization at low zoom levels - just markers\n          areaVisualization = null;\n        }\n        \n        return (\n          <React.Fragment key={`wind-farm-${windFarm.name}`}>\n            <MemoizedMarker\n              position={position}\n              icon={windFarmIcon}\n              onClick={(e) => {\n                // Prevent event propagation to the map\n                if (e && e.domEvent) {\n                  e.domEvent.stopPropagation();\n                }\n                \n                // Don't immediately close the tooltip if we're clicking on a wind farm\n                e && e.stop && e.stop();\n                \n                // Calculate estimated area if not provided\n                let displayArea = windFarm.area;\n                if (!displayArea) {\n                  if (windFarm.turbines) {\n                    displayArea = Math.round(windFarm.turbines * 1.0);\n                  } else {\n                    displayArea = Math.round(windFarm.capacity / 6.5);\n                  }\n                }\n                \n                console.log(\"Wind farm clicked:\", windFarm.name);\n                \n                // Create a wind farm object with all necessary properties\n                const windFarmObj = {\n                  id: `wind-farm-${windFarm.name}`,\n                  name: windFarm.name,\n                  type: 'wind-farm',\n                  flag: windFarm.country,\n                  operator: windFarm.country,\n                  capacity: windFarm.capacity,\n                  status: windFarm.status,\n                  area: displayArea,\n                  turbines: windFarm.turbines,\n                  estimatedArea: !windFarm.area,\n                  isWindFarm: true\n                };\n                \n                // Set immediately without delay\n                setSelectedVessel(windFarmObj);\n              }}\n              zIndex={50}\n            />\n            \n            {areaVisualization}\n          </React.Fragment>\n        );\n      });\n  }, [showWindFarms, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Separate function to render ONLY radar coverage with zoom-based detail\n  const renderRadarCoverage = useCallback(() => {\n    if (!showWindFarms || !showRadarCoverage) return null;\n    \n    // Skip rendering radar coverage at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    // Filter to only show radar coverage for wind farms in the current bounds\n    const visibleWindFarms = windFarmsData.filter(farm => \n      isInMapBounds(farm.lat, farm.lng)\n    );\n    \n    const isHighDetail = currentZoom >= 8;\n    \n    return visibleWindFarms.map(windFarm => {\n      const position = { lat: windFarm.lat, lng: windFarm.lng };\n      const radarCoverageRadius = 77784; // 42 nautical miles in meters\n      \n      return (\n        <MemoizedCircle\n          key={`radar-${windFarm.name}`}\n          center={position}\n          radius={radarCoverageRadius}\n          options={{\n            fillColor: '#FF0000',\n            fillOpacity: isHighDetail ? 0.05 : 0.03,\n            strokeColor: '#FF0000',\n            strokeOpacity: isHighDetail ? 0.7 : 0.5,\n            strokeWeight: isHighDetail ? 1 : 0.5,\n            strokeDashArray: [5, 5], // Dashed line pattern\n          }}\n        />\n      );\n    });\n  }, [showWindFarms, showRadarCoverage, isInMapBounds, currentZoom, windFarmsData]);\n  \n  // Function to render vessel radar coverage based on gross tonnage with zoom-based detail\n  const renderVesselRadarCoverage = useCallback(() => {\n    // Skip rendering vessel radar at low zoom levels for performance\n    if (currentZoom < 6) return null;\n    \n    const result = [];\n    \n    // Render medium vessels (GT 300-2999) with 20 NM radar\n    if (showVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT 300-2999\n      const mediumVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 300 && v.grossTonnage < 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      mediumVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Medium vessels have 20 NM radar range\n        const radarRangeNM = 20;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    // Render large vessels (GT >= 3000) with 40 NM radar\n    if (showLargeVesselRadar) {\n      // Filter vessels to show radar only for commercial vessels with GT >= 3000\n      const largeVessels = vessels.filter(v => \n        (v.type === 'commercial' || v.type === 'tanker' || v.type === 'passenger') && \n        v.grossTonnage >= 3000 &&\n        isInMapBounds(v.position[1], v.position[0])\n      );\n      \n      const isHighDetail = currentZoom >= 8;\n      \n      largeVessels.forEach(vessel => {\n        const position = { lat: vessel.position[1], lng: vessel.position[0] };\n        \n        // Large vessels have 40 NM radar range\n        const radarRangeNM = 40;\n        // Convert NM to meters (1 NM = 1852 meters)\n        const radarRangeMeters = radarRangeNM * 1852;\n        \n        result.push(\n          <MemoizedCircle\n            key={`large-vessel-radar-${vessel.id}`}\n            center={position}\n            radius={radarRangeMeters}\n            options={{\n              fillColor: '#4285F4',\n              fillOpacity: isHighDetail ? 0.03 : 0.02,\n              strokeColor: '#4285F4',\n              strokeOpacity: isHighDetail ? 0.6 : 0.4,\n              strokeWeight: isHighDetail ? 1 : 0.5,\n              strokeDashArray: [5, 5], // Dashed line pattern\n            }}\n          />\n        );\n      });\n    }\n    \n    return result;\n  }, [showVesselRadar, showLargeVesselRadar, vessels, isInMapBounds, currentZoom]);\n  \n  // Update the map when display mode changes\n  useEffect(() => {\n    // This effect updates the Google Maps styling when display mode changes\n    mapOptions.styles = getMapStyle(displayMode);\n    \n    // If map is loaded, we can update its options\n    if (mapRef.current) {\n      mapRef.current.setOptions(mapOptions);\n    }\n  }, [displayMode, mapOptions]);\n  \n  // onMapLoad with error handling \n  const onMapLoad = useCallback((map) => {\n    console.log(\"Map loaded successfully\");\n    mapRef.current = map;\n    \n    // Make sure dragging is enabled\n    map.setOptions({\n      draggable: true,\n      zoomControl: false,\n      scrollwheel: true,\n      disableDoubleClickZoom: false\n    });\n    \n    // We can store the map's zoom control functionality\n    zoomRef.current = {\n      zoomIn: () => {\n        const newZoom = map.getZoom() + 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      },\n      zoomOut: () => {\n        const newZoom = map.getZoom() - 1;\n        map.setZoom(newZoom);\n        setCurrentZoom(newZoom);\n      }\n    };\n    \n    // Get initial bounds\n    if (map.getBounds()) {\n      const bounds = map.getBounds();\n      setMapBounds({\n        north: bounds.getNorthEast().lat(),\n        east: bounds.getNorthEast().lng(),\n        south: bounds.getSouthWest().lat(),\n        west: bounds.getSouthWest().lng()\n      });\n      \n      // Initialize current center from the map\n      const center = map.getCenter();\n      setCurrentMapCenter({\n        lat: center.lat(),\n        lng: center.lng()\n      });\n    }\n    \n    // Set initial zoom\n    setCurrentZoom(map.getZoom());\n  }, []);\n  \n  // Add a click handler to the map background to deselect the current vessel\n  const handleMapClick = () => {\n    // Simply close the vessel display when map is clicked\n    // Using the simplest possible approach to avoid any errors\n    setSelectedVessel(null);\n  };\n  \n  // Get visible vessel count - memoized for sidebar display\n  const visibleVesselCount = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                         (filter === 'russian' ? v.isRussian : v.type === filter);\n      return matchesFilter;\n    }).length\n  , [vessels, filter]);\n  \n  // Get only vessels visible in current sidebar (both filtered and in bounds) - memoized\n  const displayedVessels = useMemo(() => \n    vessels.filter(v => {\n      const matchesFilter = filter === 'all' || \n                          (filter === 'russian' ? v.isRussian : v.type === filter);\n      \n      const inBounds = isInMapBounds(v.position[1], v.position[0]);\n      \n      return matchesFilter && inBounds;\n    }).slice(0, 50) // Still limit to 50 for performance\n  , [vessels, filter, isInMapBounds]);\n  \n  // Memoize UI elements that don't need frequent updates\n  const controlPanels = useMemo(() => (\n    <>\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-2 palantir-heading\">Display Mode</h2>\n        <div className=\"flex flex-row flex-nowrap\">\n          <button \n            className={displayMode === 'radar' ? 'active' : ''} \n            onClick={() => setDisplayMode('radar')}\n          >\n            <Radar size={14} className=\"mr-1\" />\n            Radar\n          </button>\n          <button \n            className={displayMode === 'sonar' ? 'active' : ''} \n            onClick={() => setDisplayMode('sonar')}\n          >\n            <Waves size={14} className=\"mr-1\" />\n            Sonar\n          </button>\n          <button \n            className={displayMode === 'fused' ? 'active' : ''} \n            onClick={() => setDisplayMode('fused')}\n          >\n            <Layers size={14} className=\"mr-1\" />\n            Fused\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-2 palantir-heading\">Vessel Filter</h2>\n        <div className=\"flex flex-row flex-wrap\">\n          <button \n            className={filter === 'all' ? 'active' : ''} \n            onClick={() => setFilter('all')}\n          >\n            All\n          </button>\n          <button \n            className={filter === 'commercial' ? 'active' : ''} \n            onClick={() => setFilter('commercial')}\n          >\n            Commercial\n          </button>\n          <button \n            className={filter === 'military' ? 'active' : ''} \n            onClick={() => setFilter('military')}\n          >\n            Military\n          </button>\n          <button \n            className={filter === 'submarine' ? 'active' : ''} \n            onClick={() => setFilter('submarine')}\n          >\n            Submarines\n          </button>\n          <button \n            className={filter === 'russian' ? 'active' : ''} \n            onClick={() => setFilter('russian')}\n          >\n            Russian\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Wind Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showWindFarms ? 'active' : ''}\n            onClick={() => {\n              const newShowWindFarms = !showWindFarms;\n              setShowWindFarms(newShowWindFarms);\n              // If turning off wind farms, ensure radar coverage is also off\n              if (!newShowWindFarms) {\n                setShowRadarCoverage(false);\n              }\n            }}\n          >\n            <Wind size={16} className=\"mr-1\" />\n            Wind Farms {showWindFarms ? '(Shown)' : '(Hidden)'}\n          </button>\n          <button \n            className={showRadarCoverage ? 'active' : ''}\n            onClick={() => {\n              setShowRadarCoverage(!showRadarCoverage);\n            }}\n            disabled={!showWindFarms}\n            style={{ opacity: !showWindFarms ? 0.5 : 1 }}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Radar Coverage (42 NM)\n          </button>\n        </div>\n      </div>\n\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Commercial Vessel Infrastructure</h2>\n        <div className=\"flex flex-col gap-2\">\n          <button \n            className={showVesselRadar ? 'active' : ''}\n            onClick={() => setShowVesselRadar(!showVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT 300-2999)\n          </button>\n          <button \n            className={showLargeVesselRadar ? 'active' : ''}\n            onClick={() => setShowLargeVesselRadar(!showLargeVesselRadar)}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            Vessel Radar (GT &gt; 3000)\n          </button>\n        </div>\n      </div>\n      \n      {/* Add simulation controls panel */}\n      <div className=\"control-panel\">\n        <h2 className=\"text-sm font-semibold mb-3 palantir-heading\">Vessel Simulation</h2>\n        <div className=\"flex flex-col gap-3\">\n          <button \n            className={simulationEnabled ? 'active' : ''}\n            onClick={() => setSimulationEnabled(!simulationEnabled)}\n          >\n            <Ship size={16} className=\"mr-1\" />\n            {simulationEnabled ? 'Pause Movement' : 'Start Movement'}\n          </button>\n          <div className=\"flex flex-col\">\n            <span className=\"text-xs mb-1\">Speed: {simulationSpeed}x</span>\n            <input \n              type=\"range\" \n              min=\"1\" \n              max=\"50\" \n              value={simulationSpeed}\n              onChange={(e) => setSimulationSpeed(parseInt(e.target.value))}\n              className=\"w-2/5 max-w-[80px] accent-blue-500\"\n            />\n          </div>\n          \n          <button \n            className={`${seaMeshSimulationEnabled ? 'active' : ''} bg-amber-700 hover:bg-amber-600`}\n            onClick={toggleSeaMeshSimulation}\n          >\n            <Radar size={16} className=\"mr-1\" />\n            {seaMeshSimulationEnabled ? 'Stop SeaMesh' : 'Simulate SeaMesh'}\n          </button>\n        </div>\n      </div>\n    </>\n  ), [displayMode, filter, showWindFarms, showRadarCoverage, showVesselRadar, showLargeVesselRadar, simulationEnabled, simulationSpeed, seaMeshSimulationEnabled]);\n  \n  // Add debugging for selectedVessel state changes\n  useEffect(() => {\n    console.log(\"selectedVessel updated:\", selectedVessel);\n    \n    // Add debugging to check if selectedVessel is correctly set\n    if (selectedVessel) {\n      console.log(\"Selected vessel details:\", {\n        id: selectedVessel.id,\n        name: selectedVessel.name,\n        type: selectedVessel.type,\n        isWindFarm: selectedVessel.isWindFarm\n      });\n      \n      // Force a small UI update to trigger re-renders\n      const refreshTimer = setTimeout(() => {\n        // This just forces a small UI update\n        const dummyEvent = new Event('resize');\n        window.dispatchEvent(dummyEvent);\n      }, 100);\n      \n      return () => clearTimeout(refreshTimer);\n    }\n  }, [selectedVessel]);\n  \n  // Function to stop all active simulations\n  const stopAllSimulations = useCallback(() => {\n    // Stop vessel movement simulation\n    if (simulationEnabled) {\n      setSimulationEnabled(false);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    }\n    \n    // Stop SeaMesh simulation\n    if (seaMeshSimulationEnabled) {\n      setSeaMeshSimulationEnabled(false);\n      if (seaMeshAnimationRef.current) {\n        clearInterval(seaMeshAnimationRef.current);\n        seaMeshAnimationRef.current = null;\n      }\n    }\n  }, [simulationEnabled, seaMeshSimulationEnabled]);\n\n  // Initialize warships for SeaMesh simulation\n  const initializeSeaMeshSimulation = useCallback(() => {\n    // Define locations\n    const kaliningrad = { lat: 54.7, lng: 20.5 };\n    const stPetersburg = { lat: 59.9, lng: 30.3 };\n    const stockholm = { lat: 59.3, lng: 18.1 };\n    \n    // Create Russian warships - one from Kaliningrad, one from St. Petersburg\n    const newWarships = [\n      {\n        id: 'warship-kaliningrad',\n        name: 'RFS Admiral Gorshkov',\n        type: 'military',\n        position: [kaliningrad.lng, kaliningrad.lat],\n        heading: 315, // Heading toward Stockholm\n        speed: 0,\n        targetSpeed: 20,\n        isRussian: true,\n        flag: 'Russia',\n        isWarship: true,\n        detected: false,\n        path: [\n          kaliningrad,\n          { lat: 55.3, lng: 19.2 }, // Baltic Sea route point 1\n          { lat: 56.5, lng: 18.4 }, // Baltic Sea route point 2\n          { lat: 57.9, lng: 18.2 }, // South of Gotland\n          { lat: 58.6, lng: 18.3 }, // North of Gotland\n          stockholm\n        ],\n        currentPathIndex: 0,\n        radar: false\n      },\n      {\n        id: 'warship-stpetersburg',\n        name: 'RFS Steregushchiy',\n        type: 'military',\n        position: [stPetersburg.lng, stPetersburg.lat],\n        heading: 270, // Heading west toward Stockholm\n        speed: 0,\n        targetSpeed: 25,\n        isRussian: true,\n        flag: 'Russia',\n        isWarship: true,\n        detected: false,\n        path: [\n          stPetersburg,\n          { lat: 59.8, lng: 27.0 }, // Gulf of Finland route point 1\n          { lat: 59.7, lng: 24.5 }, // Gulf of Finland route point 2\n          { lat: 59.5, lng: 22.0 }, // Gulf of Finland exit\n          { lat: 59.4, lng: 20.0 }, // Baltic Sea approach\n          stockholm\n        ],\n        currentPathIndex: 0,\n        radar: false\n      }\n    ];\n    \n    setWarships(newWarships);\n    setDetectionRings([]);\n    setSimulationStep(0);\n\n    // Center map on Gulf of Finland\n    if (mapRef.current) {\n      mapRef.current.panTo({ lat: 58.5, lng: 21.0 });\n      mapRef.current.setZoom(7);\n    }\n\n    return newWarships;\n  }, []);\n\n  // Run SeaMesh simulation steps - simplified version\n  const runSeaMeshSimulation = useCallback(() => {\n    if (!seaMeshSimulationEnabled) return;\n    \n    setSimulationStep(prevStep => {\n      const nextStep = prevStep + 1;\n      \n      // Move warships along their paths - simplified movement logic\n      setWarships(prevWarships => {\n        return prevWarships.map(warship => {\n          // Only start moving after a few steps (staggered start)\n          const shouldMove = (warship.id === 'warship-kaliningrad' && nextStep > 3) || \n                            (warship.id === 'warship-stpetersburg' && nextStep > 8);\n          \n          if (!shouldMove) return warship;\n          \n          // If we reached target, stop moving\n          if (warship.currentPathIndex >= warship.path.length - 1) {\n            return { ...warship, speed: 0, targetSpeed: 0 };\n          }\n          \n          // Simple direct movement to next path point\n          const currentPoint = warship.path[warship.currentPathIndex];\n          const nextPoint = warship.path[warship.currentPathIndex + 1];\n          \n          // Calculate new heading\n          const dx = nextPoint.lng - currentPoint.lng;\n          const dy = nextPoint.lat - currentPoint.lat;\n          const heading = Math.atan2(dx, dy) * (180 / Math.PI);\n          \n          // Simple fixed progress per step (less complex math)\n          const progress = 0.2; // Move 20% closer to the next point each step\n          \n          // Calculate new position\n          const newLng = currentPoint.lng + dx * progress;\n          const newLat = currentPoint.lat + dy * progress;\n          \n          // Check if we've reached the next point\n          const distanceToNext = Math.sqrt(\n            Math.pow(nextPoint.lng - newLng, 2) + \n            Math.pow(nextPoint.lat - newLat, 2)\n          );\n          \n          // If we're close enough to the next point, move to next segment\n          if (distanceToNext < 0.01) {\n            return {\n              ...warship,\n              position: [nextPoint.lng, nextPoint.lat],\n              currentPathIndex: warship.currentPathIndex + 1,\n              heading: heading,\n              speed: 20,\n            };\n          }\n          \n          // Otherwise, continue moving along current segment\n          return {\n            ...warship,\n            position: [newLng, newLat],\n            heading: heading,\n            speed: 20,\n          };\n        });\n      });\n      \n      // Add detection rings at specific steps - simplified\n      if (nextStep === 15 || nextStep === 30 || nextStep === 45 || nextStep === 60) {\n        console.log(\"Detection step triggered:\", nextStep);\n        \n        // Get current warship positions\n        const kaliningradWarship = warships.find(w => w.id === 'warship-kaliningrad');\n        const stPetersburgWarship = warships.find(w => w.id === 'warship-stpetersburg');\n        \n        // Add detection ring to a random vessel\n        if (vessels.length > 0 && (kaliningradWarship || stPetersburgWarship)) {\n          console.log(\"Found vessels and warships\");\n          // Choose a random commercial vessel\n          const commercialVessels = vessels.filter(v => \n            (v.type === 'commercial' || v.type === 'tanker') && v.grossTonnage >= 300\n          );\n          \n          if (commercialVessels.length > 0) {\n            console.log(\"Found commercial vessels:\", commercialVessels.length);\n            const randomIndex = Math.floor(Math.random() * commercialVessels.length);\n            const vessel = commercialVessels[randomIndex];\n            \n            // Choose which warship to detect (alternate)\n            const targetWarship = nextStep % 2 === 0 ? kaliningradWarship : stPetersburgWarship;\n            \n            if (targetWarship) {\n              console.log(\"Creating detection for warship:\", targetWarship.id);\n              // Create a detection ring\n              const newRing = {\n                id: `detection-${Date.now()}`,\n                position: { lat: vessel.position[1], lng: vessel.position[0] },\n                timestamp: Date.now(),\n                range: Math.floor(Math.random() * 10) + 15 // 15-25 NM\n              };\n              \n              // Add the ring\n              console.log(\"Adding new detection ring\");\n              setDetectionRings(prev => [...prev, newRing]);\n              \n              // Mark warship as detected\n              setWarships(prev => \n                prev.map(w => w.id === targetWarship.id ? {...w, detected: true, radar: true} : w)\n              );\n            }\n          }\n        }\n      }\n      \n      // End simulation after a certain number of steps\n      if (nextStep > 80) {\n        console.log(\"Simulation complete - ending\");\n        if (seaMeshAnimationRef.current) {\n          console.log(\"Clearing animation interval\");\n          clearInterval(seaMeshAnimationRef.current);\n          seaMeshAnimationRef.current = null;\n        }\n        \n        // Use a timeout to avoid state update during render\n        setTimeout(() => {\n          console.log(\"Setting seaMeshSimulationEnabled to false\");\n          setSeaMeshSimulationEnabled(false);\n        }, 0);\n      }\n      \n      return nextStep;\n    });\n  }, [seaMeshSimulationEnabled, vessels, warships, setWarships, setDetectionRings, setSeaMeshSimulationEnabled, seaMeshAnimationRef]);\n\n  // Function to toggle SeaMesh simulation\n  const toggleSeaMeshSimulation = useCallback(() => {\n    if (seaMeshSimulationEnabled) {\n      // Stop simulation\n      console.log(\"Stopping SeaMesh simulation\");\n      setSeaMeshSimulationEnabled(false);\n    } else {\n      // Stop other simulations first\n      if (simulationEnabled) {\n        console.log(\"Stopping vessel movement simulation before starting SeaMesh\");\n        setSimulationEnabled(false);\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n          animationFrameRef.current = null;\n        }\n      }\n      \n      // Initialize warships (reset if already exists)\n      console.log(\"Initializing warships for SeaMesh simulation\");\n      const initialWarships = initializeSeaMeshSimulation();\n      console.log(\"Initial warships created:\", initialWarships);\n      \n      // Start simulation\n      console.log(\"Starting SeaMesh simulation\");\n      setSeaMeshSimulationEnabled(true);\n    }\n  }, [seaMeshSimulationEnabled, simulationEnabled, initializeSeaMeshSimulation, setSeaMeshSimulationEnabled, setSimulationEnabled]);\n  \n  // Start/stop SeaMesh simulation\n  useEffect(() => {\n    console.log(\"SeaMesh simulation enabled changed:\", seaMeshSimulationEnabled);\n    console.log(\"Current warships:\", warships);\n    \n    if (seaMeshSimulationEnabled) {\n      // Initialize warships if not already done\n      if (warships.length === 0) {\n        console.log(\"No warships found, initializing...\");\n        const initialWarships = initializeSeaMeshSimulation();\n        console.log(\"Warships initialized:\", initialWarships);\n        \n        // Ensure warships are set properly before starting the animation\n        if (initialWarships && initialWarships.length > 0) {\n          console.log(\"Starting animation timer\");\n          // Run simulation every 2 seconds\n          seaMeshAnimationRef.current = setInterval(() => {\n            console.log(\"Animation step triggered\");\n            runSeaMeshSimulation();\n          }, 2000);\n        } else {\n          console.error(\"Failed to initialize warships\");\n        }\n      } else {\n        console.log(\"Warships already initialized, just starting animation\");\n        // Just start the animation if warships are already initialized\n        seaMeshAnimationRef.current = setInterval(() => {\n          console.log(\"Animation step triggered\");\n          runSeaMeshSimulation();\n        }, 2000);\n      }\n      \n      // Show vessel radar automatically\n      console.log(\"Enabling vessel radar for simulation\");\n      setShowVesselRadar(true);\n    } else if (seaMeshAnimationRef.current) {\n      console.log(\"Clearing SeaMesh animation interval\");\n      clearInterval(seaMeshAnimationRef.current);\n      seaMeshAnimationRef.current = null;\n    }\n    \n    return () => {\n      if (seaMeshAnimationRef.current) {\n        console.log(\"Cleanup: clearing SeaMesh animation interval\");\n        clearInterval(seaMeshAnimationRef.current);\n        seaMeshAnimationRef.current = null;\n      }\n    };\n  }, [seaMeshSimulationEnabled, initializeSeaMeshSimulation, runSeaMeshSimulation, warships.length, setShowVesselRadar]);\n  \n  // Render the SeaMesh simulation warships and detection rings\n  const renderSeaMeshSimulation = useCallback(() => {\n    if (warships.length === 0) return null;\n    \n    return (\n      <>\n        {/* Render the warships */}\n        {warships.map(warship => {\n          const position = { lat: warship.position[1], lng: warship.position[0] };\n          \n          // Create warship marker icon\n          const warshipIcon = {\n            path: \"M -1,1 L 1,1 L 1,-1 L -1,-1 Z\", // Simple square\n            fillColor: 'rgb(231, 76, 60)', // Red color for Russian vessels\n            fillOpacity: 0.9,\n            strokeColor: '#FFFFFF',\n            strokeWeight: 1,\n            scale: 5,\n            rotation: warship.heading,\n          };\n          \n          return (\n            <React.Fragment key={warship.id}>\n              <MemoizedMarker\n                position={position}\n                icon={warshipIcon}\n                zIndex={100}\n                onClick={() => setSelectedVessel(warship)}\n              />\n              \n              {/* Show radar coverage if detected */}\n              {warship.radar && (\n                <MemoizedCircle\n                  center={position}\n                  radius={40 * 1852} // 40 NM in meters\n                  options={{\n                    fillColor: '#FF5252',\n                    fillOpacity: 0.05,\n                    strokeColor: '#FF5252',\n                    strokeOpacity: 0.7,\n                    strokeWeight: 1,\n                    strokeDashArray: [5, 5], // Dashed line pattern\n                  }}\n                />\n              )}\n              \n              {/* Show path line for warships */}\n              <MemoizedPolyline\n                path={warship.path.map(point => ({ lat: point.lat, lng: point.lng }))}\n                options={{\n                  strokeColor: '#FF5252',\n                  strokeOpacity: 0.6,\n                  strokeWeight: 1,\n                  icons: [{\n                    icon: {\n                      path: 'M 0,-1 0,1',\n                      strokeColor: '#FF5252',\n                      strokeOpacity: 1,\n                      scale: 3\n                    },\n                    offset: '0',\n                    repeat: '15px'\n                  }]\n                }}\n              />\n            </React.Fragment>\n          );\n        })}\n        \n        {/* Render detection rings */}\n        {detectionRings.map((ring, index) => {\n          // Calculate pulse animation - rings should pulse/flash\n          const animationProgress = (Date.now() - ring.timestamp) % 3000 / 3000;\n          const opacity = 0.7 - animationProgress * 0.5;\n          const radius = ring.range * 1852; // Convert NM to meters\n          \n          return (\n            <MemoizedCircle\n              key={ring.id}\n              center={ring.position}\n              radius={radius}\n              options={{\n                fillColor: '#4CAF50',\n                fillOpacity: opacity * 0.1,\n                strokeColor: '#4CAF50',\n                strokeOpacity: opacity,\n                strokeWeight: 2,\n              }}\n            />\n          );\n        })}\n      </>\n    );\n  }, [warships, detectionRings, setSelectedVessel]);\n  \n  // Update UI to include display mode toggle\n  return (\n    <div className=\"baltic-tracker-container\">\n      <div className=\"flex h-screen\">\n        {showSidebar && (\n          <div className=\"sidebar w-80\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h1 className=\"text-xl font-semibold palantir-heading\">Baltic Sea Tracker</h1>\n              <button onClick={() => setShowSidebar(false)} className=\"text-gray-400 hover:text-white\">\n                <Menu size={20} />\n              </button>\n            </div>\n            \n            {controlPanels}\n          </div>\n        )}\n\n        <div className=\"flex-1 relative\">\n          {!showSidebar && (\n            <button\n              className=\"absolute top-4 left-4 z-10 bg-gray-800 p-2 rounded-md hover:bg-gray-700\"\n              onClick={() => setShowSidebar(true)}\n            >\n              <Menu size={20} />\n            </button>\n          )}\n          \n          {/* Simplified Google Maps integration */}\n          {loadError && (\n            <div className=\"w-full h-full flex flex-col items-center justify-center bg-gray-900 text-white p-4\">\n              <div className=\"text-xl mb-4\">Error loading Google Maps: {loadError.message}</div>\n            </div>\n          )}\n          \n          {!loadError && isLoaded ? (\n            <GoogleMap\n              id=\"map\"\n              mapContainerStyle={mapContainerStyle}\n              center={mapCenter}\n              zoom={mapZoom}\n              options={mapOptions}\n              onLoad={onMapLoad}\n              onUnmount={onMapUnmount}\n              onClick={handleMapClick}\n              onZoomChanged={handleZoomChanged}\n              onBoundsChanged={handleBoundsChanged}\n              key={mapKey}\n            >\n              {/* Render basemap features */}\n              {renderWindFarms()}\n              {renderRadarCoverage()}\n              {renderVesselRadarCoverage()}\n              \n              {/* Render vessels */}\n              {renderVessels()}\n              \n              {/* Render the SeaMesh simulation if enabled */}\n              {seaMeshSimulationEnabled && renderSeaMeshSimulation()}\n              \n              {/* Show selection details as a tooltip */}\n              {selectedVessel && renderSelectedVesselDetails()}\n            </GoogleMap>\n          ) : !loadError ? (\n            <div className=\"w-full h-full flex items-center justify-center bg-gray-900 text-white\">\n              <div className=\"text-xl\">Loading map...</div>\n            </div>\n          ) : null}\n          \n          <div className=\"absolute bottom-4 right-4 flex gap-2\">\n            <button \n              onClick={() => zoomRef.current && zoomRef.current.zoomIn()}\n              className=\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\"\n            >\n              <ZoomIn size={20} className=\"text-blue-400\" />\n            </button>\n            <button \n              onClick={() => zoomRef.current && zoomRef.current.zoomOut()}\n              className=\"bg-gray-800 hover:bg-gray-700 p-2 rounded-md shadow-lg\"\n            >\n              <ZoomOut size={20} className=\"text-blue-400\" />\n            </button>\n          </div>\n          \n          {/* Move the Reset filters button to bottom-right corner */}\n          <button\n            onClick={() => {\n              // Reset vessel selection and visualization features\n              setSelectedVessel(null);\n              setShowWindFarms(false);\n              setShowRadarCoverage(false);\n              setShowVesselRadar(false);\n              setShowLargeVesselRadar(false);\n              setSimulationEnabled(false);\n              \n              // Reset display settings\n              setDisplayMode('radar');\n              setFilter('all');\n              setSimulationSpeed(10);\n              \n              // Reset map position and zoom\n              if (mapRef.current) {\n                mapRef.current.setCenter(defaultCenter);\n                mapRef.current.setZoom(6);\n                setCurrentZoom(6);\n                setCurrentMapCenter(defaultCenter);\n              }\n              \n              // Force React to remount map components\n              setMapKey(Date.now());\n              \n              // Small timeout to ensure map refreshes completely\n              setTimeout(() => {\n                if (mapRef.current && mapRef.current.overlayMapTypes) {\n                  mapRef.current.overlayMapTypes.clear();\n                }\n              }, 10);\n            }}\n            style={{\n              position: 'absolute',\n              bottom: '20px',\n              right: '20px',\n              backgroundColor: '#8B0000',\n              color: '#FFFFFF',\n              padding: '8px 16px',\n              borderRadius: '4px',\n              border: 'none',\n              fontWeight: 'normal',\n              cursor: 'pointer',\n              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.5)',\n              zIndex: 9999,\n              fontSize: '14px'\n            }}\n          >\n            Reset filters\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-800 p-2 text-center text-sm text-gray-400\">\n        <div className=\"flex justify-center items-center\">\n          <Info size={16} className=\"mr-1 text-blue-400\" />\n          <span className=\"text-gray-300\">Baltic Sea Tracker - {filter === 'all' ? 300 : vessels.filter(v => filter === 'russian' ? v.isRussian : v.type === filter).length} vessels in {displayMode} mode | Zoom: {currentZoom}</span>\n          {showWindFarms && <span className=\"mx-1 text-amber-400\">| Wind Farms Shown</span>}\n          {showRadarCoverage && showWindFarms && <span className=\"mx-1 text-red-400\">| Radar Coverage (42 NM)</span>}\n          {showVesselRadar && <span className=\"mx-1 text-blue-400\">| Vessel Radar (20/40 NM)</span>}\n          {simulationEnabled && <span className=\"mx-1 text-green-400\">| Vessel Movement ({simulationSpeed}x)</span>}\n          {seaMeshSimulationEnabled && <span className=\"mx-1 text-amber-400\">| SeaMesh Simulation Active</span>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BalticSeaTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}